// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VideoSDKRTC
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import Darwin
import Dispatch
import Foundation
import Mediasoup
import Swift
@_exported import VideoSDKRTC
import VideosdkWebSocket
import WebRTC
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.activity
import os.log
import os
public protocol Visitor {
  mutating func visitSingularFloatField(value: Swift.Float, fieldNumber: Swift.Int) throws
  mutating func visitSingularDoubleField(value: Swift.Double, fieldNumber: Swift.Int) throws
  mutating func visitSingularInt32Field(value: Swift.Int32, fieldNumber: Swift.Int) throws
  mutating func visitSingularInt64Field(value: Swift.Int64, fieldNumber: Swift.Int) throws
  mutating func visitSingularUInt32Field(value: Swift.UInt32, fieldNumber: Swift.Int) throws
  mutating func visitSingularUInt64Field(value: Swift.UInt64, fieldNumber: Swift.Int) throws
  mutating func visitSingularSInt32Field(value: Swift.Int32, fieldNumber: Swift.Int) throws
  mutating func visitSingularSInt64Field(value: Swift.Int64, fieldNumber: Swift.Int) throws
  mutating func visitSingularFixed32Field(value: Swift.UInt32, fieldNumber: Swift.Int) throws
  mutating func visitSingularFixed64Field(value: Swift.UInt64, fieldNumber: Swift.Int) throws
  mutating func visitSingularSFixed32Field(value: Swift.Int32, fieldNumber: Swift.Int) throws
  mutating func visitSingularSFixed64Field(value: Swift.Int64, fieldNumber: Swift.Int) throws
  mutating func visitSingularBoolField(value: Swift.Bool, fieldNumber: Swift.Int) throws
  mutating func visitSingularStringField(value: Swift.String, fieldNumber: Swift.Int) throws
  mutating func visitSingularBytesField(value: Foundation.Data, fieldNumber: Swift.Int) throws
  mutating func visitSingularEnumField<E>(value: E, fieldNumber: Swift.Int) throws where E : VideoSDKRTC.Enum
  mutating func visitSingularMessageField<M>(value: M, fieldNumber: Swift.Int) throws where M : VideoSDKRTC.Message
  mutating func visitSingularGroupField<G>(value: G, fieldNumber: Swift.Int) throws where G : VideoSDKRTC.Message
  mutating func visitRepeatedFloatField(value: [Swift.Float], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedDoubleField(value: [Swift.Double], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedUInt32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedUInt64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedSInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedSInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedFixed32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedFixed64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedSFixed32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedSFixed64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedBoolField(value: [Swift.Bool], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedStringField(value: [Swift.String], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedBytesField(value: [Foundation.Data], fieldNumber: Swift.Int) throws
  mutating func visitRepeatedEnumField<E>(value: [E], fieldNumber: Swift.Int) throws where E : VideoSDKRTC.Enum
  mutating func visitRepeatedMessageField<M>(value: [M], fieldNumber: Swift.Int) throws where M : VideoSDKRTC.Message
  mutating func visitRepeatedGroupField<G>(value: [G], fieldNumber: Swift.Int) throws where G : VideoSDKRTC.Message
  mutating func visitPackedFloatField(value: [Swift.Float], fieldNumber: Swift.Int) throws
  mutating func visitPackedDoubleField(value: [Swift.Double], fieldNumber: Swift.Int) throws
  mutating func visitPackedInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  mutating func visitPackedInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  mutating func visitPackedUInt32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  mutating func visitPackedUInt64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  mutating func visitPackedSInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  mutating func visitPackedSInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  mutating func visitPackedFixed32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  mutating func visitPackedFixed64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  mutating func visitPackedSFixed32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  mutating func visitPackedSFixed64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  mutating func visitPackedBoolField(value: [Swift.Bool], fieldNumber: Swift.Int) throws
  mutating func visitPackedEnumField<E>(value: [E], fieldNumber: Swift.Int) throws where E : VideoSDKRTC.Enum
  mutating func visitMapField<KeyType, ValueType>(fieldType: VideoSDKRTC._ProtobufMap<KeyType, ValueType>.Type, value: VideoSDKRTC._ProtobufMap<KeyType, ValueType>.BaseType, fieldNumber: Swift.Int) throws where KeyType : VideoSDKRTC.MapKeyType, ValueType : VideoSDKRTC.MapValueType
  mutating func visitMapField<KeyType, ValueType>(fieldType: VideoSDKRTC._ProtobufEnumMap<KeyType, ValueType>.Type, value: VideoSDKRTC._ProtobufEnumMap<KeyType, ValueType>.BaseType, fieldNumber: Swift.Int) throws where KeyType : VideoSDKRTC.MapKeyType, ValueType : VideoSDKRTC.Enum, ValueType.RawValue == Swift.Int
  mutating func visitMapField<KeyType, ValueType>(fieldType: VideoSDKRTC._ProtobufMessageMap<KeyType, ValueType>.Type, value: VideoSDKRTC._ProtobufMessageMap<KeyType, ValueType>.BaseType, fieldNumber: Swift.Int) throws where KeyType : VideoSDKRTC.MapKeyType, ValueType : Swift.Hashable, ValueType : VideoSDKRTC.Message
  mutating func visitExtensionFields(fields: VideoSDKRTC.ExtensionFieldValueSet, start: Swift.Int, end: Swift.Int) throws
  mutating func visitExtensionFieldsAsMessageSet(fields: VideoSDKRTC.ExtensionFieldValueSet, start: Swift.Int, end: Swift.Int) throws
  mutating func visitUnknown(bytes: Foundation.Data) throws
}
extension VideoSDKRTC.Visitor {
  public mutating func visitSingularFloatField(value: Swift.Float, fieldNumber: Swift.Int) throws
  public mutating func visitSingularInt32Field(value: Swift.Int32, fieldNumber: Swift.Int) throws
  public mutating func visitSingularUInt32Field(value: Swift.UInt32, fieldNumber: Swift.Int) throws
  public mutating func visitSingularSInt32Field(value: Swift.Int32, fieldNumber: Swift.Int) throws
  public mutating func visitSingularSInt64Field(value: Swift.Int64, fieldNumber: Swift.Int) throws
  public mutating func visitSingularFixed32Field(value: Swift.UInt32, fieldNumber: Swift.Int) throws
  public mutating func visitSingularFixed64Field(value: Swift.UInt64, fieldNumber: Swift.Int) throws
  public mutating func visitSingularSFixed32Field(value: Swift.Int32, fieldNumber: Swift.Int) throws
  public mutating func visitSingularSFixed64Field(value: Swift.Int64, fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedFloatField(value: [Swift.Float], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedDoubleField(value: [Swift.Double], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedUInt32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedUInt64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedSInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedSInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedFixed32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedFixed64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedSFixed32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedSFixed64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedBoolField(value: [Swift.Bool], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedStringField(value: [Swift.String], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedBytesField(value: [Foundation.Data], fieldNumber: Swift.Int) throws
  public mutating func visitRepeatedEnumField<E>(value: [E], fieldNumber: Swift.Int) throws where E : VideoSDKRTC.Enum
  public mutating func visitRepeatedMessageField<M>(value: [M], fieldNumber: Swift.Int) throws where M : VideoSDKRTC.Message
  public mutating func visitRepeatedGroupField<G>(value: [G], fieldNumber: Swift.Int) throws where G : VideoSDKRTC.Message
  public mutating func visitPackedFloatField(value: [Swift.Float], fieldNumber: Swift.Int) throws
  public mutating func visitPackedDoubleField(value: [Swift.Double], fieldNumber: Swift.Int) throws
  public mutating func visitPackedInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  public mutating func visitPackedInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  public mutating func visitPackedUInt32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  public mutating func visitPackedUInt64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  public mutating func visitPackedSInt32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  public mutating func visitPackedSInt64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  public mutating func visitPackedFixed32Field(value: [Swift.UInt32], fieldNumber: Swift.Int) throws
  public mutating func visitPackedFixed64Field(value: [Swift.UInt64], fieldNumber: Swift.Int) throws
  public mutating func visitPackedSFixed32Field(value: [Swift.Int32], fieldNumber: Swift.Int) throws
  public mutating func visitPackedSFixed64Field(value: [Swift.Int64], fieldNumber: Swift.Int) throws
  public mutating func visitPackedBoolField(value: [Swift.Bool], fieldNumber: Swift.Int) throws
  public mutating func visitPackedEnumField<E>(value: [E], fieldNumber: Swift.Int) throws where E : VideoSDKRTC.Enum
  public mutating func visitSingularGroupField<G>(value: G, fieldNumber: Swift.Int) throws where G : VideoSDKRTC.Message
  public mutating func visitExtensionFieldsAsMessageSet(fields: VideoSDKRTC.ExtensionFieldValueSet, start: Swift.Int, end: Swift.Int) throws
  public mutating func visitExtensionFields(fields: VideoSDKRTC.ExtensionFieldValueSet, start: Swift.Int, end: Swift.Int) throws
}
public enum Aggregations {
  public static func drop() -> any VideoSDKRTC.Aggregation
  public static func defaultAggregation() -> any VideoSDKRTC.Aggregation
  public static func sum() -> any VideoSDKRTC.Aggregation
  public static func lastValue() -> any VideoSDKRTC.Aggregation
  public static func explicitBucketHistogram() -> any VideoSDKRTC.Aggregation
  public static func explicitBucketHistogram(buckets: [Swift.Double]) -> any VideoSDKRTC.Aggregation
}
public enum JSONDecodingError : Swift.Error {
  case failure
  case malformedNumber
  case numberRange
  case malformedMap
  case malformedBool
  case malformedString
  case invalidUTF8
  case missingFieldNames
  case schemaMismatch
  case unrecognizedEnumValue
  case illegalNull
  case unquotedMapKey
  case leadingZero
  case truncated
  case malformedDuration
  case malformedTimestamp
  case malformedFieldMask
  case trailingGarbage
  case conflictingOneOf
  case messageDepthLimit
  case unknownField(Swift.String)
}
public typealias AggregationResolver = (VideoSDKRTC.InstrumentType) -> any VideoSDKRTC.Aggregation
public protocol DefaultAggregationSelector {
  func getDefaultAggregation(for instrument: VideoSDKRTC.InstrumentType) -> any VideoSDKRTC.Aggregation
}
@_hasMissingDesignatedInitializers public class AggregationSelector : VideoSDKRTC.DefaultAggregationSelector {
  public static let instance: VideoSDKRTC.AggregationSelector
  final public let selector: VideoSDKRTC.AggregationResolver
  public func getDefaultAggregation(for instrument: VideoSDKRTC.InstrumentType) -> any VideoSDKRTC.Aggregation
  public static func defaultSelector() -> VideoSDKRTC.AggregationResolver
  public func with(instrumentType: VideoSDKRTC.InstrumentType, aggregation: any VideoSDKRTC.Aggregation) -> VideoSDKRTC.AggregationResolver
  @objc deinit
}
public struct TextFormatDecodingOptions : Swift.Sendable {
  public var messageDepthLimit: Swift.Int
  public init()
}
public protocol AggregationTemporalitySelectorProtocol {
  func getAggregationTemporality(for instrument: VideoSDKRTC.InstrumentType) -> VideoSDKRTC.AggregationTemporality
}
@_hasMissingDesignatedInitializers public class AggregationTemporalitySelector : VideoSDKRTC.AggregationTemporalitySelectorProtocol {
  public func getAggregationTemporality(for instrument: VideoSDKRTC.InstrumentType) -> VideoSDKRTC.AggregationTemporality
  public var aggregationTemporalitySelector: (VideoSDKRTC.InstrumentType) -> VideoSDKRTC.AggregationTemporality
  @objc deinit
}
public enum AggregationTemporality {
  case delta
  case cumulative
  public static func alwaysCumulative() -> VideoSDKRTC.AggregationTemporalitySelector
  public static func deltaPreferred() -> VideoSDKRTC.AggregationTemporalitySelector
  public static func == (a: VideoSDKRTC.AggregationTemporality, b: VideoSDKRTC.AggregationTemporality) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum AggregationType : Swift.String, Swift.Codable {
  case intGauge
  case doubleGauge
  case doubleSum
  case intSum
  case doubleSummary
  case intSummary
  case doubleHistogram
  case intHistogram
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class Aggregator<T> {
  public func update(value: T)
  public func checkpoint()
  public func toMetricData() -> any VideoSDKRTC.MetricData
  public func getAggregationType() -> VideoSDKRTC.AggregationType
  @objc deinit
}
public protocol Aggregation : AnyObject {
  func createAggregator(descriptor: VideoSDKRTC.InstrumentDescriptor, exemplarFilter: any VideoSDKRTC.ExemplarFilter) -> any VideoSDKRTC.StableAggregator
  func isCompatible(with descriptor: VideoSDKRTC.InstrumentDescriptor) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class AggregatorHandle {
  public func aggregateThenMaybeReset(startEpochNano: Swift.UInt64, endEpochNano: Swift.UInt64, attributes: [Swift.String : VideoSDKRTC.AttributeValue], reset: Swift.Bool) -> VideoSDKRTC.PointData
  public func recordLong(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  public func recordLong(value: Swift.Int)
  public func recordDouble(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  public func recordDouble(value: Swift.Double)
  @objc deinit
}
public protocol APIDoubleObserverMetricHandle {
  func observe(value: Swift.Double)
}
public protocol APIIntObserverMetricHandle {
  func observe(value: Swift.Int)
}
public struct ArrayWithCapacity<T> {
  public let capacity: Swift.Int
  public init(capacity: Swift.Int)
  public mutating func append(_ item: T)
}
extension VideoSDKRTC.ArrayWithCapacity : Swift.MutableCollection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(index: Swift.Int) -> T {
    get
    set
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = T
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<VideoSDKRTC.ArrayWithCapacity<T>>
  public typealias Iterator = Swift.IndexingIterator<VideoSDKRTC.ArrayWithCapacity<T>>
  public typealias SubSequence = Swift.Slice<VideoSDKRTC.ArrayWithCapacity<T>>
}
extension VideoSDKRTC.Message {
  public static func array(fromJSONUTF8Data jsonUTF8Data: Foundation.Data, options: VideoSDKRTC.JSONDecodingOptions = JSONDecodingOptions()) throws -> [Self]
  public static func array(fromJSONUTF8Data jsonUTF8Data: Foundation.Data, extensions: any VideoSDKRTC.ExtensionMap = SimpleExtensionMap(), options: VideoSDKRTC.JSONDecodingOptions = JSONDecodingOptions()) throws -> [Self]
  public static func jsonUTF8Data<C>(from collection: C, options: VideoSDKRTC.JSONEncodingOptions = JSONEncodingOptions()) throws -> Foundation.Data where Self == C.Element, C : Swift.Collection
}
@_hasMissingDesignatedInitializers public class AsynchronousMetricStorage : VideoSDKRTC.MetricStorage {
  public var registeredReader: VideoSDKRTC.RegisteredReader {
    get
  }
  public var metricDescriptor: VideoSDKRTC.MetricDescriptor {
    get
  }
  public func collect(resource: VideoSDKRTC.Resource, scope: VideoSDKRTC.InstrumentationScopeInfo, startEpochNanos: Swift.UInt64, epochNanos: Swift.UInt64) -> VideoSDKRTC.StableMetricData
  public func isEmpty() -> Swift.Bool
  @objc deinit
}
public protocol AttributeProcessorProtocol {
  func process(incoming: [Swift.String : VideoSDKRTC.AttributeValue]) -> [Swift.String : VideoSDKRTC.AttributeValue]
}
@_hasMissingDesignatedInitializers public class AttributeProcessor : VideoSDKRTC.AttributeProcessorProtocol {
  public func then(other: VideoSDKRTC.AttributeProcessor) -> VideoSDKRTC.AttributeProcessor
  public func process(incoming: [Swift.String : VideoSDKRTC.AttributeValue]) -> [Swift.String : VideoSDKRTC.AttributeValue]
  public static func filterByKeyName(nameFilter: @escaping (Swift.String) -> Swift.Bool) -> VideoSDKRTC.AttributeProcessor
  public static func append(attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> VideoSDKRTC.AttributeProcessor
  @objc deinit
}
@_hasMissingDesignatedInitializers public class JoinedAttributeProcessor : VideoSDKRTC.AttributeProcessor {
  override public func process(incoming: [Swift.String : VideoSDKRTC.AttributeValue]) -> [Swift.String : VideoSDKRTC.AttributeValue]
  override public func then(other: VideoSDKRTC.AttributeProcessor) -> VideoSDKRTC.AttributeProcessor
  public func prepend(processor: VideoSDKRTC.AttributeProcessor) -> VideoSDKRTC.AttributeProcessor
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NoopAttributeProcessor : VideoSDKRTC.AttributeProcessor {
  override public func process(incoming: [Swift.String : VideoSDKRTC.AttributeValue]) -> [Swift.String : VideoSDKRTC.AttributeValue]
  @objc deinit
}
public struct AttributesDictionary {
  public init(capacity: Swift.Int, valueLengthLimit: Swift.Int = Int.max)
  public subscript(key: Swift.String) -> VideoSDKRTC.AttributeValue? {
    get
    set
  }
  @discardableResult
  public mutating func updateValue(value: VideoSDKRTC.AttributeValue, forKey key: Swift.String) -> VideoSDKRTC.AttributeValue?
  public mutating func updateValues(attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  public mutating func updateValues(attributes: VideoSDKRTC.AttributesDictionary)
  public mutating func removeValueForKey(key: Swift.String) -> VideoSDKRTC.AttributeValue?
  public mutating func removeAll(keepCapacity: Swift.Int)
  public var count: Swift.Int {
    get
  }
  public var numberOfDroppedAttributes: Swift.Int {
    get
  }
  public var values: [VideoSDKRTC.AttributeValue] {
    get
  }
}
extension VideoSDKRTC.AttributesDictionary : Swift.Sequence {
  public func makeIterator() -> VideoSDKRTC.AttributesWithCapacityIterator
  public typealias Element = (Swift.String, VideoSDKRTC.AttributeValue)
  public typealias Iterator = VideoSDKRTC.AttributesWithCapacityIterator
}
public struct AttributesWithCapacityIterator : Swift.IteratorProtocol {
  public mutating func next() -> (Swift.String, VideoSDKRTC.AttributeValue)?
  public typealias Element = (Swift.String, VideoSDKRTC.AttributeValue)
}
@_hasMissingDesignatedInitializers open class AttributeSet : Swift.Hashable, Swift.Codable {
  public var labels: [Swift.String : VideoSDKRTC.AttributeValue] {
    get
  }
  public static var empty: VideoSDKRTC.AttributeSet
  required public init(labels: [Swift.String : VideoSDKRTC.AttributeValue])
  public static func == (lhs: VideoSDKRTC.AttributeSet, rhs: VideoSDKRTC.AttributeSet) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  open var hashValue: Swift.Int {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
}
public enum AttributeValue : Swift.Equatable, Swift.CustomStringConvertible, Swift.Hashable {
  case string(Swift.String)
  case bool(Swift.Bool)
  case int(Swift.Int)
  case double(Swift.Double)
  case stringArray([Swift.String])
  case boolArray([Swift.Bool])
  case intArray([Swift.Int])
  case doubleArray([Swift.Double])
  case set(VideoSDKRTC.AttributeSet)
  public var description: Swift.String {
    get
  }
  public init?(_ value: Any)
  public static func == (a: VideoSDKRTC.AttributeValue, b: VideoSDKRTC.AttributeValue) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.AttributeValue {
  public init(_ value: Swift.String)
  public init(_ value: Swift.Bool)
  public init(_ value: Swift.Int)
  public init(_ value: Swift.Double)
  public init(_ value: [Swift.String])
  public init(_ value: [Swift.Int])
  public init(_ value: [Swift.Double])
  public init(_ value: VideoSDKRTC.AttributeSet)
}
extension VideoSDKRTC.AttributeValue : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol Baggage : AnyObject {
  static func baggageBuilder() -> any VideoSDKRTC.BaggageBuilder
  func getEntries() -> [VideoSDKRTC.Entry]
  func getEntryValue(key: VideoSDKRTC.EntryKey) -> VideoSDKRTC.EntryValue?
}
public func == (lhs: any VideoSDKRTC.Baggage, rhs: any VideoSDKRTC.Baggage) -> Swift.Bool
public protocol BaggageBuilder : AnyObject {
  @discardableResult
  func setParent(_ parent: (any VideoSDKRTC.Baggage)?) -> Self
  @discardableResult
  func setNoParent() -> Self
  @discardableResult
  func put(key: VideoSDKRTC.EntryKey, value: VideoSDKRTC.EntryValue, metadata: VideoSDKRTC.EntryMetadata?) -> Self
  @discardableResult
  func remove(key: VideoSDKRTC.EntryKey) -> Self
  func build() -> any VideoSDKRTC.Baggage
}
public protocol BaggageManager : AnyObject {
  func baggageBuilder() -> any VideoSDKRTC.BaggageBuilder
}
public class BatchLogRecordProcessor : VideoSDKRTC.LogRecordProcessor {
  public init(logRecordExporter: any VideoSDKRTC.LogRecordExporter, scheduleDelay: Foundation.TimeInterval = 5, exportTimeout: Foundation.TimeInterval = 30, maxQueueSize: Swift.Int = 2048, maxExportBatchSize: Swift.Int = 512, willExportCallback: ((inout [VideoSDKRTC.ReadableLogRecord]) -> Swift.Void)? = nil)
  public func onEmit(logRecord: VideoSDKRTC.ReadableLogRecord)
  public func forceFlush() -> VideoSDKRTC.ExportResult
  public func forceFlush(timeout: Foundation.TimeInterval?)
  public func shutdown() -> VideoSDKRTC.ExportResult
  @objc deinit
}
public struct BatchSpanProcessor : VideoSDKRTC.SpanProcessor {
  public init(spanExporter: any VideoSDKRTC.SpanExporter, scheduleDelay: Foundation.TimeInterval = 5, exportTimeout: Foundation.TimeInterval = 30, maxQueueSize: Swift.Int = 2048, maxExportBatchSize: Swift.Int = 512, willExportCallback: ((inout [VideoSDKRTC.SpanData]) -> Swift.Void)? = nil)
  public let isStartRequired: Swift.Bool
  public let isEndRequired: Swift.Bool
  public func onStart(parentContext: VideoSDKRTC.SpanContext?, span: any VideoSDKRTC.ReadableSpan)
  public func onEnd(span: any VideoSDKRTC.ReadableSpan)
  public func shutdown()
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
}
open class BoundCounterMetric<T> {
  public init()
  open func add(value: T)
  @objc deinit
}
public struct UnknownStorage : Swift.Equatable, @unchecked Swift.Sendable {
  public var data: Foundation.Data {
    get
  }
  public init()
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (a: VideoSDKRTC.UnknownStorage, b: VideoSDKRTC.UnknownStorage) -> Swift.Bool
}
open class BoundHistogramMetric<T> {
  public init(explicitBoundaries: Swift.Array<T>? = nil)
  open func record(value: T)
  @objc deinit
}
public struct TextFormatEncodingOptions : Swift.Sendable {
  public var printUnknownFields: Swift.Bool
  public init()
}
public struct JSONDecodingOptions : Swift.Sendable {
  public var messageDepthLimit: Swift.Int
  public var ignoreUnknownFields: Swift.Bool
  public init()
}
open class BoundMeasureMetric<T> {
  public init()
  open func record(value: T)
  @objc deinit
}
open class BoundRawCounterMetric<T> {
  public init()
  open func record(sum: T, startDate: Foundation.Date, endDate: Foundation.Date)
  @objc deinit
}
public protocol FieldType {
  associatedtype BaseType : Swift.Hashable
  static var proto3DefaultValue: Self.BaseType { get }
  static func decodeSingular<D>(value: inout Self.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  static func decodeRepeated<D>(value: inout [Self.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  static func visitSingular<V>(value: Self.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  static func visitRepeated<V>(value: [Self.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  static func visitPacked<V>(value: [Self.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
}
public protocol MapKeyType : VideoSDKRTC.FieldType {
  static func _lessThan(lhs: Self.BaseType, rhs: Self.BaseType) -> Swift.Bool
}
extension VideoSDKRTC.MapKeyType where Self.BaseType : Swift.Comparable {
  public static func _lessThan(lhs: Self.BaseType, rhs: Self.BaseType) -> Swift.Bool
}
public protocol MapValueType : VideoSDKRTC.FieldType {
}
public struct ProtobufFloat : VideoSDKRTC.FieldType, VideoSDKRTC.MapValueType {
  public typealias BaseType = Swift.Float
  public static var proto3DefaultValue: Swift.Float {
    get
  }
  public static func decodeSingular<D>(value: inout VideoSDKRTC.ProtobufFloat.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func decodeRepeated<D>(value: inout [VideoSDKRTC.ProtobufFloat.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func visitSingular<V>(value: VideoSDKRTC.ProtobufFloat.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitRepeated<V>(value: [VideoSDKRTC.ProtobufFloat.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitPacked<V>(value: [VideoSDKRTC.ProtobufFloat.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
}
public struct ProtobufDouble : VideoSDKRTC.FieldType, VideoSDKRTC.MapValueType {
  public typealias BaseType = Swift.Double
  public static var proto3DefaultValue: Swift.Double {
    get
  }
  public static func decodeSingular<D>(value: inout VideoSDKRTC.ProtobufDouble.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func decodeRepeated<D>(value: inout [VideoSDKRTC.ProtobufDouble.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func visitSingular<V>(value: VideoSDKRTC.ProtobufDouble.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitRepeated<V>(value: [VideoSDKRTC.ProtobufDouble.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitPacked<V>(value: [VideoSDKRTC.ProtobufDouble.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
}
public struct ProtobufInt32 : VideoSDKRTC.FieldType, VideoSDKRTC.MapKeyType, VideoSDKRTC.MapValueType {
  public typealias BaseType = Swift.Int32
  public static var proto3DefaultValue: Swift.Int32 {
    get
  }
  public static func decodeSingular<D>(value: inout VideoSDKRTC.ProtobufInt32.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func decodeRepeated<D>(value: inout [VideoSDKRTC.ProtobufInt32.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func visitSingular<V>(value: VideoSDKRTC.ProtobufInt32.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitRepeated<V>(value: [VideoSDKRTC.ProtobufInt32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitPacked<V>(value: [VideoSDKRTC.ProtobufInt32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
}
public struct ProtobufInt64 : VideoSDKRTC.FieldType, VideoSDKRTC.MapKeyType, VideoSDKRTC.MapValueType {
  public typealias BaseType = Swift.Int64
  public static var proto3DefaultValue: Swift.Int64 {
    get
  }
  public static func decodeSingular<D>(value: inout VideoSDKRTC.ProtobufInt64.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func decodeRepeated<D>(value: inout [VideoSDKRTC.ProtobufInt64.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func visitSingular<V>(value: VideoSDKRTC.ProtobufInt64.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitRepeated<V>(value: [VideoSDKRTC.ProtobufInt64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitPacked<V>(value: [VideoSDKRTC.ProtobufInt64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
}
public struct ProtobufUInt32 : VideoSDKRTC.FieldType, VideoSDKRTC.MapKeyType, VideoSDKRTC.MapValueType {
  public typealias BaseType = Swift.UInt32
  public static var proto3DefaultValue: Swift.UInt32 {
    get
  }
  public static func decodeSingular<D>(value: inout VideoSDKRTC.ProtobufUInt32.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func decodeRepeated<D>(value: inout [VideoSDKRTC.ProtobufUInt32.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func visitSingular<V>(value: VideoSDKRTC.ProtobufUInt32.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitRepeated<V>(value: [VideoSDKRTC.ProtobufUInt32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitPacked<V>(value: [VideoSDKRTC.ProtobufUInt32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
}
public struct ProtobufUInt64 : VideoSDKRTC.FieldType, VideoSDKRTC.MapKeyType, VideoSDKRTC.MapValueType {
  public typealias BaseType = Swift.UInt64
  public static var proto3DefaultValue: Swift.UInt64 {
    get
  }
  public static func decodeSingular<D>(value: inout VideoSDKRTC.ProtobufUInt64.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func decodeRepeated<D>(value: inout [VideoSDKRTC.ProtobufUInt64.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func visitSingular<V>(value: VideoSDKRTC.ProtobufUInt64.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitRepeated<V>(value: [VideoSDKRTC.ProtobufUInt64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitPacked<V>(value: [VideoSDKRTC.ProtobufUInt64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
}
public struct ProtobufSInt32 : VideoSDKRTC.FieldType, VideoSDKRTC.MapKeyType, VideoSDKRTC.MapValueType {
  public typealias BaseType = Swift.Int32
  public static var proto3DefaultValue: Swift.Int32 {
    get
  }
  public static func decodeSingular<D>(value: inout VideoSDKRTC.ProtobufSInt32.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func decodeRepeated<D>(value: inout [VideoSDKRTC.ProtobufSInt32.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func visitSingular<V>(value: VideoSDKRTC.ProtobufSInt32.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitRepeated<V>(value: [VideoSDKRTC.ProtobufSInt32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitPacked<V>(value: [VideoSDKRTC.ProtobufSInt32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
}
public struct ProtobufSInt64 : VideoSDKRTC.FieldType, VideoSDKRTC.MapKeyType, VideoSDKRTC.MapValueType {
  public typealias BaseType = Swift.Int64
  public static var proto3DefaultValue: Swift.Int64 {
    get
  }
  public static func decodeSingular<D>(value: inout VideoSDKRTC.ProtobufSInt64.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func decodeRepeated<D>(value: inout [VideoSDKRTC.ProtobufSInt64.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func visitSingular<V>(value: VideoSDKRTC.ProtobufSInt64.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitRepeated<V>(value: [VideoSDKRTC.ProtobufSInt64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitPacked<V>(value: [VideoSDKRTC.ProtobufSInt64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
}
public struct ProtobufFixed32 : VideoSDKRTC.FieldType, VideoSDKRTC.MapKeyType, VideoSDKRTC.MapValueType {
  public typealias BaseType = Swift.UInt32
  public static var proto3DefaultValue: Swift.UInt32 {
    get
  }
  public static func decodeSingular<D>(value: inout VideoSDKRTC.ProtobufFixed32.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func decodeRepeated<D>(value: inout [VideoSDKRTC.ProtobufFixed32.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func visitSingular<V>(value: VideoSDKRTC.ProtobufFixed32.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitRepeated<V>(value: [VideoSDKRTC.ProtobufFixed32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitPacked<V>(value: [VideoSDKRTC.ProtobufFixed32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
}
public struct ProtobufFixed64 : VideoSDKRTC.FieldType, VideoSDKRTC.MapKeyType, VideoSDKRTC.MapValueType {
  public typealias BaseType = Swift.UInt64
  public static var proto3DefaultValue: Swift.UInt64 {
    get
  }
  public static func decodeSingular<D>(value: inout VideoSDKRTC.ProtobufFixed64.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func decodeRepeated<D>(value: inout [VideoSDKRTC.ProtobufFixed64.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func visitSingular<V>(value: VideoSDKRTC.ProtobufFixed64.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitRepeated<V>(value: [VideoSDKRTC.ProtobufFixed64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitPacked<V>(value: [VideoSDKRTC.ProtobufFixed64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
}
public struct ProtobufSFixed32 : VideoSDKRTC.FieldType, VideoSDKRTC.MapKeyType, VideoSDKRTC.MapValueType {
  public typealias BaseType = Swift.Int32
  public static var proto3DefaultValue: Swift.Int32 {
    get
  }
  public static func decodeSingular<D>(value: inout VideoSDKRTC.ProtobufSFixed32.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func decodeRepeated<D>(value: inout [VideoSDKRTC.ProtobufSFixed32.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func visitSingular<V>(value: VideoSDKRTC.ProtobufSFixed32.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitRepeated<V>(value: [VideoSDKRTC.ProtobufSFixed32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitPacked<V>(value: [VideoSDKRTC.ProtobufSFixed32.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
}
public struct ProtobufSFixed64 : VideoSDKRTC.FieldType, VideoSDKRTC.MapKeyType, VideoSDKRTC.MapValueType {
  public typealias BaseType = Swift.Int64
  public static var proto3DefaultValue: Swift.Int64 {
    get
  }
  public static func decodeSingular<D>(value: inout VideoSDKRTC.ProtobufSFixed64.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func decodeRepeated<D>(value: inout [VideoSDKRTC.ProtobufSFixed64.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func visitSingular<V>(value: VideoSDKRTC.ProtobufSFixed64.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitRepeated<V>(value: [VideoSDKRTC.ProtobufSFixed64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitPacked<V>(value: [VideoSDKRTC.ProtobufSFixed64.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
}
public struct ProtobufBool : VideoSDKRTC.FieldType, VideoSDKRTC.MapKeyType, VideoSDKRTC.MapValueType {
  public typealias BaseType = Swift.Bool
  public static var proto3DefaultValue: Swift.Bool {
    get
  }
  public static func decodeSingular<D>(value: inout VideoSDKRTC.ProtobufBool.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func decodeRepeated<D>(value: inout [VideoSDKRTC.ProtobufBool.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func visitSingular<V>(value: VideoSDKRTC.ProtobufBool.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitRepeated<V>(value: [VideoSDKRTC.ProtobufBool.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitPacked<V>(value: [VideoSDKRTC.ProtobufBool.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func _lessThan(lhs: VideoSDKRTC.ProtobufBool.BaseType, rhs: VideoSDKRTC.ProtobufBool.BaseType) -> Swift.Bool
}
public struct ProtobufString : VideoSDKRTC.FieldType, VideoSDKRTC.MapKeyType, VideoSDKRTC.MapValueType {
  public typealias BaseType = Swift.String
  public static var proto3DefaultValue: Swift.String {
    get
  }
  public static func decodeSingular<D>(value: inout VideoSDKRTC.ProtobufString.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func decodeRepeated<D>(value: inout [VideoSDKRTC.ProtobufString.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func visitSingular<V>(value: VideoSDKRTC.ProtobufString.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitRepeated<V>(value: [VideoSDKRTC.ProtobufString.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitPacked<V>(value: [VideoSDKRTC.ProtobufString.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
}
public struct ProtobufBytes : VideoSDKRTC.FieldType, VideoSDKRTC.MapValueType {
  public typealias BaseType = Foundation.Data
  public static var proto3DefaultValue: Foundation.Data {
    get
  }
  public static func decodeSingular<D>(value: inout VideoSDKRTC.ProtobufBytes.BaseType?, from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func decodeRepeated<D>(value: inout [VideoSDKRTC.ProtobufBytes.BaseType], from decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public static func visitSingular<V>(value: VideoSDKRTC.ProtobufBytes.BaseType, fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitRepeated<V>(value: [VideoSDKRTC.ProtobufBytes.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func visitPacked<V>(value: [VideoSDKRTC.ProtobufBytes.BaseType], fieldNumber: Swift.Int, with visitor: inout V) throws where V : VideoSDKRTC.Visitor
}
public struct Google_Protobuf_Duration {
  public var seconds: Swift.Int64
  public var nanos: Swift.Int32
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Google_Protobuf_Duration : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_Duration : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_Duration, rhs: VideoSDKRTC.Google_Protobuf_Duration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum TextFormatDecodingError : Swift.Error {
  case malformedText
  case malformedNumber
  case trailingGarbage
  case truncated
  case invalidUTF8
  case schemaMismatch
  case missingFieldNames
  case unknownField
  case unrecognizedEnumValue
  case conflictingOneOf
  case internalExtensionError
  case messageDepthLimit
  public static func == (a: VideoSDKRTC.TextFormatDecodingError, b: VideoSDKRTC.TextFormatDecodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class BoundRawHistogramMetric<T> {
  public init()
  open func record(explicitBoundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: T)
  @objc deinit
}
public struct Google_Protobuf_Any {
  public var typeURL: Swift.String {
    get
    set
  }
  public var value: Foundation.Data {
    get
    set
  }
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Google_Protobuf_Any : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_Any : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_Any, rhs: VideoSDKRTC.Google_Protobuf_Any) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct _NameMap : Swift.ExpressibleByDictionaryLiteral {
  public enum NameDescription {
    case same(proto: Swift.StaticString)
    case standard(proto: Swift.StaticString)
    case unique(proto: Swift.StaticString, json: Swift.StaticString)
    case aliased(proto: Swift.StaticString, aliases: [Swift.StaticString])
  }
  public init()
  public init(dictionaryLiteral elements: (Swift.Int, VideoSDKRTC._NameMap.NameDescription)...)
  public typealias Key = Swift.Int
  public typealias Value = VideoSDKRTC._NameMap.NameDescription
}
extension VideoSDKRTC.Message {
  public func serializedBytes<Bytes>(partial: Swift.Bool = false) throws -> Bytes where Bytes : VideoSDKRTC.SwiftProtobufContiguousBytes
  @inlinable public init<Bytes>(serializedBytes bytes: Bytes, extensions: (any VideoSDKRTC.ExtensionMap)? = nil, partial: Swift.Bool = false, options: VideoSDKRTC.BinaryDecodingOptions = BinaryDecodingOptions()) throws where Bytes : VideoSDKRTC.SwiftProtobufContiguousBytes {
    self.init()
    try merge(serializedBytes: bytes, extensions: extensions, partial: partial, options: options)
  }
  @inlinable public mutating func merge<Bytes>(serializedBytes bytes: Bytes, extensions: (any VideoSDKRTC.ExtensionMap)? = nil, partial: Swift.Bool = false, options: VideoSDKRTC.BinaryDecodingOptions = BinaryDecodingOptions()) throws where Bytes : VideoSDKRTC.SwiftProtobufContiguousBytes {
    try bytes.withUnsafeBytes { (body: UnsafeRawBufferPointer) in
      try _merge(rawBuffer: body, extensions: extensions, partial: partial, options: options)
    }
  }
  @usableFromInline
  internal mutating func _merge(rawBuffer body: Swift.UnsafeRawBufferPointer, extensions: (any VideoSDKRTC.ExtensionMap)?, partial: Swift.Bool, options: VideoSDKRTC.BinaryDecodingOptions) throws
}
@_hasMissingDesignatedInitializers public class CallbackRegistration {
  public func execute(reader: VideoSDKRTC.RegisteredReader, startEpochNanos: Swift.UInt64, epochNanos: Swift.UInt64)
  @objc deinit
}
public enum CameraPosition : Swift.Int {
  case back
  case front
  public mutating func toggle()
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol Clock : AnyObject {
  var now: Foundation.Date { get }
}
extension VideoSDKRTC.Clock {
  public var nanoTime: Swift.UInt64 {
    get
  }
}
public func == (lhs: any VideoSDKRTC.Clock, rhs: any VideoSDKRTC.Clock) -> Swift.Bool
extension VideoSDKRTC.Message {
  public init(unpackingAny: VideoSDKRTC.Google_Protobuf_Any, extensions: (any VideoSDKRTC.ExtensionMap)? = nil, options: VideoSDKRTC.BinaryDecodingOptions = BinaryDecodingOptions()) throws
}
public protocol CollectionRegistration {
}
public struct Opentelemetry_Proto_Common_V1_AnyValue {
  public var value: VideoSDKRTC.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value?
  public var stringValue: Swift.String {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
  public var intValue: Swift.Int64 {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var arrayValue: VideoSDKRTC.Opentelemetry_Proto_Common_V1_ArrayValue {
    get
    set
  }
  public var kvlistValue: VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValueList {
    get
    set
  }
  public var bytesValue: Foundation.Data {
    get
    set
  }
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public enum OneOf_Value : Swift.Equatable {
    case stringValue(Swift.String)
    case boolValue(Swift.Bool)
    case intValue(Swift.Int64)
    case doubleValue(Swift.Double)
    case arrayValue(VideoSDKRTC.Opentelemetry_Proto_Common_V1_ArrayValue)
    case kvlistValue(VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValueList)
    case bytesValue(Foundation.Data)
    public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value, rhs: VideoSDKRTC.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value) -> Swift.Bool
  }
  public init()
}
public struct Opentelemetry_Proto_Common_V1_ArrayValue {
  public var values: [VideoSDKRTC.Opentelemetry_Proto_Common_V1_AnyValue]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Common_V1_KeyValueList {
  public var values: [VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Common_V1_KeyValue {
  public var key: Swift.String
  public var value: VideoSDKRTC.Opentelemetry_Proto_Common_V1_AnyValue {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Common_V1_InstrumentationScope {
  public var name: Swift.String
  public var version: Swift.String
  public var attributes: [VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue]
  public var droppedAttributesCount: Swift.UInt32
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Opentelemetry_Proto_Common_V1_AnyValue : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Common_V1_AnyValue.OneOf_Value : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Common_V1_ArrayValue : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValueList : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Common_V1_InstrumentationScope : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Common_V1_AnyValue : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Common_V1_AnyValue, rhs: VideoSDKRTC.Opentelemetry_Proto_Common_V1_AnyValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Common_V1_ArrayValue : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Common_V1_ArrayValue, rhs: VideoSDKRTC.Opentelemetry_Proto_Common_V1_ArrayValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValueList : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValueList, rhs: VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValueList) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue, rhs: VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Common_V1_InstrumentationScope : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Common_V1_InstrumentationScope, rhs: VideoSDKRTC.Opentelemetry_Proto_Common_V1_InstrumentationScope) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct CommonAdapter {
  public static func toProtoAttribute(key: Swift.String, attributeValue: VideoSDKRTC.AttributeValue) -> VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue
  public static func toProtoInstrumentationScope(instrumentationScopeInfo: VideoSDKRTC.InstrumentationScopeInfo) -> VideoSDKRTC.Opentelemetry_Proto_Common_V1_InstrumentationScope
}
public protocol ContextManager : AnyObject {
  func getCurrentContextValue(forKey: VideoSDKRTC.OpenTelemetryContextKeys) -> Swift.AnyObject?
  func setCurrentContextValue(forKey: VideoSDKRTC.OpenTelemetryContextKeys, value: Swift.AnyObject)
  func removeContextValue(forKey: VideoSDKRTC.OpenTelemetryContextKeys, value: Swift.AnyObject)
}
public protocol ContextPropagators {
  var textMapPropagator: any VideoSDKRTC.TextMapPropagator { get }
  var textMapBaggagePropagator: any VideoSDKRTC.TextMapBaggagePropagator { get }
}
public protocol CounterMetric {
  associatedtype T
  func add(value: Self.T, labelset: VideoSDKRTC.LabelSet)
  func add(value: Self.T, labels: [Swift.String : Swift.String])
  func bind(labelset: VideoSDKRTC.LabelSet) -> VideoSDKRTC.BoundCounterMetric<Self.T>
  func bind(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.BoundCounterMetric<Self.T>
}
public struct AnyCounterMetric<T> : VideoSDKRTC.CounterMetric {
  public init<U>(_ countable: U) where T == U.T, U : VideoSDKRTC.CounterMetric
  public func add(value: T, labelset: VideoSDKRTC.LabelSet)
  public func add(value: T, labels: [Swift.String : Swift.String])
  public func bind(labelset: VideoSDKRTC.LabelSet) -> VideoSDKRTC.BoundCounterMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.BoundCounterMetric<T>
}
public struct NoopCounterMetric<T> : VideoSDKRTC.CounterMetric {
  public init()
  public func add(value: T, labelset: VideoSDKRTC.LabelSet)
  public func add(value: T, labels: [Swift.String : Swift.String])
  public func bind(labelset: VideoSDKRTC.LabelSet) -> VideoSDKRTC.BoundCounterMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.BoundCounterMetric<T>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CounterSumAggregator<T> : VideoSDKRTC.Aggregator<T> where T : Swift.SignedNumeric {
  override public func update(value: T)
  override public func checkpoint()
  override public func toMetricData() -> any VideoSDKRTC.MetricData
  override public func getAggregationType() -> VideoSDKRTC.AggregationType
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CustomRTCMediaStream {
  @objc deinit
}
public enum CustomVideoTrackConfig {
  case h90p_w160p, h180p_w320p, h216p_w384p, h360p_w640p, h540p_w960p, h720p_w1280p, h1080p_w1920p, h1440p_w2560p, h2160p_w3840p, h120p_w160p, h180p_w240p, h240p_w320p, h360p_w480p, h480p_w640p, h540p_w720p, h720p_w960p, h1080p_w1440p, h1440p_w1920p
  public static func == (a: VideoSDKRTC.CustomVideoTrackConfig, b: VideoSDKRTC.CustomVideoTrackConfig) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DefaultAggregation : VideoSDKRTC.Aggregation {
  public static var instance: VideoSDKRTC.DefaultAggregation {
    get
  }
  public func createAggregator(descriptor: VideoSDKRTC.InstrumentDescriptor, exemplarFilter: any VideoSDKRTC.ExemplarFilter) -> any VideoSDKRTC.StableAggregator
  public func isCompatible(with descriptor: VideoSDKRTC.InstrumentDescriptor) -> Swift.Bool
  @objc deinit
}
final public class DefaultBaggage : VideoSDKRTC.Baggage, Swift.Equatable {
  public init(entries: [VideoSDKRTC.EntryKey : VideoSDKRTC.Entry?])
  public static func baggageBuilder() -> any VideoSDKRTC.BaggageBuilder
  final public func getEntries() -> [VideoSDKRTC.Entry]
  final public func getEntryValue(key: VideoSDKRTC.EntryKey) -> VideoSDKRTC.EntryValue?
  public static func == (lhs: VideoSDKRTC.DefaultBaggage, rhs: VideoSDKRTC.DefaultBaggage) -> Swift.Bool
  @objc deinit
}
public class DefaultBaggageBuilder : VideoSDKRTC.BaggageBuilder {
  public init()
  @discardableResult
  public func setParent(_ parent: (any VideoSDKRTC.Baggage)?) -> Self
  @discardableResult
  public func setNoParent() -> Self
  @discardableResult
  public func put(key: VideoSDKRTC.EntryKey, value: VideoSDKRTC.EntryValue, metadata: VideoSDKRTC.EntryMetadata?) -> Self
  @discardableResult
  public func put(key: Swift.String, value: Swift.String, metadata: Swift.String? = nil) -> Self
  @discardableResult
  public func remove(key: VideoSDKRTC.EntryKey) -> Self
  public func build() -> any VideoSDKRTC.Baggage
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultBaggageManager : VideoSDKRTC.BaggageManager {
  public static var instance: VideoSDKRTC.DefaultBaggageManager
  public func baggageBuilder() -> any VideoSDKRTC.BaggageBuilder
  public func getCurrentBaggage() -> (any VideoSDKRTC.Baggage)?
  @objc deinit
}
public struct DefaultContextPropagators : VideoSDKRTC.ContextPropagators {
  public var textMapPropagator: any VideoSDKRTC.TextMapPropagator
  public var textMapBaggagePropagator: any VideoSDKRTC.TextMapBaggagePropagator
  public init()
  public init(textPropagators: [any VideoSDKRTC.TextMapPropagator], baggagePropagator: any VideoSDKRTC.TextMapBaggagePropagator)
  public mutating func addTextMapPropagator(textFormat: any VideoSDKRTC.TextMapPropagator)
}
@_hasMissingDesignatedInitializers public class DefaultLogger : VideoSDKRTC.Logger {
  public func eventBuilder(name: Swift.String) -> any VideoSDKRTC.EventBuilder
  public func logRecordBuilder() -> any VideoSDKRTC.LogRecordBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultLoggerProvider : VideoSDKRTC.LoggerProvider {
  public static let instance: any VideoSDKRTC.LoggerProvider
  public func get(instrumentationScopeName: Swift.String) -> any VideoSDKRTC.Logger
  public func loggerBuilder(instrumentationScopeName: Swift.String) -> any VideoSDKRTC.LoggerBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultMeterProvider : VideoSDKRTC.MeterProvider {
  public static var instance: any VideoSDKRTC.MeterProvider
  public static func setDefault(meterFactory: any VideoSDKRTC.MeterProvider)
  public func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String? = nil) -> any VideoSDKRTC.Meter
  @objc deinit
}
public enum BinaryDecodingError : Swift.Error {
  case trailingGarbage
  case truncated
  case invalidUTF8
  case malformedProtobuf
  case missingRequiredFields
  case internalExtensionError
  case messageDepthLimit
  case tooLarge
  public static func == (a: VideoSDKRTC.BinaryDecodingError, b: VideoSDKRTC.BinaryDecodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DefaultStableMeter : VideoSDKRTC.StableMeter {
  public func counterBuilder(name: Swift.String) -> any VideoSDKRTC.LongCounterBuilder
  public func upDownCounterBuilder(name: Swift.String) -> any VideoSDKRTC.LongUpDownCounterBuilder
  public func histogramBuilder(name: Swift.String) -> any VideoSDKRTC.DoubleHistogramBuilder
  public func gaugeBuilder(name: Swift.String) -> any VideoSDKRTC.DoubleGaugeBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultStableMeterProvider : VideoSDKRTC.StableMeterProvider {
  public static func noop() -> any VideoSDKRTC.MeterBuilder
  public func get(name: Swift.String) -> any VideoSDKRTC.StableMeter
  public func meterBuilder(name: Swift.String) -> any VideoSDKRTC.MeterBuilder
  public static var instance: any VideoSDKRTC.StableMeterProvider
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultTracer : VideoSDKRTC.Tracer {
  public static var instance: VideoSDKRTC.DefaultTracer
  public func spanBuilder(spanName: Swift.String) -> any VideoSDKRTC.SpanBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DefaultTracerProvider : VideoSDKRTC.TracerProvider {
  public static let instance: VideoSDKRTC.DefaultTracerProvider
  public func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String? = nil) -> any VideoSDKRTC.Tracer
  @objc deinit
}
public protocol AnyMessageExtension : Swift.Sendable {
  var fieldNumber: Swift.Int { get }
  var fieldName: Swift.String { get }
  var messageType: any VideoSDKRTC.Message.Type { get }
  func _protobuf_newField<D>(decoder: inout D) throws -> (any VideoSDKRTC.AnyExtensionField)? where D : VideoSDKRTC.SPBDecoder
}
final public class MessageExtension<FieldType, MessageType> : VideoSDKRTC.AnyMessageExtension where FieldType : VideoSDKRTC.ExtensionField, MessageType : VideoSDKRTC.Message {
  final public let fieldNumber: Swift.Int
  final public let fieldName: Swift.String
  final public let messageType: any VideoSDKRTC.Message.Type
  public init(_protobuf_fieldNumber: Swift.Int, fieldName: Swift.String)
  final public func _protobuf_newField<D>(decoder: inout D) throws -> (any VideoSDKRTC.AnyExtensionField)? where D : VideoSDKRTC.SPBDecoder
  @objc deinit
}
public protocol DoubleCounter {
  mutating func add(value: Swift.Double)
  mutating func add(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
}
public protocol DoubleCounterBuilder : AnyObject {
  func build() -> any VideoSDKRTC.DoubleCounter
  func buildWithCallback(_ callback: @escaping (any VideoSDKRTC.ObservableDoubleMeasurement) -> Swift.Void) -> any VideoSDKRTC.ObservableDoubleCounter
}
@_hasMissingDesignatedInitializers public class DoubleCounterMeterBuilderSdk : VideoSDKRTC.DoubleCounterBuilder {
  public func build() -> any VideoSDKRTC.DoubleCounter
  public func buildWithCallback(_ callback: @escaping (any VideoSDKRTC.ObservableDoubleMeasurement) -> Swift.Void) -> any VideoSDKRTC.ObservableDoubleCounter
  @objc deinit
}
public enum HistogramAggregatorError : Swift.Error {
  case unsupportedOperation(Swift.String)
}
public class DoubleExplicitBucketHistogramAggregator : VideoSDKRTC.StableAggregator {
  public init(boundaries: [Swift.Double], reservoirSupplier: @escaping () -> VideoSDKRTC.ExemplarReservoir)
  public func diff(previousCumulative: VideoSDKRTC.PointData, currentCumulative: VideoSDKRTC.PointData) throws -> VideoSDKRTC.PointData
  public func toPoint(measurement: VideoSDKRTC.Measurement) throws -> VideoSDKRTC.PointData
  public func createHandle() -> VideoSDKRTC.AggregatorHandle
  public func toMetricData(resource: VideoSDKRTC.Resource, scope: VideoSDKRTC.InstrumentationScopeInfo, descriptor: VideoSDKRTC.MetricDescriptor, points: [VideoSDKRTC.PointData], temporality: VideoSDKRTC.AggregationTemporality) -> VideoSDKRTC.StableMetricData
  @objc deinit
}
public protocol DoubleGaugeBuilder : AnyObject {
  func ofLongs() -> any VideoSDKRTC.LongGaugeBuilder
  func buildWithCallback(_ callback: @escaping (any VideoSDKRTC.ObservableDoubleMeasurement) -> Swift.Void) -> any VideoSDKRTC.ObservableDoubleGauge
}
@_hasMissingDesignatedInitializers public class DoubleGaugeBuilderSdk : VideoSDKRTC.DoubleGaugeBuilder {
  public func ofLongs() -> any VideoSDKRTC.LongGaugeBuilder
  public func buildWithCallback(_ callback: @escaping (any VideoSDKRTC.ObservableDoubleMeasurement) -> Swift.Void) -> any VideoSDKRTC.ObservableDoubleGauge
  @objc deinit
}
public protocol DoubleHistogram {
  mutating func record(value: Swift.Double)
  mutating func record(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
}
public protocol DoubleHistogramBuilder : AnyObject {
  func ofLongs() -> any VideoSDKRTC.LongHistogramBuilder
  func build() -> any VideoSDKRTC.DoubleHistogram
}
public protocol SPBDecoder {
  mutating func handleConflictingOneOf() throws
  mutating func nextFieldNumber() throws -> Swift.Int?
  mutating func decodeSingularFloatField(value: inout Swift.Float) throws
  mutating func decodeSingularFloatField(value: inout Swift.Float?) throws
  mutating func decodeRepeatedFloatField(value: inout [Swift.Float]) throws
  mutating func decodeSingularDoubleField(value: inout Swift.Double) throws
  mutating func decodeSingularDoubleField(value: inout Swift.Double?) throws
  mutating func decodeRepeatedDoubleField(value: inout [Swift.Double]) throws
  mutating func decodeSingularInt32Field(value: inout Swift.Int32) throws
  mutating func decodeSingularInt32Field(value: inout Swift.Int32?) throws
  mutating func decodeRepeatedInt32Field(value: inout [Swift.Int32]) throws
  mutating func decodeSingularInt64Field(value: inout Swift.Int64) throws
  mutating func decodeSingularInt64Field(value: inout Swift.Int64?) throws
  mutating func decodeRepeatedInt64Field(value: inout [Swift.Int64]) throws
  mutating func decodeSingularUInt32Field(value: inout Swift.UInt32) throws
  mutating func decodeSingularUInt32Field(value: inout Swift.UInt32?) throws
  mutating func decodeRepeatedUInt32Field(value: inout [Swift.UInt32]) throws
  mutating func decodeSingularUInt64Field(value: inout Swift.UInt64) throws
  mutating func decodeSingularUInt64Field(value: inout Swift.UInt64?) throws
  mutating func decodeRepeatedUInt64Field(value: inout [Swift.UInt64]) throws
  mutating func decodeSingularSInt32Field(value: inout Swift.Int32) throws
  mutating func decodeSingularSInt32Field(value: inout Swift.Int32?) throws
  mutating func decodeRepeatedSInt32Field(value: inout [Swift.Int32]) throws
  mutating func decodeSingularSInt64Field(value: inout Swift.Int64) throws
  mutating func decodeSingularSInt64Field(value: inout Swift.Int64?) throws
  mutating func decodeRepeatedSInt64Field(value: inout [Swift.Int64]) throws
  mutating func decodeSingularFixed32Field(value: inout Swift.UInt32) throws
  mutating func decodeSingularFixed32Field(value: inout Swift.UInt32?) throws
  mutating func decodeRepeatedFixed32Field(value: inout [Swift.UInt32]) throws
  mutating func decodeSingularFixed64Field(value: inout Swift.UInt64) throws
  mutating func decodeSingularFixed64Field(value: inout Swift.UInt64?) throws
  mutating func decodeRepeatedFixed64Field(value: inout [Swift.UInt64]) throws
  mutating func decodeSingularSFixed32Field(value: inout Swift.Int32) throws
  mutating func decodeSingularSFixed32Field(value: inout Swift.Int32?) throws
  mutating func decodeRepeatedSFixed32Field(value: inout [Swift.Int32]) throws
  mutating func decodeSingularSFixed64Field(value: inout Swift.Int64) throws
  mutating func decodeSingularSFixed64Field(value: inout Swift.Int64?) throws
  mutating func decodeRepeatedSFixed64Field(value: inout [Swift.Int64]) throws
  mutating func decodeSingularBoolField(value: inout Swift.Bool) throws
  mutating func decodeSingularBoolField(value: inout Swift.Bool?) throws
  mutating func decodeRepeatedBoolField(value: inout [Swift.Bool]) throws
  mutating func decodeSingularStringField(value: inout Swift.String) throws
  mutating func decodeSingularStringField(value: inout Swift.String?) throws
  mutating func decodeRepeatedStringField(value: inout [Swift.String]) throws
  mutating func decodeSingularBytesField(value: inout Foundation.Data) throws
  mutating func decodeSingularBytesField(value: inout Foundation.Data?) throws
  mutating func decodeRepeatedBytesField(value: inout [Foundation.Data]) throws
  mutating func decodeSingularEnumField<E>(value: inout E) throws where E : VideoSDKRTC.Enum, E.RawValue == Swift.Int
  mutating func decodeSingularEnumField<E>(value: inout E?) throws where E : VideoSDKRTC.Enum, E.RawValue == Swift.Int
  mutating func decodeRepeatedEnumField<E>(value: inout [E]) throws where E : VideoSDKRTC.Enum, E.RawValue == Swift.Int
  mutating func decodeSingularMessageField<M>(value: inout M?) throws where M : VideoSDKRTC.Message
  mutating func decodeRepeatedMessageField<M>(value: inout [M]) throws where M : VideoSDKRTC.Message
  mutating func decodeSingularGroupField<G>(value: inout G?) throws where G : VideoSDKRTC.Message
  mutating func decodeRepeatedGroupField<G>(value: inout [G]) throws where G : VideoSDKRTC.Message
  mutating func decodeMapField<KeyType, ValueType>(fieldType: VideoSDKRTC._ProtobufMap<KeyType, ValueType>.Type, value: inout VideoSDKRTC._ProtobufMap<KeyType, ValueType>.BaseType) throws where KeyType : VideoSDKRTC.MapKeyType, ValueType : VideoSDKRTC.MapValueType
  mutating func decodeMapField<KeyType, ValueType>(fieldType: VideoSDKRTC._ProtobufEnumMap<KeyType, ValueType>.Type, value: inout VideoSDKRTC._ProtobufEnumMap<KeyType, ValueType>.BaseType) throws where KeyType : VideoSDKRTC.MapKeyType, ValueType : VideoSDKRTC.Enum, ValueType.RawValue == Swift.Int
  mutating func decodeMapField<KeyType, ValueType>(fieldType: VideoSDKRTC._ProtobufMessageMap<KeyType, ValueType>.Type, value: inout VideoSDKRTC._ProtobufMessageMap<KeyType, ValueType>.BaseType) throws where KeyType : VideoSDKRTC.MapKeyType, ValueType : Swift.Hashable, ValueType : VideoSDKRTC.Message
  mutating func decodeExtensionField(values: inout VideoSDKRTC.ExtensionFieldValueSet, messageType: any VideoSDKRTC.Message.Type, fieldNumber: Swift.Int) throws
  mutating func decodeExtensionFieldsAsMessageSet(values: inout VideoSDKRTC.ExtensionFieldValueSet, messageType: any VideoSDKRTC.Message.Type) throws
}
extension VideoSDKRTC.SPBDecoder {
  public mutating func decodeExtensionFieldsAsMessageSet(values: inout VideoSDKRTC.ExtensionFieldValueSet, messageType: any VideoSDKRTC.Message.Type) throws
}
@_hasMissingDesignatedInitializers public class DoubleHistogramMeterBuilderSdk : VideoSDKRTC.DoubleHistogramBuilder {
  public func ofLongs() -> any VideoSDKRTC.LongHistogramBuilder
  public func build() -> any VideoSDKRTC.DoubleHistogram
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleHistogramMeterSdk : VideoSDKRTC.DoubleHistogram, VideoSDKRTC.Instrument {
  public var instrumentDescriptor: VideoSDKRTC.InstrumentDescriptor
  public var storage: any VideoSDKRTC.WritableMetricStorage
  public func record(value: Swift.Double)
  public func record(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleLastValueAggregator : VideoSDKRTC.StableAggregator {
  public func diff(previousCumulative: VideoSDKRTC.PointData, currentCumulative: VideoSDKRTC.PointData) throws -> VideoSDKRTC.PointData
  public func toPoint(measurement: VideoSDKRTC.Measurement) throws -> VideoSDKRTC.PointData
  public func createHandle() -> VideoSDKRTC.AggregatorHandle
  public func toMetricData(resource: VideoSDKRTC.Resource, scope: VideoSDKRTC.InstrumentationScopeInfo, descriptor: VideoSDKRTC.MetricDescriptor, points: [VideoSDKRTC.PointData], temporality: VideoSDKRTC.AggregationTemporality) -> VideoSDKRTC.StableMetricData
  @objc deinit
}
public protocol DoubleObserverMetric {
  func observe(value: Swift.Double, labelset: VideoSDKRTC.LabelSet)
  func observe(value: Swift.Double, labels: [Swift.String : Swift.String])
}
public struct NoopDoubleObserverMetric : VideoSDKRTC.DoubleObserverMetric {
  public init()
  public func observe(value: Swift.Double, labelset: VideoSDKRTC.LabelSet)
  public func observe(value: Swift.Double, labels: [Swift.String : Swift.String])
}
@_hasMissingDesignatedInitializers public class DoublePointData : VideoSDKRTC.PointData {
  public var value: Swift.Double
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleSumAggregator : VideoSDKRTC.SumAggregator, VideoSDKRTC.StableAggregator {
  public func diff(previousCumulative: VideoSDKRTC.PointData, currentCumulative: VideoSDKRTC.PointData) throws -> VideoSDKRTC.PointData
  public func toPoint(measurement: VideoSDKRTC.Measurement) throws -> VideoSDKRTC.PointData
  public func createHandle() -> VideoSDKRTC.AggregatorHandle
  public func toMetricData(resource: VideoSDKRTC.Resource, scope: VideoSDKRTC.InstrumentationScopeInfo, descriptor: VideoSDKRTC.MetricDescriptor, points: [VideoSDKRTC.PointData], temporality: VideoSDKRTC.AggregationTemporality) -> VideoSDKRTC.StableMetricData
  @objc deinit
}
public protocol DoubleUpDownCounter {
  mutating func add(value: Swift.Double)
  mutating func add(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
}
public protocol DoubleUpDownCounterBuilder : AnyObject {
  func build() -> any VideoSDKRTC.DoubleUpDownCounter
  func buildWithCallback(_ callback: @escaping (any VideoSDKRTC.ObservableDoubleMeasurement) -> Swift.Void) -> any VideoSDKRTC.ObservableDoubleUpDownCounter
}
@_hasMissingDesignatedInitializers public class DoubleUpDownCounterBuilderSdk : VideoSDKRTC.DoubleUpDownCounterBuilder {
  public func build() -> any VideoSDKRTC.DoubleUpDownCounter
  public func buildWithCallback(_ callback: @escaping (any VideoSDKRTC.ObservableDoubleMeasurement) -> Swift.Void) -> any VideoSDKRTC.ObservableDoubleUpDownCounter
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleUpDownCounterSdk : VideoSDKRTC.DoubleUpDownCounter, VideoSDKRTC.Instrument {
  public var instrumentDescriptor: VideoSDKRTC.InstrumentDescriptor {
    get
  }
  public func add(value: Swift.Double)
  public func add(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DropAggregation : VideoSDKRTC.Aggregation {
  public static var instance: VideoSDKRTC.DropAggregation {
    get
  }
  public func createAggregator(descriptor: VideoSDKRTC.InstrumentDescriptor, exemplarFilter: any VideoSDKRTC.ExemplarFilter) -> any VideoSDKRTC.StableAggregator
  public func isCompatible(with descriptor: VideoSDKRTC.InstrumentDescriptor) -> Swift.Bool
  @objc deinit
}
extension VideoSDKRTC.Message {
  public func textFormatString() -> Swift.String
  public func textFormatString(options: VideoSDKRTC.TextFormatEncodingOptions) -> Swift.String
  public init(textFormatString: Swift.String, options: VideoSDKRTC.TextFormatDecodingOptions = TextFormatDecodingOptions(), extensions: (any VideoSDKRTC.ExtensionMap)? = nil) throws
}
@_hasMissingDesignatedInitializers public class DropAggregator : VideoSDKRTC.StableAggregator {
  public static var POINT_DATA: VideoSDKRTC.PointData {
    get
  }
  public func createHandle() -> VideoSDKRTC.AggregatorHandle
  public func diff(previousCumulative: VideoSDKRTC.PointData, currentCumulative: VideoSDKRTC.PointData) -> VideoSDKRTC.PointData
  public func toPoint(measurement: VideoSDKRTC.Measurement) -> VideoSDKRTC.PointData
  public func toMetricData(resource: VideoSDKRTC.Resource, scope: VideoSDKRTC.InstrumentationScopeInfo, descriptor: VideoSDKRTC.MetricDescriptor, points: [VideoSDKRTC.PointData], temporality: VideoSDKRTC.AggregationTemporality) -> VideoSDKRTC.StableMetricData
  @objc deinit
}
@_hasMissingDesignatedInitializers public class EmptyMetricStorage {
  public func recordLong(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  public func recordDouble(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  public static var instance: VideoSDKRTC.EmptyMetricStorage
  public var metricDescriptor: VideoSDKRTC.MetricDescriptor
  public func collect(resource: VideoSDKRTC.Resource, scope: VideoSDKRTC.InstrumentationScopeInfo, startEpochNanos: Swift.UInt64, epochNanos: Swift.UInt64) -> VideoSDKRTC.StableMetricData
  public func isEmpty() -> Swift.Bool
  @objc deinit
}
public struct Entry : Swift.Equatable, Swift.Comparable {
  public var key: VideoSDKRTC.EntryKey {
    get
  }
  public var value: VideoSDKRTC.EntryValue {
    get
  }
  public var metadata: VideoSDKRTC.EntryMetadata? {
    get
  }
  public init(key: VideoSDKRTC.EntryKey, value: VideoSDKRTC.EntryValue, metadata: VideoSDKRTC.EntryMetadata?)
  public static func < (lhs: VideoSDKRTC.Entry, rhs: VideoSDKRTC.Entry) -> Swift.Bool
  public static func == (a: VideoSDKRTC.Entry, b: VideoSDKRTC.Entry) -> Swift.Bool
}
public struct EntryKey : Swift.Equatable, Swift.Comparable, Swift.Hashable {
  public var name: Swift.String {
    get
  }
  public init?(name: Swift.String)
  public static func < (lhs: VideoSDKRTC.EntryKey, rhs: VideoSDKRTC.EntryKey) -> Swift.Bool
  public static func == (a: VideoSDKRTC.EntryKey, b: VideoSDKRTC.EntryKey) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct EntryMetadata : Swift.Equatable {
  public var metadata: Swift.String
  public init?(metadata: Swift.String?)
  public static func == (a: VideoSDKRTC.EntryMetadata, b: VideoSDKRTC.EntryMetadata) -> Swift.Bool
}
public struct ExtensionFieldValueSet : Swift.Hashable {
  public static func == (lhs: VideoSDKRTC.ExtensionFieldValueSet, rhs: VideoSDKRTC.ExtensionFieldValueSet) -> Swift.Bool
  public init()
  public func hash(into hasher: inout Swift.Hasher)
  public func traverse<V>(visitor: inout V, start: Swift.Int, end: Swift.Int) throws where V : VideoSDKRTC.Visitor
  public subscript(index: Swift.Int) -> (any VideoSDKRTC.AnyExtensionField)? {
    get
    set
  }
  public var isInitialized: Swift.Bool {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct EntryValue : Swift.Equatable {
  public var string: Swift.String {
    get
  }
  public init?(string: Swift.String)
  public static func == (a: VideoSDKRTC.EntryValue, b: VideoSDKRTC.EntryValue) -> Swift.Bool
}
public struct EnvironmentContextPropagator : VideoSDKRTC.TextMapPropagator {
  public let fields: Swift.Set<Swift.String>
  public init()
  public func inject<S>(spanContext: VideoSDKRTC.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : VideoSDKRTC.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> VideoSDKRTC.SpanContext? where G : VideoSDKRTC.Getter
}
public protocol _ProtoNameProviding {
  static var _protobuf_nameMap: VideoSDKRTC._NameMap { get }
}
public struct EnvVarHeaders {
  public static let attributes: [(Swift.String, Swift.String)]?
  public static func attributes(for rawEnvAttributes: Swift.String? = ProcessInfo.processInfo.environment["OTEL_EXPORTER_OTLP_HEADERS"]) -> [(Swift.String, Swift.String)]?
}
public struct EnvVarResource {
  public static let resource: VideoSDKRTC.Resource
  public static func get(environment: [Swift.String : Swift.String] = ProcessInfo.processInfo.environment) -> VideoSDKRTC.Resource
}
public protocol EventBuilder : VideoSDKRTC.LogRecordBuilder {
  func setData(_ attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> Self
}
@_hasMissingDesignatedInitializers public class ExemplarData : Swift.Equatable {
  public var filteredAttributes: [Swift.String : VideoSDKRTC.AttributeValue]
  public var epochNanos: Swift.UInt64
  public var spanContext: VideoSDKRTC.SpanContext?
  public static func == (lhs: VideoSDKRTC.ExemplarData, rhs: VideoSDKRTC.ExemplarData) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DoubleExemplarData : VideoSDKRTC.ExemplarData {
  final public var value: Swift.Double
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class LongExemplarData : VideoSDKRTC.ExemplarData {
  final public var value: Swift.Int
  @objc deinit
}
public protocol ExemplarFilter {
  func shouldSampleMeasurement(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> Swift.Bool
  func shouldSampleMeasurement(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> Swift.Bool
}
public struct AlwaysOnFilter : VideoSDKRTC.ExemplarFilter {
  public func shouldSampleMeasurement(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> Swift.Bool
  public func shouldSampleMeasurement(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> Swift.Bool
}
public struct AlwaysOffFilter : VideoSDKRTC.ExemplarFilter {
  public init()
  public func shouldSampleMeasurement(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> Swift.Bool
  public func shouldSampleMeasurement(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> Swift.Bool
}
extension VideoSDKRTC.Google_Protobuf_Timestamp {
  public init(seconds: Swift.Int64 = 0, nanos: Swift.Int32 = 0)
}
extension VideoSDKRTC.Google_Protobuf_Timestamp {
  public init(timeIntervalSince1970: Foundation.TimeInterval)
  public init(timeIntervalSinceReferenceDate: Foundation.TimeInterval)
  public init(date: Foundation.Date)
  public var timeIntervalSince1970: Foundation.TimeInterval {
    get
  }
  public var timeIntervalSinceReferenceDate: Foundation.TimeInterval {
    get
  }
  public var date: Foundation.Date {
    get
  }
}
public func + (lhs: VideoSDKRTC.Google_Protobuf_Timestamp, rhs: VideoSDKRTC.Google_Protobuf_Duration) -> VideoSDKRTC.Google_Protobuf_Timestamp
public func + (lhs: VideoSDKRTC.Google_Protobuf_Duration, rhs: VideoSDKRTC.Google_Protobuf_Timestamp) -> VideoSDKRTC.Google_Protobuf_Timestamp
public func - (lhs: VideoSDKRTC.Google_Protobuf_Timestamp, rhs: VideoSDKRTC.Google_Protobuf_Duration) -> VideoSDKRTC.Google_Protobuf_Timestamp
@_hasMissingDesignatedInitializers public class ExemplarReservoir {
  public func collectAndReset(attribute: [Swift.String : VideoSDKRTC.AttributeValue]) -> [VideoSDKRTC.ExemplarData]
  public func offerDoubleMeasurement(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  public func offerLongMeasurement(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NoopExemplarReservoir : VideoSDKRTC.ExemplarReservoir {
  override public func offerDoubleMeasurement(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  override public func offerLongMeasurement(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  override public func collectAndReset(attribute: [Swift.String : VideoSDKRTC.AttributeValue]) -> [VideoSDKRTC.ExemplarData]
  @objc deinit
}
public enum ExemplarReservoirCollection {
}
@_hasMissingDesignatedInitializers public class FixedSizedExemplarReservoir : VideoSDKRTC.ExemplarReservoir {
  override public func offerLongMeasurement(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  override public func offerDoubleMeasurement(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  override public func collectAndReset(attribute: [Swift.String : VideoSDKRTC.AttributeValue]) -> [VideoSDKRTC.ExemplarData]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RandomFixedSizedExemplarReservoir : VideoSDKRTC.FixedSizedExemplarReservoir {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ExplicitBucketHistogramAggregation : VideoSDKRTC.Aggregation {
  public static var DEFAULT_BOUNDARIES: [Swift.Double] {
    get
  }
  public static var instance: VideoSDKRTC.ExplicitBucketHistogramAggregation {
    get
  }
  public func createAggregator(descriptor: VideoSDKRTC.InstrumentDescriptor, exemplarFilter: any VideoSDKRTC.ExemplarFilter) -> any VideoSDKRTC.StableAggregator
  public func isCompatible(with descriptor: VideoSDKRTC.InstrumentDescriptor) -> Swift.Bool
  @objc deinit
}
public protocol ExponentialHistogramBuckets {
  var scale: Swift.Int { get }
  var offset: Swift.Int { get }
  var bucketCounts: [Swift.Int] { get }
  var totalCount: Swift.Int { get }
}
public enum ExportResult {
  case success
  case failure
  public static func == (a: VideoSDKRTC.ExportResult, b: VideoSDKRTC.ExportResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class FilteredExemplarReservoir : VideoSDKRTC.ExemplarReservoir {
  override public func offerDoubleMeasurement(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  override public func offerLongMeasurement(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  override public func collectAndReset(attribute: [Swift.String : VideoSDKRTC.AttributeValue]) -> [VideoSDKRTC.ExemplarData]
  @objc deinit
}
public struct Headers {
  public static func getUserAgentHeader() -> Swift.String
}
public let defaultAnyTypeURLPrefix: Swift.String
extension VideoSDKRTC.Google_Protobuf_Any {
  public init(message: any VideoSDKRTC.Message, partial: Swift.Bool = false, typePrefix: Swift.String = defaultAnyTypeURLPrefix) throws
  public init(textFormatString: Swift.String, options: VideoSDKRTC.TextFormatDecodingOptions = TextFormatDecodingOptions(), extensions: (any VideoSDKRTC.ExtensionMap)? = nil) throws
  public func isA<M>(_ type: M.Type) -> Swift.Bool where M : VideoSDKRTC.Message
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class HistogramAggregator<T> : VideoSDKRTC.Aggregator<T> where T : Swift.Comparable, T : Swift.SignedNumeric {
  public init(explicitBoundaries: Swift.Array<T>? = nil) throws
  override public func update(value: T)
  override public func checkpoint()
  override public func toMetricData() -> any VideoSDKRTC.MetricData
  override public func getAggregationType() -> VideoSDKRTC.AggregationType
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HistogramExemplarReservoir : VideoSDKRTC.FixedSizedExemplarReservoir {
  override public func offerLongMeasurement(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  @objc deinit
}
public protocol HistogramMetric {
  associatedtype T
  func bind(labelset: VideoSDKRTC.LabelSet) -> VideoSDKRTC.BoundHistogramMetric<Self.T>
  func bind(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.BoundHistogramMetric<Self.T>
}
extension VideoSDKRTC.HistogramMetric {
  public func record(value: Self.T, labelset: VideoSDKRTC.LabelSet)
  public func record(value: Self.T, labels: [Swift.String : Swift.String])
}
public struct AnyHistogramMetric<T> : VideoSDKRTC.HistogramMetric {
  public init<U>(_ histogram: U) where T == U.T, U : VideoSDKRTC.HistogramMetric
  public func bind(labelset: VideoSDKRTC.LabelSet) -> VideoSDKRTC.BoundHistogramMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.BoundHistogramMetric<T>
}
public struct NoopHistogramMetric<T> : VideoSDKRTC.HistogramMetric {
  public init()
  public func bind(labelset: VideoSDKRTC.LabelSet) -> VideoSDKRTC.BoundHistogramMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.BoundHistogramMetric<T>
}
@_hasMissingDesignatedInitializers public class HistogramPointData : VideoSDKRTC.PointData {
  public var sum: Swift.Double
  public var count: Swift.UInt64
  public var min: Swift.Double
  public var max: Swift.Double
  public var boundaries: [Swift.Double]
  public var counts: [Swift.Int]
  public var hasMin: Swift.Bool
  public var hasMax: Swift.Bool
  @objc deinit
}
public class HLSConfig {
  public var layout: VideoSDKRTC.ConfigLayout
  public var theme: VideoSDKRTC.ConfigTheme
  public var mode: VideoSDKRTC.ConfigMode
  public var quality: VideoSDKRTC.ConfigQuality
  public var orientation: VideoSDKRTC.ConfigOrientation
  public init(layout: VideoSDKRTC.ConfigLayout, theme: VideoSDKRTC.ConfigTheme, mode: VideoSDKRTC.ConfigMode, quality: VideoSDKRTC.ConfigQuality, orientation: VideoSDKRTC.ConfigOrientation)
  public func toJson() -> [Swift.String : Any]
  @objc deinit
}
public class RecordingConfig {
  public var layout: VideoSDKRTC.ConfigLayout
  public var theme: VideoSDKRTC.ConfigTheme
  public var mode: VideoSDKRTC.ConfigMode
  public var quality: VideoSDKRTC.ConfigQuality
  public var orientation: VideoSDKRTC.ConfigOrientation
  public init(layout: VideoSDKRTC.ConfigLayout, theme: VideoSDKRTC.ConfigTheme, mode: VideoSDKRTC.ConfigMode, quality: VideoSDKRTC.ConfigQuality, orientation: VideoSDKRTC.ConfigOrientation)
  public func toJson() -> [Swift.String : Any]
  @objc deinit
}
public class HLSUrl {
  public var downstreamUrl: Swift.String
  public var playbackHlsUrl: Swift.String
  public var livestreamUrl: Swift.String
  public init(downstreamUrl: Swift.String? = nil, playbackHlsUrl: Swift.String? = nil, livestreamUrl: Swift.String? = nil)
  public func toJson() -> [Swift.String : Any]
  @objc deinit
}
public class ConfigLayout {
  public var type: VideoSDKRTC.ConfigLayoutGrid
  public var priority: VideoSDKRTC.ConfigLayoutPriority
  public var gridSize: Swift.Int
  public init(type: VideoSDKRTC.ConfigLayoutGrid, priority: VideoSDKRTC.ConfigLayoutPriority, gridSize: Swift.Int)
  public func toJson() -> [Swift.String : Any]
  @objc deinit
}
public enum ConfigLayoutPriority : Swift.String {
  case SPEAKER, PIN
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConfigLayoutGrid : Swift.String {
  case GRID, SPOTLIGHT, SIDEBAR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConfigTheme : Swift.String {
  case DEFAULT, LIGHT, DARK
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConfigMode : Swift.String {
  case video_and_audio, audio
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConfigQuality : Swift.String {
  case high, med, low
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ConfigOrientation : Swift.String {
  case landscape, portrait
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol IdGenerator {
  func generateSpanId() -> VideoSDKRTC.SpanId
  func generateTraceId() -> VideoSDKRTC.TraceId
}
@_hasMissingDesignatedInitializers public class InMemoryLogRecordExporter : VideoSDKRTC.LogRecordExporter {
  public func getFinishedLogRecords() -> [VideoSDKRTC.ReadableLogRecord]
  public func export(logRecords: [VideoSDKRTC.ReadableLogRecord]) -> VideoSDKRTC.ExportResult
  public func shutdown()
  public func forceFlush() -> VideoSDKRTC.ExportResult
  @objc deinit
}
public protocol Instrument : Swift.Equatable {
  var instrumentDescriptor: VideoSDKRTC.InstrumentDescriptor { get }
}
extension VideoSDKRTC.Instrument {
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
}
public struct InstrumentationScopeInfo : Swift.Hashable, Swift.Codable, Swift.Equatable {
  public var name: Swift.String {
    get
  }
  public var version: Swift.String? {
    get
  }
  public var schemaUrl: Swift.String? {
    get
  }
  public init()
  public init(name: Swift.String, version: Swift.String? = nil, schemaUrl: Swift.String? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: VideoSDKRTC.InstrumentationScopeInfo, b: VideoSDKRTC.InstrumentationScopeInfo) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct InstrumentDescriptor : Swift.Equatable {
  public let name: Swift.String
  public let description: Swift.String
  public let unit: Swift.String
  public let type: VideoSDKRTC.InstrumentType
  public let valueType: VideoSDKRTC.InstrumentValueType
  public init(name: Swift.String, description: Swift.String, unit: Swift.String, type: VideoSDKRTC.InstrumentType, valueType: VideoSDKRTC.InstrumentValueType)
  public static func == (lhs: VideoSDKRTC.InstrumentDescriptor, rhs: VideoSDKRTC.InstrumentDescriptor) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class InstrumentSelector {
  public static func builder() -> VideoSDKRTC.InstrumentSelectorBuilder
  @objc deinit
}
public class InstrumentSelectorBuilder {
  public init()
  public func setInstrument(type: VideoSDKRTC.InstrumentType) -> Self
  public func setInstrument(name: Swift.String) -> Self
  public func setMeter(name: Swift.String) -> Self
  public func setMeter(version: Swift.String) -> Self
  public func setMeter(schemaUrl: Swift.String) -> Self
  public func build() -> VideoSDKRTC.InstrumentSelector
  @objc deinit
}
public protocol ExtensionMap : Swift.Sendable {
  subscript(messageType: any VideoSDKRTC.Message.Type, fieldNumber: Swift.Int) -> (any VideoSDKRTC.AnyMessageExtension)? { get }
  func fieldNumberForProto(messageType: any VideoSDKRTC.Message.Type, protoFieldName: Swift.String) -> Swift.Int?
}
public enum InstrumentType : Swift.CaseIterable {
  case counter
  case upDownCounter
  case histogram
  case observableCounter
  case observableUpDownCounter
  case observableGauge
  public static func == (a: VideoSDKRTC.InstrumentType, b: VideoSDKRTC.InstrumentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [VideoSDKRTC.InstrumentType]
  public static var allCases: [VideoSDKRTC.InstrumentType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public enum InstrumentValueType {
  case long
  case double
  public static func == (a: VideoSDKRTC.InstrumentValueType, b: VideoSDKRTC.InstrumentValueType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol IntObserverMetric {
  func observe(value: Swift.Int, labelset: VideoSDKRTC.LabelSet)
  func observe(value: Swift.Int, labels: [Swift.String : Swift.String])
}
public struct NoopIntObserverMetric : VideoSDKRTC.IntObserverMetric {
  public init()
  public func observe(value: Swift.Int, labelset: VideoSDKRTC.LabelSet)
  public func observe(value: Swift.Int, labels: [Swift.String : Swift.String])
}
extension Foundation.Data {
  public func toJSONString() -> Swift.String
  public func toJSON() -> [Swift.String : Any]
  public func toJSONArray() -> [Any]
}
extension Swift.String {
  public func toJSON() -> [Swift.String : Any]
}
extension Swift.Dictionary {
  public func toJSONString() -> Swift.String
}
extension Swift.Array {
  public func toJSONString() -> Swift.String
}
extension Swift.Encodable {
  public func toJSON() -> [Swift.String : Any]
  public func toJSONArray() -> [Any]
}
@_hasMissingDesignatedInitializers open class LabelSet : Swift.Hashable {
  public var labels: [Swift.String : Swift.String] {
    get
  }
  public static var empty: VideoSDKRTC.LabelSet
  required public init(labels: [Swift.String : Swift.String])
  public static func == (lhs: VideoSDKRTC.LabelSet, rhs: VideoSDKRTC.LabelSet) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  @objc deinit
  open var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class LastValueAggregation : VideoSDKRTC.Aggregation {
  public static var instance: VideoSDKRTC.LastValueAggregation {
    get
  }
  public func createAggregator(descriptor: VideoSDKRTC.InstrumentDescriptor, exemplarFilter: any VideoSDKRTC.ExemplarFilter) -> any VideoSDKRTC.StableAggregator
  public func isCompatible(with descriptor: VideoSDKRTC.InstrumentDescriptor) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LastValueAggregator<T> : VideoSDKRTC.Aggregator<T> where T : Swift.SignedNumeric {
  override public func update(value: T)
  override public func checkpoint()
  override public func toMetricData() -> any VideoSDKRTC.MetricData
  override public func getAggregationType() -> VideoSDKRTC.AggregationType
  @objc deinit
}
public struct LivestreamOutput : Swift.Codable {
  public let url: Swift.String
  public let streamKey: Swift.String
  public init(url: Swift.String, streamKey: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol Logger {
  func eventBuilder(name: Swift.String) -> any VideoSDKRTC.EventBuilder
  func logRecordBuilder() -> any VideoSDKRTC.LogRecordBuilder
}
public protocol LoggerBuilder {
  func setEventDomain(_ eventDomain: Swift.String) -> Self
  func setSchemaUrl(_ schemaUrl: Swift.String) -> Self
  func setInstrumentationVersion(_ instrumentationVersion: Swift.String) -> Self
  func setIncludeTraceContext(_ includeTraceContext: Swift.Bool) -> Self
  func setAttributes(_ attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> Self
  func build() -> any VideoSDKRTC.Logger
}
@_hasMissingDesignatedInitializers public class LoggerBuilderSdk : VideoSDKRTC.LoggerBuilder {
  public func setEventDomain(_ eventDomain: Swift.String) -> Self
  public func setSchemaUrl(_ schemaUrl: Swift.String) -> Self
  public func setInstrumentationVersion(_ instrumentationVersion: Swift.String) -> Self
  public func setIncludeTraceContext(_ includeTraceContext: Swift.Bool) -> Self
  public func setAttributes(_ attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> Self
  public func build() -> any VideoSDKRTC.Logger
  @objc deinit
}
public protocol LoggerProvider : AnyObject {
  func get(instrumentationScopeName: Swift.String) -> any VideoSDKRTC.Logger
  func loggerBuilder(instrumentationScopeName: Swift.String) -> any VideoSDKRTC.LoggerBuilder
}
public class LoggerProviderBuilder {
  public var clock: any VideoSDKRTC.Clock {
    get
  }
  public var resource: VideoSDKRTC.Resource {
    get
  }
  public var logLimits: VideoSDKRTC.LogLimits {
    get
  }
  public var logProcessors: [any VideoSDKRTC.LogRecordProcessor] {
    get
  }
  public init()
  public func with(clock: any VideoSDKRTC.Clock) -> Self
  public func with(resource: VideoSDKRTC.Resource) -> Self
  public func with(logLimits: VideoSDKRTC.LogLimits) -> Self
  public func with(processors: [any VideoSDKRTC.LogRecordProcessor]) -> Self
  public func build() -> VideoSDKRTC.LoggerProviderSdk
  @objc deinit
}
public class LoggerProviderSdk : VideoSDKRTC.LoggerProvider {
  public init(clock: any VideoSDKRTC.Clock = MillisClock(), resource: VideoSDKRTC.Resource = EnvVarResource.get(), logLimits: VideoSDKRTC.LogLimits = LogLimits(), logRecordProcessors: [any VideoSDKRTC.LogRecordProcessor] = [])
  public func get(instrumentationScopeName: Swift.String) -> any VideoSDKRTC.Logger
  public func loggerBuilder(instrumentationScopeName: Swift.String) -> any VideoSDKRTC.LoggerBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LoggerSdk : VideoSDKRTC.Logger {
  public func eventBuilder(name: Swift.String) -> any VideoSDKRTC.EventBuilder
  public func logRecordBuilder() -> any VideoSDKRTC.LogRecordBuilder
  @objc deinit
}
public struct LogLimits {
  public static let defaultMaxAttributeCount: Swift.Int
  public static let defaultMaxAtributeLength: Swift.Int
  public let maxAttributeCount: Swift.Int
  public let maxAttributeLength: Swift.Int
  public init(maxAttributeCount: Swift.Int = Self.defaultMaxAttributeCount, maxAttributeLength: Swift.Int = Self.defaultMaxAtributeLength)
}
@_hasMissingDesignatedInitializers public class LogRecordAdapter {
  public static func toProtoResourceRecordLog(logRecordList: [VideoSDKRTC.ReadableLogRecord]) -> [VideoSDKRTC.Opentelemetry_Proto_Logs_V1_ResourceLogs]
  @objc deinit
}
public protocol LogRecordBuilder {
  func setTimestamp(_ timestamp: Foundation.Date) -> Self
  func setObservedTimestamp(_ observed: Foundation.Date) -> Self
  func setSpanContext(_ context: VideoSDKRTC.SpanContext) -> Self
  func setSeverity(_ severity: VideoSDKRTC.Severity) -> Self
  func setBody(_ body: Swift.String) -> Self
  func setAttributes(_ attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> Self
  func emit()
}
@_hasMissingDesignatedInitializers public class LogRecordBuilderSdk : VideoSDKRTC.EventBuilder {
  public func setTimestamp(_ timestamp: Foundation.Date) -> Self
  public func setObservedTimestamp(_ observed: Foundation.Date) -> Self
  public func setSpanContext(_ context: VideoSDKRTC.SpanContext) -> Self
  public func setSeverity(_ severity: VideoSDKRTC.Severity) -> Self
  public func setBody(_ body: Swift.String) -> Self
  public func setAttributes(_ attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> Self
  public func setData(_ attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> Self
  public func emit()
  @objc deinit
}
public protocol LogRecordExporter {
  func export(logRecords: [VideoSDKRTC.ReadableLogRecord]) -> VideoSDKRTC.ExportResult
  func shutdown()
  func forceFlush() -> VideoSDKRTC.ExportResult
}
public protocol LogRecordProcessor {
  func onEmit(logRecord: VideoSDKRTC.ReadableLogRecord)
  func forceFlush() -> VideoSDKRTC.ExportResult
  func shutdown() -> VideoSDKRTC.ExportResult
}
extension VideoSDKRTC.Message {
  @inlinable public init(serializedData data: Foundation.Data, extensions: (any VideoSDKRTC.ExtensionMap)? = nil, partial: Swift.Bool = false, options: VideoSDKRTC.BinaryDecodingOptions = BinaryDecodingOptions()) throws {
    self.init()
    try merge(serializedBytes: data, extensions: extensions, partial: partial, options: options)
  }
  @inlinable public mutating func merge(serializedData data: Foundation.Data, extensions: (any VideoSDKRTC.ExtensionMap)? = nil, partial: Swift.Bool = false, options: VideoSDKRTC.BinaryDecodingOptions = BinaryDecodingOptions()) throws {
    try merge(serializedBytes: data, extensions: extensions, partial: partial, options: options)
  }
  public func serializedData(partial: Swift.Bool = false) throws -> Foundation.Data
}
public enum Opentelemetry_Proto_Logs_V1_SeverityNumber : VideoSDKRTC.Enum {
  public typealias RawValue = Swift.Int
  case unspecified
  case trace
  case trace2
  case trace3
  case trace4
  case debug
  case debug2
  case debug3
  case debug4
  case info
  case info2
  case info3
  case info4
  case warn
  case warn2
  case warn3
  case warn4
  case error
  case error2
  case error3
  case error4
  case fatal
  case fatal2
  case fatal3
  case fatal4
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Logs_V1_SeverityNumber : Swift.CaseIterable {
  public static var allCases: [VideoSDKRTC.Opentelemetry_Proto_Logs_V1_SeverityNumber]
  public typealias AllCases = [VideoSDKRTC.Opentelemetry_Proto_Logs_V1_SeverityNumber]
}
public enum Opentelemetry_Proto_Logs_V1_LogRecordFlags : VideoSDKRTC.Enum {
  public typealias RawValue = Swift.Int
  case doNotUse
  case traceFlagsMask
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Logs_V1_LogRecordFlags : Swift.CaseIterable {
  public static var allCases: [VideoSDKRTC.Opentelemetry_Proto_Logs_V1_LogRecordFlags]
  public typealias AllCases = [VideoSDKRTC.Opentelemetry_Proto_Logs_V1_LogRecordFlags]
}
public struct Opentelemetry_Proto_Logs_V1_LogsData {
  public var resourceLogs: [VideoSDKRTC.Opentelemetry_Proto_Logs_V1_ResourceLogs]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Logs_V1_ResourceLogs {
  public var resource: VideoSDKRTC.Opentelemetry_Proto_Resource_V1_Resource {
    get
    set
  }
  public var hasResource: Swift.Bool {
    get
  }
  public mutating func clearResource()
  public var scopeLogs: [VideoSDKRTC.Opentelemetry_Proto_Logs_V1_ScopeLogs]
  public var schemaURL: Swift.String
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Logs_V1_ScopeLogs {
  public var scope: VideoSDKRTC.Opentelemetry_Proto_Common_V1_InstrumentationScope {
    get
    set
  }
  public var hasScope: Swift.Bool {
    get
  }
  public mutating func clearScope()
  public var logRecords: [VideoSDKRTC.Opentelemetry_Proto_Logs_V1_LogRecord]
  public var schemaURL: Swift.String
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Logs_V1_LogRecord {
  public var timeUnixNano: Swift.UInt64
  public var observedTimeUnixNano: Swift.UInt64
  public var severityNumber: VideoSDKRTC.Opentelemetry_Proto_Logs_V1_SeverityNumber
  public var severityText: Swift.String
  public var body: VideoSDKRTC.Opentelemetry_Proto_Common_V1_AnyValue {
    get
    set
  }
  public var hasBody: Swift.Bool {
    get
  }
  public mutating func clearBody()
  public var attributes: [VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue]
  public var droppedAttributesCount: Swift.UInt32
  public var flags: Swift.UInt32
  public var traceID: Foundation.Data
  public var spanID: Foundation.Data
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Opentelemetry_Proto_Logs_V1_SeverityNumber : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Logs_V1_LogRecordFlags : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Logs_V1_LogsData : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Logs_V1_ResourceLogs : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Logs_V1_ScopeLogs : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Logs_V1_LogRecord : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Logs_V1_SeverityNumber : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Opentelemetry_Proto_Logs_V1_LogRecordFlags : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Opentelemetry_Proto_Logs_V1_LogsData : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Logs_V1_LogsData, rhs: VideoSDKRTC.Opentelemetry_Proto_Logs_V1_LogsData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Logs_V1_ResourceLogs : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Logs_V1_ResourceLogs, rhs: VideoSDKRTC.Opentelemetry_Proto_Logs_V1_ResourceLogs) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Logs_V1_ScopeLogs : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Logs_V1_ScopeLogs, rhs: VideoSDKRTC.Opentelemetry_Proto_Logs_V1_ScopeLogs) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Logs_V1_LogRecord : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Logs_V1_LogRecord, rhs: VideoSDKRTC.Opentelemetry_Proto_Logs_V1_LogRecord) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest {
  public var resourceLogs: [VideoSDKRTC.Opentelemetry_Proto_Logs_V1_ResourceLogs]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse {
  public var partialSuccess: VideoSDKRTC.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess {
    get
    set
  }
  public var hasPartialSuccess: Swift.Bool {
    get
  }
  public mutating func clearPartialSuccess()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess {
  public var rejectedLogRecords: Swift.Int64
  public var errorMessage: Swift.String
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest, rhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse, rhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsServiceResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess, rhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Logs_V1_ExportLogsPartialSuccess) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol LongCounter {
  mutating func add(value: Swift.Int)
  mutating func add(value: Swift.Int, attribute: [Swift.String : VideoSDKRTC.AttributeValue])
}
public protocol LongCounterBuilder : AnyObject {
  func ofDoubles() -> any VideoSDKRTC.DoubleCounterBuilder
  func build() -> any VideoSDKRTC.LongCounter
  func buildWithCallback(_ callback: @escaping (any VideoSDKRTC.ObservableLongMeasurement) -> Swift.Void) -> any VideoSDKRTC.ObservableLongCounter
}
public struct Google_Protobuf_DoubleValue {
  public var value: Swift.Double
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_FloatValue {
  public var value: Swift.Float
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_Int64Value {
  public var value: Swift.Int64
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_UInt64Value {
  public var value: Swift.UInt64
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_Int32Value {
  public var value: Swift.Int32
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_UInt32Value {
  public var value: Swift.UInt32
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_BoolValue {
  public var value: Swift.Bool
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_StringValue {
  public var value: Swift.String
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_BytesValue {
  public var value: Foundation.Data
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Google_Protobuf_DoubleValue : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_FloatValue : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_Int64Value : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_UInt64Value : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_Int32Value : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_UInt32Value : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_BoolValue : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_StringValue : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_BytesValue : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_DoubleValue : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_DoubleValue, rhs: VideoSDKRTC.Google_Protobuf_DoubleValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_FloatValue : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_FloatValue, rhs: VideoSDKRTC.Google_Protobuf_FloatValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_Int64Value : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_Int64Value, rhs: VideoSDKRTC.Google_Protobuf_Int64Value) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_UInt64Value : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_UInt64Value, rhs: VideoSDKRTC.Google_Protobuf_UInt64Value) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_Int32Value : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_Int32Value, rhs: VideoSDKRTC.Google_Protobuf_Int32Value) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_UInt32Value : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_UInt32Value, rhs: VideoSDKRTC.Google_Protobuf_UInt32Value) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_BoolValue : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_BoolValue, rhs: VideoSDKRTC.Google_Protobuf_BoolValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_StringValue : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_StringValue, rhs: VideoSDKRTC.Google_Protobuf_StringValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_BytesValue : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_BytesValue, rhs: VideoSDKRTC.Google_Protobuf_BytesValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class LongCounterMeterBuilderSdk : VideoSDKRTC.LongCounterBuilder {
  public func ofDoubles() -> any VideoSDKRTC.DoubleCounterBuilder
  public func build() -> any VideoSDKRTC.LongCounter
  public func buildWithCallback(_ callback: @escaping (any VideoSDKRTC.ObservableLongMeasurement) -> Swift.Void) -> any VideoSDKRTC.ObservableLongCounter
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongCounterSdk : VideoSDKRTC.LongCounter, VideoSDKRTC.Instrument {
  public var instrumentDescriptor: VideoSDKRTC.InstrumentDescriptor
  public func add(value: Swift.Int)
  public func add(value: Swift.Int, attribute: [Swift.String : VideoSDKRTC.AttributeValue])
  @objc deinit
}
public struct DoubleCounterSdk : VideoSDKRTC.DoubleCounter, VideoSDKRTC.Instrument {
  public var instrumentDescriptor: VideoSDKRTC.InstrumentDescriptor
  public mutating func add(value: Swift.Double)
  public mutating func add(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
}
public protocol LongGaugeBuilder : AnyObject {
  func buildWithCallback(_ callback: @escaping (any VideoSDKRTC.ObservableLongMeasurement) -> Swift.Void) -> any VideoSDKRTC.ObservableLongGauge
}
@_hasMissingDesignatedInitializers public class LongGaugeBuilderSdk : VideoSDKRTC.LongGaugeBuilder {
  public func buildWithCallback(_ callback: @escaping (any VideoSDKRTC.ObservableLongMeasurement) -> Swift.Void) -> any VideoSDKRTC.ObservableLongGauge
  @objc deinit
}
public protocol LongHistogram {
  mutating func record(value: Swift.Int)
  mutating func record(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
}
public protocol LongHistogramBuilder : AnyObject {
  func build() -> any VideoSDKRTC.LongHistogram
}
@_hasMissingDesignatedInitializers public class LongHistogramMeterBuilderSdk : VideoSDKRTC.LongHistogramBuilder {
  public func build() -> any VideoSDKRTC.LongHistogram
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongHistogramMeterSdk : VideoSDKRTC.LongHistogram, VideoSDKRTC.Instrument {
  public var instrumentDescriptor: VideoSDKRTC.InstrumentDescriptor
  public func record(value: Swift.Int)
  public func record(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongLastValueAggregator : VideoSDKRTC.StableAggregator {
  public func diff(previousCumulative: VideoSDKRTC.PointData, currentCumulative: VideoSDKRTC.PointData) throws -> VideoSDKRTC.PointData
  public func toPoint(measurement: VideoSDKRTC.Measurement) throws -> VideoSDKRTC.PointData
  public func createHandle() -> VideoSDKRTC.AggregatorHandle
  public func toMetricData(resource: VideoSDKRTC.Resource, scope: VideoSDKRTC.InstrumentationScopeInfo, descriptor: VideoSDKRTC.MetricDescriptor, points: [VideoSDKRTC.PointData], temporality: VideoSDKRTC.AggregationTemporality) -> VideoSDKRTC.StableMetricData
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongPointData : VideoSDKRTC.PointData {
  public var value: Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongSumAggregator : VideoSDKRTC.SumAggregator, VideoSDKRTC.StableAggregator {
  public func diff(previousCumulative: VideoSDKRTC.PointData, currentCumulative: VideoSDKRTC.PointData) throws -> VideoSDKRTC.PointData
  public func toPoint(measurement: VideoSDKRTC.Measurement) throws -> VideoSDKRTC.PointData
  public func createHandle() -> VideoSDKRTC.AggregatorHandle
  public func toMetricData(resource: VideoSDKRTC.Resource, scope: VideoSDKRTC.InstrumentationScopeInfo, descriptor: VideoSDKRTC.MetricDescriptor, points: [VideoSDKRTC.PointData], temporality: VideoSDKRTC.AggregationTemporality) -> VideoSDKRTC.StableMetricData
  @objc deinit
}
public protocol LongUpDownCounter {
  mutating func add(value: Swift.Int)
  mutating func add(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
}
public struct JSONEncodingOptions : Swift.Sendable {
  public var alwaysPrintInt64sAsNumbers: Swift.Bool
  public var alwaysPrintEnumsAsInts: Swift.Bool
  public var preserveProtoFieldNames: Swift.Bool
  public init()
}
public struct SimpleExtensionMap : VideoSDKRTC.ExtensionMap, Swift.ExpressibleByArrayLiteral {
  public typealias Element = VideoSDKRTC.AnyMessageExtension
  public init()
  public init(arrayLiteral: any VideoSDKRTC.AnyMessageExtension...)
  public init(_ others: VideoSDKRTC.SimpleExtensionMap...)
  public subscript(messageType: any VideoSDKRTC.Message.Type, fieldNumber: Swift.Int) -> (any VideoSDKRTC.AnyMessageExtension)? {
    get
  }
  public func fieldNumberForProto(messageType: any VideoSDKRTC.Message.Type, protoFieldName: Swift.String) -> Swift.Int?
  public mutating func insert(_ newValue: any VideoSDKRTC.AnyMessageExtension)
  public mutating func insert(contentsOf: [any VideoSDKRTC.AnyMessageExtension])
  public mutating func formUnion(_ other: VideoSDKRTC.SimpleExtensionMap)
  public func union(_ other: VideoSDKRTC.SimpleExtensionMap) -> VideoSDKRTC.SimpleExtensionMap
  public typealias ArrayLiteralElement = any VideoSDKRTC.AnyMessageExtension
}
public protocol LongUpDownCounterBuilder : AnyObject {
  func ofDoubles() -> any VideoSDKRTC.DoubleUpDownCounterBuilder
  func build() -> any VideoSDKRTC.LongUpDownCounter
  func buildWithCallback(_ callback: @escaping (any VideoSDKRTC.ObservableLongMeasurement) -> Swift.Void) -> any VideoSDKRTC.ObservableLongUpDownCounter
}
@_hasMissingDesignatedInitializers public class LongUpDownCounterBuilderSdk : VideoSDKRTC.LongUpDownCounterBuilder {
  public func ofDoubles() -> any VideoSDKRTC.DoubleUpDownCounterBuilder
  public func build() -> any VideoSDKRTC.LongUpDownCounter
  public func buildWithCallback(_ callback: @escaping (any VideoSDKRTC.ObservableLongMeasurement) -> Swift.Void) -> any VideoSDKRTC.ObservableLongUpDownCounter
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongUpDownCounterSdk : VideoSDKRTC.LongUpDownCounter, VideoSDKRTC.Instrument {
  public var instrumentDescriptor: VideoSDKRTC.InstrumentDescriptor {
    get
  }
  public func add(value: Swift.Int)
  public func add(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MaxValueAggregator<T> : VideoSDKRTC.Aggregator<T> where T : Swift.Comparable, T : Swift.SignedNumeric {
  override public func update(value: T)
  override public func checkpoint()
  override public func toMetricData() -> any VideoSDKRTC.MetricData
  override public func getAggregationType() -> VideoSDKRTC.AggregationType
  @objc deinit
}
public struct Google_Protobuf_Empty {
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Google_Protobuf_Empty : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_Empty : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_Empty, rhs: VideoSDKRTC.Google_Protobuf_Empty) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Measurement {
  public var startEpochNano: Swift.UInt64 {
    get
  }
  public var epochNano: Swift.UInt64 {
    get
  }
  public var hasLongValue: Swift.Bool {
    get
  }
  public var longValue: Swift.Int {
    get
  }
  public var doubleValue: Swift.Double {
    get
  }
  public var hasDoubleValue: Swift.Bool {
    get
  }
  public var attributes: [Swift.String : VideoSDKRTC.AttributeValue] {
    get
  }
  public static func longMeasurement(startEpochNano: Swift.UInt64, endEpochNano: Swift.UInt64, value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> VideoSDKRTC.Measurement
  public static func doubleMeasurement(startEpochNano: Swift.UInt64, endEpochNano: Swift.UInt64, value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> VideoSDKRTC.Measurement
}
public protocol MeasureMetric {
  associatedtype T
  func bind(labelset: VideoSDKRTC.LabelSet) -> VideoSDKRTC.BoundMeasureMetric<Self.T>
  func bind(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.BoundMeasureMetric<Self.T>
}
extension VideoSDKRTC.MeasureMetric {
  public func record(value: Self.T, labelset: VideoSDKRTC.LabelSet)
  public func record(value: Self.T, labels: [Swift.String : Swift.String])
}
public struct AnyMeasureMetric<T> : VideoSDKRTC.MeasureMetric {
  public init<U>(_ measurable: U) where T == U.T, U : VideoSDKRTC.MeasureMetric
  public func bind(labelset: VideoSDKRTC.LabelSet) -> VideoSDKRTC.BoundMeasureMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.BoundMeasureMetric<T>
}
public struct NoopMeasureMetric<T> : VideoSDKRTC.MeasureMetric {
  public init()
  public func bind(labelset: VideoSDKRTC.LabelSet) -> VideoSDKRTC.BoundMeasureMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.BoundMeasureMetric<T>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MeasureMinMaxSumCountAggregator<T> : VideoSDKRTC.Aggregator<T> where T : Swift.Comparable, T : Swift.SignedNumeric {
  override public func update(value: T)
  override public func checkpoint()
  override public func toMetricData() -> any VideoSDKRTC.MetricData
  override public func getAggregationType() -> VideoSDKRTC.AggregationType
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MediaStream : Swift.Equatable {
  public var id: Swift.String {
    get
  }
  public var kind: VideoSDKRTC.MediaType {
    get
  }
  public var track: WebRTC.RTCMediaStreamTrack {
    get
  }
  public var producer: Mediasoup.Producer? {
    get
  }
  public var consumer: Mediasoup.Consumer? {
    get
  }
  @objc deinit
}
extension VideoSDKRTC.MediaStream {
  public func pause()
  public func resume()
}
extension VideoSDKRTC.MediaStream {
  public static func == (lhs: VideoSDKRTC.MediaStream, rhs: VideoSDKRTC.MediaStream) -> Swift.Bool
}
public enum MediaType : Swift.Equatable {
  case share
  case state(value: Mediasoup.MediaKind)
  public static func == (a: VideoSDKRTC.MediaType, b: VideoSDKRTC.MediaType) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class Meeting : Swift.Equatable {
  public var id: Swift.String {
    get
  }
  public var localParticipant: VideoSDKRTC.Participant {
    get
  }
  public var participants: [Swift.String : VideoSDKRTC.Participant] {
    get
  }
  public var pinnedParticipants: [Swift.String : VideoSDKRTC.ParticipantPinState] {
    get
  }
  public var hlsUrls: VideoSDKRTC.HLSUrl?
  public var hlsState: VideoSDKRTC.HLSState
  public var liveStreamState: VideoSDKRTC.LiveStreamState
  public var recordingState: VideoSDKRTC.RecordingState
  public var pubsub: VideoSDKRTC.PubSub {
    get
  }
  public var customVideoMediaStream: VideoSDKRTC.CustomRTCMediaStream? {
    get
  }
  public var meetingMode: VideoSDKRTC.Mode? {
    get
  }
  @objc deinit
}
extension VideoSDKRTC.Meeting {
  public func join(cameraPosition: AVFoundation.AVCaptureDevice.Position)
  public func leave()
  public func end()
  public func enableWebcam(customVideoStream: VideoSDKRTC.CustomRTCMediaStream? = nil)
  public func disableWebcam()
  public func switchWebcam()
  public func muteMic()
  public func unmuteMic()
  public func startRecording(webhookUrl: Swift.String, awsDirPath: Swift.String? = nil, config: VideoSDKRTC.RecordingConfig? = nil)
  public func stopRecording()
  public func startLivestream(outputs: [VideoSDKRTC.LivestreamOutput])
  public func stopLivestream()
  public func startHLS(config: VideoSDKRTC.HLSConfig? = nil)
  public func stopHLS()
  public func changeMode(_ mode: VideoSDKRTC.Mode)
}
extension VideoSDKRTC.Meeting {
  public func addEventListener(_ meetingEventListener: any VideoSDKRTC.MeetingEventListener)
  public func removeEventListener(_ meetingEventListener: any VideoSDKRTC.MeetingEventListener)
}
extension VideoSDKRTC.Meeting {
  public static func == (lhs: VideoSDKRTC.Meeting, rhs: VideoSDKRTC.Meeting) -> Swift.Bool
}
public protocol MeetingEventListener : AnyObject {
  func onMeetingJoined()
  func onMeetingLeft()
  func onParticipantJoined(_ participant: VideoSDKRTC.Participant)
  func onParticipantLeft(_ participant: VideoSDKRTC.Participant)
  func onRecordingStarted()
  func onRecordingStoppped()
  func onLivestreamStarted()
  func onLivestreamStopped()
  func onSpeakerChanged(participantId: Swift.String?)
  func onMicRequested(participantId: Swift.String?, accept: @escaping () -> Swift.Void, reject: @escaping () -> Swift.Void)
  func onWebcamRequested(participantId: Swift.String?, accept: @escaping () -> Swift.Void, reject: @escaping () -> Swift.Void)
  func onSocketError(message: Swift.String)
  func onMeetingStateChanged(meetingState: VideoSDKRTC.MeetingState)
  func onError(error: VideoSDKRTC.VideoSDKError)
  func onHlsStateChanged(state: VideoSDKRTC.HLSState, hlsUrl: VideoSDKRTC.HLSUrl?)
  func onLivestreamStateChanged(state: VideoSDKRTC.LiveStreamState)
  func onRecordingStateChanged(state: VideoSDKRTC.RecordingState)
  func onPinStateChanged(participantId: Swift.String, pinType: VideoSDKRTC.PinType)
  func onParticipantModeChanged(participantId: Swift.String, mode: VideoSDKRTC.Mode)
}
extension VideoSDKRTC.MeetingEventListener {
  public func onMeetingJoined()
  public func onMeetingLeft()
  public func onParticipantJoined(_ participant: VideoSDKRTC.Participant)
  public func onParticipantLeft(_ participant: VideoSDKRTC.Participant)
  public func onRecordingStarted()
  public func onRecordingStoppped()
  public func onLivestreamStarted()
  public func onLivestreamStopped()
  public func onSpeakerChanged(participantId: Swift.String?)
  public func onMicRequested(participantId: Swift.String?, accept: @escaping () -> Swift.Void, reject: @escaping () -> Swift.Void)
  public func onWebcamRequested(participantId: Swift.String?, accept: @escaping () -> Swift.Void, reject: @escaping () -> Swift.Void)
  public func onSocketError(message: Swift.String)
  public func onMeetingStateChanged(meetingState: VideoSDKRTC.MeetingState)
  public func onError(error: VideoSDKRTC.VideoSDKError)
  public func onHlsStateChanged(state: VideoSDKRTC.HLSState, hlsUrl: VideoSDKRTC.HLSUrl?)
  public func onLivestreamStateChanged(state: VideoSDKRTC.LiveStreamState)
  public func onRecordingStateChanged(state: VideoSDKRTC.RecordingState)
  public func onPinStateChanged(participantId: Swift.String, pinType: VideoSDKRTC.PinType)
  public func onParticipantModeChanged(participantId: Swift.String, mode: VideoSDKRTC.Mode)
}
public enum MeetingState : Swift.String {
  case CONNECTING, CONNECTED, CLOSING, CLOSED, CANCELLED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Mode : Swift.String {
  case CONFERENCE, VIEWER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum VideoSDKError : Swift.Int {
  case UNKNOWN_ERROR
  case INVALID_API_KEY
  case INVALID_TOKEN
  case INVALID_MEETING_ID
  case INVALID_PARTICIPANT_ID
  case DUPLICATE_PARTICIPANT
  case ACCOUNT_DEACTIVATED
  case ACCOUNT_DISCONTINUED
  case INVALID_PERMISSIONS
  case MAX_PARTCIPANT_REACHED
  case MAX_SPEAKER_REACHED
  case START_RECORDING_FAILED
  case STOP_RECORDING_FAILED
  case START_LIVESTREAM_FAILED
  case STOP_LIVESTREAM_FAILED
  case INVALID_LIVESTREAM_CONFIG
  case START_HLS_FAILED
  case STOP_HLS_FAILED
  case RECORDING_FAILED
  case LIVESTREAM_FAILED
  case HLS_FAILED
  case ERROR_GET_VIDEO_MEDIA
  case ERROR_GET_AUDIO_MEDIA
  case ERROR_GET_DISPLAY_MEDIA
  case ERROR_GET_VIDEO_MEDIA_PERMISSION_DENIED
  case ERROR_GET_AUDIO_MEDIA_PERMISSION_DENIED
  case ERROR_GET_DISPLAY_MEDIA_PERMISSION_DENIED
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum HLSState : Swift.String {
  case HLS_STARTED, HLS_STARTING, HLS_STOPPED, HLS_STOPPING, HLS_PLAYABLE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum RecordingState : Swift.String {
  case RECORDING_STARTED, RECORDING_STARTING, RECORDING_STOPPED, RECORDING_STOPPING
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum LiveStreamState : Swift.String {
  case LIVESTREAM_STARTED, LIVESTREAM_STARTING, LIVESTREAM_STOPPED, LIVESTREAM_STOPPING
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol Meter {
  func createIntCounter(name: Swift.String, monotonic: Swift.Bool) -> VideoSDKRTC.AnyCounterMetric<Swift.Int>
  func createDoubleCounter(name: Swift.String, monotonic: Swift.Bool) -> VideoSDKRTC.AnyCounterMetric<Swift.Double>
  func createIntMeasure(name: Swift.String, absolute: Swift.Bool) -> VideoSDKRTC.AnyMeasureMetric<Swift.Int>
  func createDoubleMeasure(name: Swift.String, absolute: Swift.Bool) -> VideoSDKRTC.AnyMeasureMetric<Swift.Double>
  func createIntHistogram(name: Swift.String, explicitBoundaries: Swift.Array<Swift.Int>?, absolute: Swift.Bool) -> VideoSDKRTC.AnyHistogramMetric<Swift.Int>
  func createDoubleHistogram(name: Swift.String, explicitBoundaries: Swift.Array<Swift.Double>?, absolute: Swift.Bool) -> VideoSDKRTC.AnyHistogramMetric<Swift.Double>
  func createRawDoubleHistogram(name: Swift.String) -> VideoSDKRTC.AnyRawHistogramMetric<Swift.Double>
  func createRawIntHistogram(name: Swift.String) -> VideoSDKRTC.AnyRawHistogramMetric<Swift.Int>
  func createRawDoubleCounter(name: Swift.String) -> VideoSDKRTC.AnyRawCounterMetric<Swift.Double>
  func createRawIntCounter(name: Swift.String) -> VideoSDKRTC.AnyRawCounterMetric<Swift.Int>
  func createIntObserver(name: Swift.String, absolute: Swift.Bool, callback: @escaping (any VideoSDKRTC.IntObserverMetric) -> Swift.Void) -> any VideoSDKRTC.IntObserverMetric
  func createDoubleObserver(name: Swift.String, absolute: Swift.Bool, callback: @escaping (any VideoSDKRTC.DoubleObserverMetric) -> Swift.Void) -> any VideoSDKRTC.DoubleObserverMetric
  func createIntObservableGauge(name: Swift.String, callback: @escaping (any VideoSDKRTC.IntObserverMetric) -> Swift.Void) -> any VideoSDKRTC.IntObserverMetric
  func createDoubleObservableGauge(name: Swift.String, callback: @escaping (any VideoSDKRTC.DoubleObserverMetric) -> Swift.Void) -> any VideoSDKRTC.DoubleObserverMetric
  func getLabelSet(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.LabelSet
}
extension VideoSDKRTC.Meter {
  public func createIntCounter(name: Swift.String) -> VideoSDKRTC.AnyCounterMetric<Swift.Int>
  public func createDoubleCounter(name: Swift.String) -> VideoSDKRTC.AnyCounterMetric<Swift.Double>
  public func createIntMeasure(name: Swift.String) -> VideoSDKRTC.AnyMeasureMetric<Swift.Int>
  public func createDoubleMeasure(name: Swift.String) -> VideoSDKRTC.AnyMeasureMetric<Swift.Double>
  public func createIntObserver(name: Swift.String, callback: @escaping (any VideoSDKRTC.IntObserverMetric) -> Swift.Void) -> any VideoSDKRTC.IntObserverMetric
  public func createDoubleObserver(name: Swift.String, callback: @escaping (any VideoSDKRTC.DoubleObserverMetric) -> Swift.Void) -> any VideoSDKRTC.DoubleObserverMetric
}
public protocol MeterBuilder : AnyObject {
  func setSchemaUrl(schemaUrl: Swift.String) -> Self
  func setInstrumentationVersion(instrumentationVersion: Swift.String) -> Self
  func build() -> any VideoSDKRTC.StableMeter
}
@_hasMissingDesignatedInitializers public class MeterBuilderSdk : VideoSDKRTC.MeterBuilder {
  public func setSchemaUrl(schemaUrl: Swift.String) -> Self
  public func setInstrumentationVersion(instrumentationVersion: Swift.String) -> Self
  public func build() -> any VideoSDKRTC.StableMeter
  @objc deinit
}
public protocol MeterProvider : AnyObject {
  func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String?) -> any VideoSDKRTC.Meter
}
public class MeterProviderBuilder {
  public var resource: VideoSDKRTC.Resource {
    get
  }
  public var metricExporter: any VideoSDKRTC.MetricExporter {
    get
  }
  public var metricPushInterval: Foundation.TimeInterval {
    get
  }
  public var metricProcessor: any VideoSDKRTC.MetricProcessor {
    get
  }
  public init()
  public func with(processor: any VideoSDKRTC.MetricProcessor) -> Self
  public func with(exporter: any VideoSDKRTC.MetricExporter) -> Self
  public func with(pushInterval: Foundation.TimeInterval) -> Self
  public func with(resource: VideoSDKRTC.Resource) -> Self
  public func build() -> any VideoSDKRTC.MeterProvider
  @objc deinit
}
public class MeterProviderSdk : VideoSDKRTC.MeterProvider {
  public static let defaultPushInterval: Swift.Double
  convenience public init()
  public init(metricProcessor: any VideoSDKRTC.MetricProcessor, metricExporter: any VideoSDKRTC.MetricExporter, metricPushInterval: Foundation.TimeInterval = MeterProviderSdk.defaultPushInterval, resource: VideoSDKRTC.Resource = EnvVarResource.get())
  public func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String? = nil) -> any VideoSDKRTC.Meter
  public func setMetricProcessor(_ metricProcessor: any VideoSDKRTC.MetricProcessor)
  public func addMetricExporter(_ metricExporter: any VideoSDKRTC.MetricExporter)
  public func setMetricPushInterval(_ interval: Foundation.TimeInterval)
  public func setResource(_ resource: VideoSDKRTC.Resource)
  @objc deinit
}
extension VideoSDKRTC.Meter {
  public func addMetric(name _: Swift.String, type _: VideoSDKRTC.AggregationType, data _: [any VideoSDKRTC.MetricData])
}
public struct Metric {
  public var namespace: Swift.String {
    get
  }
  public var resource: VideoSDKRTC.Resource {
    get
  }
  public var instrumentationScopeInfo: VideoSDKRTC.InstrumentationScopeInfo {
    get
  }
  public var name: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public var aggregationType: VideoSDKRTC.AggregationType {
    get
  }
  public var data: [any VideoSDKRTC.MetricData] {
    get
  }
}
extension VideoSDKRTC.Metric : Swift.Equatable {
  public static func == (lhs: VideoSDKRTC.Metric, rhs: VideoSDKRTC.Metric) -> Swift.Bool
}
extension VideoSDKRTC.Metric : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol MetricData {
  var startTimestamp: Foundation.Date { get set }
  var timestamp: Foundation.Date { get set }
  var labels: [Swift.String : Swift.String] { get set }
}
public struct NoopMetricData : VideoSDKRTC.MetricData {
  public var startTimestamp: Foundation.Date
  public var timestamp: Foundation.Date
  public var labels: [Swift.String : Swift.String]
}
public struct SumData<T> : VideoSDKRTC.MetricData {
  public init(startTimestamp: Foundation.Date, timestamp: Foundation.Date, labels: [Swift.String : Swift.String] = [String: String](), sum: T)
  public var startTimestamp: Foundation.Date
  public var timestamp: Foundation.Date
  public var labels: [Swift.String : Swift.String]
  public var sum: T
}
public struct SummaryData<T> : VideoSDKRTC.MetricData {
  public init(startTimestamp: Foundation.Date, timestamp: Foundation.Date, labels: [Swift.String : Swift.String] = [String: String](), count: Swift.Int, sum: T, min: T, max: T)
  public var startTimestamp: Foundation.Date
  public var timestamp: Foundation.Date
  public var labels: [Swift.String : Swift.String]
  public var count: Swift.Int
  public var sum: T
  public var min: T
  public var max: T
}
public struct HistogramData<T> : VideoSDKRTC.MetricData {
  public init(startTimestamp: Foundation.Date, timestamp: Foundation.Date, labels: [Swift.String : Swift.String] = [String: String](), buckets: (boundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>), count: Swift.Int, sum: T)
  public var startTimestamp: Foundation.Date
  public var timestamp: Foundation.Date
  public var labels: [Swift.String : Swift.String]
  public var buckets: (boundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>)
  public var count: Swift.Int
  public var sum: T
}
extension VideoSDKRTC.NoopMetricData : Swift.Equatable, Swift.Codable {
  public static func == (a: VideoSDKRTC.NoopMetricData, b: VideoSDKRTC.NoopMetricData) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension VideoSDKRTC.SumData : Swift.Equatable where T : Swift.Equatable {
  public static func == (a: VideoSDKRTC.SumData<T>, b: VideoSDKRTC.SumData<T>) -> Swift.Bool
}
extension VideoSDKRTC.SumData : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension VideoSDKRTC.SummaryData : Swift.Equatable where T : Swift.Equatable {
  public static func == (a: VideoSDKRTC.SummaryData<T>, b: VideoSDKRTC.SummaryData<T>) -> Swift.Bool
}
extension VideoSDKRTC.SummaryData : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension VideoSDKRTC.HistogramData : Swift.Equatable where T : Swift.Equatable {
  public static func == (lhs: VideoSDKRTC.HistogramData<T>, rhs: VideoSDKRTC.HistogramData<T>) -> Swift.Bool
}
extension VideoSDKRTC.HistogramData : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct MetricDescriptor : Swift.Hashable {
  public var name: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public var view: VideoSDKRTC.StableView {
    get
  }
  public var instrument: VideoSDKRTC.InstrumentDescriptor {
    get
  }
  public func aggregationName() -> Swift.String
  public static func == (lhs: VideoSDKRTC.MetricDescriptor, rhs: VideoSDKRTC.MetricDescriptor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Google_Protobuf_Timestamp {
  public var seconds: Swift.Int64
  public var nanos: Swift.Int32
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Google_Protobuf_Timestamp : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_Timestamp : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_Timestamp, rhs: VideoSDKRTC.Google_Protobuf_Timestamp) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_FieldMask {
  public init(protoPaths: [Swift.String])
  public init(protoPaths: Swift.String...)
  public init?(jsonPaths: Swift.String...)
}
public enum MetricExporterResultCode {
  case success
  case failureNotRetryable
  case failureRetryable
  public static func == (a: VideoSDKRTC.MetricExporterResultCode, b: VideoSDKRTC.MetricExporterResultCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol MetricExporter {
  func export(metrics: [VideoSDKRTC.Metric], shouldCancel: (() -> Swift.Bool)?) -> VideoSDKRTC.MetricExporterResultCode
}
public protocol MetricProcessor {
  func finishCollectionCycle() -> [VideoSDKRTC.Metric]
  func process(metric: VideoSDKRTC.Metric)
}
public class MetricProcessorSdk : VideoSDKRTC.MetricProcessor {
  public init()
  public func finishCollectionCycle() -> [VideoSDKRTC.Metric]
  public func process(metric: VideoSDKRTC.Metric)
  @objc deinit
}
public protocol MetricProducer : VideoSDKRTC.CollectionRegistration {
  func collectAllMetrics() -> [VideoSDKRTC.StableMetricData]
}
public struct NoopMetricProducer : VideoSDKRTC.MetricProducer {
  public func collectAllMetrics() -> [VideoSDKRTC.StableMetricData]
}
extension VideoSDKRTC.Message {
  public init(jsonUTF8Data: Foundation.Data, options: VideoSDKRTC.JSONDecodingOptions = JSONDecodingOptions()) throws
  public init(jsonUTF8Data: Foundation.Data, extensions: (any VideoSDKRTC.ExtensionMap)? = nil, options: VideoSDKRTC.JSONDecodingOptions = JSONDecodingOptions()) throws
  public func jsonUTF8Data(options: VideoSDKRTC.JSONEncodingOptions = JSONEncodingOptions()) throws -> Foundation.Data
}
public enum Opentelemetry_Proto_Metrics_V1_AggregationTemporality : VideoSDKRTC.Enum {
  public typealias RawValue = Swift.Int
  case unspecified
  case delta
  case cumulative
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_AggregationTemporality : Swift.CaseIterable {
  public static var allCases: [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_AggregationTemporality]
  public typealias AllCases = [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_AggregationTemporality]
}
public enum Opentelemetry_Proto_Metrics_V1_DataPointFlags : VideoSDKRTC.Enum {
  public typealias RawValue = Swift.Int
  case doNotUse
  case noRecordedValueMask
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_DataPointFlags : Swift.CaseIterable {
  public static var allCases: [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_DataPointFlags]
  public typealias AllCases = [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_DataPointFlags]
}
public struct Opentelemetry_Proto_Metrics_V1_MetricsData {
  public var resourceMetrics: [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ResourceMetrics]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_ResourceMetrics {
  public var resource: VideoSDKRTC.Opentelemetry_Proto_Resource_V1_Resource {
    get
    set
  }
  public var hasResource: Swift.Bool {
    get
  }
  public mutating func clearResource()
  public var scopeMetrics: [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ScopeMetrics]
  public var schemaURL: Swift.String
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_ScopeMetrics {
  public var scope: VideoSDKRTC.Opentelemetry_Proto_Common_V1_InstrumentationScope {
    get
    set
  }
  public var hasScope: Swift.Bool {
    get
  }
  public mutating func clearScope()
  public var metrics: [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Metric]
  public var schemaURL: Swift.String
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Metric {
  public var name: Swift.String
  public var description_p: Swift.String
  public var unit: Swift.String
  public var data: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Metric.OneOf_Data?
  public var gauge: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Gauge {
    get
    set
  }
  public var sum: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Sum {
    get
    set
  }
  public var histogram: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Histogram {
    get
    set
  }
  public var exponentialHistogram: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram {
    get
    set
  }
  public var summary: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Summary {
    get
    set
  }
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public enum OneOf_Data : Swift.Equatable {
    case gauge(VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Gauge)
    case sum(VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Sum)
    case histogram(VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Histogram)
    case exponentialHistogram(VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram)
    case summary(VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Summary)
    public static func == (a: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Metric.OneOf_Data, b: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Metric.OneOf_Data) -> Swift.Bool
  }
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Gauge {
  public var dataPoints: [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_NumberDataPoint]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Sum {
  public var dataPoints: [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_NumberDataPoint]
  public var aggregationTemporality: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_AggregationTemporality
  public var isMonotonic: Swift.Bool
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Histogram {
  public var dataPoints: [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_HistogramDataPoint]
  public var aggregationTemporality: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_AggregationTemporality
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_ExponentialHistogram {
  public var dataPoints: [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint]
  public var aggregationTemporality: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_AggregationTemporality
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Summary {
  public var dataPoints: [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_NumberDataPoint {
  public var attributes: [VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue]
  public var startTimeUnixNano: Swift.UInt64
  public var timeUnixNano: Swift.UInt64
  public var value: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_NumberDataPoint.OneOf_Value?
  public var asDouble: Swift.Double {
    get
    set
  }
  public var asInt: Swift.Int64 {
    get
    set
  }
  public var exemplars: [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Exemplar]
  public var flags: Swift.UInt32
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public enum OneOf_Value : Swift.Equatable {
    case asDouble(Swift.Double)
    case asInt(Swift.Int64)
    public static func == (a: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_NumberDataPoint.OneOf_Value, b: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_NumberDataPoint.OneOf_Value) -> Swift.Bool
  }
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_HistogramDataPoint {
  public var attributes: [VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue]
  public var startTimeUnixNano: Swift.UInt64
  public var timeUnixNano: Swift.UInt64
  public var count: Swift.UInt64
  public var sum: Swift.Double {
    get
    set
  }
  public var hasSum: Swift.Bool {
    get
  }
  public mutating func clearSum()
  public var bucketCounts: [Swift.UInt64]
  public var explicitBounds: [Swift.Double]
  public var exemplars: [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Exemplar]
  public var flags: Swift.UInt32
  public var min: Swift.Double {
    get
    set
  }
  public var hasMin: Swift.Bool {
    get
  }
  public mutating func clearMin()
  public var max: Swift.Double {
    get
    set
  }
  public var hasMax: Swift.Bool {
    get
  }
  public mutating func clearMax()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint {
  public var attributes: [VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue]
  public var startTimeUnixNano: Swift.UInt64
  public var timeUnixNano: Swift.UInt64
  public var count: Swift.UInt64
  public var sum: Swift.Double {
    get
    set
  }
  public var hasSum: Swift.Bool {
    get
  }
  public mutating func clearSum()
  public var scale: Swift.Int32
  public var zeroCount: Swift.UInt64
  public var positive: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets {
    get
    set
  }
  public var hasPositive: Swift.Bool {
    get
  }
  public mutating func clearPositive()
  public var negative: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets {
    get
    set
  }
  public var hasNegative: Swift.Bool {
    get
  }
  public mutating func clearNegative()
  public var flags: Swift.UInt32
  public var exemplars: [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Exemplar]
  public var min: Swift.Double {
    get
    set
  }
  public var hasMin: Swift.Bool {
    get
  }
  public mutating func clearMin()
  public var max: Swift.Double {
    get
    set
  }
  public var hasMax: Swift.Bool {
    get
  }
  public mutating func clearMax()
  public var zeroThreshold: Swift.Double
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public struct Buckets {
    public var offset: Swift.Int32
    public var bucketCounts: [Swift.UInt64]
    public var unknownFields: VideoSDKRTC.UnknownStorage
    public init()
  }
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_SummaryDataPoint {
  public var attributes: [VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue]
  public var startTimeUnixNano: Swift.UInt64
  public var timeUnixNano: Swift.UInt64
  public var count: Swift.UInt64
  public var sum: Swift.Double
  public var quantileValues: [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint.ValueAtQuantile]
  public var flags: Swift.UInt32
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public struct ValueAtQuantile {
    public var quantile: Swift.Double
    public var value: Swift.Double
    public var unknownFields: VideoSDKRTC.UnknownStorage
    public init()
  }
  public init()
}
public struct Opentelemetry_Proto_Metrics_V1_Exemplar {
  public var filteredAttributes: [VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue]
  public var timeUnixNano: Swift.UInt64
  public var value: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Exemplar.OneOf_Value?
  public var asDouble: Swift.Double {
    get
    set
  }
  public var asInt: Swift.Int64 {
    get
    set
  }
  public var spanID: Foundation.Data
  public var traceID: Foundation.Data
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public enum OneOf_Value : Swift.Equatable {
    case asDouble(Swift.Double)
    case asInt(Swift.Int64)
    public static func == (a: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Exemplar.OneOf_Value, b: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Exemplar.OneOf_Value) -> Swift.Bool
  }
  public init()
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_AggregationTemporality : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_DataPointFlags : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_MetricsData : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ResourceMetrics : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ScopeMetrics : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Metric : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Metric.OneOf_Data : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Gauge : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Sum : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Histogram : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Summary : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_NumberDataPoint : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_NumberDataPoint.OneOf_Value : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_HistogramDataPoint : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint.ValueAtQuantile : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Exemplar : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Exemplar.OneOf_Value : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_AggregationTemporality : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_DataPointFlags : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_MetricsData : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_MetricsData, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_MetricsData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ResourceMetrics : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ResourceMetrics, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ResourceMetrics) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ScopeMetrics : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ScopeMetrics, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ScopeMetrics) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Metric : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Metric, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Metric) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Gauge : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Gauge, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Gauge) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Sum : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Sum, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Sum) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Histogram : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Histogram, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Histogram) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogram) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Summary : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Summary, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Summary) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_NumberDataPoint : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_NumberDataPoint, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_NumberDataPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_HistogramDataPoint : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_HistogramDataPoint, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_HistogramDataPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ExponentialHistogramDataPoint.Buckets) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint.ValueAtQuantile : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint.ValueAtQuantile, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_SummaryDataPoint.ValueAtQuantile) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Exemplar : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Exemplar, rhs: VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Exemplar) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest {
  public var resourceMetrics: [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ResourceMetrics]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse {
  public var partialSuccess: VideoSDKRTC.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess {
    get
    set
  }
  public var hasPartialSuccess: Swift.Bool {
    get
  }
  public mutating func clearPartialSuccess()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess {
  public var rejectedDataPoints: Swift.Int64
  public var errorMessage: Swift.String
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest, rhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse, rhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsServiceResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess, rhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Metrics_V1_ExportMetricsPartialSuccess) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum MetricsAdapter {
  public static func toProtoResourceMetrics(stableMetricData: [VideoSDKRTC.StableMetricData]) -> [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ResourceMetrics]
  public static func toProtoResourceMetrics(metricDataList: [VideoSDKRTC.Metric]) -> [VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_ResourceMetrics]
  public static func toProtoMetric(stableMetric: VideoSDKRTC.StableMetricData) -> VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Metric?
  public static func toProtoMetric(metric: VideoSDKRTC.Metric) -> VideoSDKRTC.Opentelemetry_Proto_Metrics_V1_Metric?
}
public struct MetricStorageConstants {
}
public protocol MetricStorage {
  var metricDescriptor: VideoSDKRTC.MetricDescriptor { get }
  mutating func collect(resource: VideoSDKRTC.Resource, scope: VideoSDKRTC.InstrumentationScopeInfo, startEpochNanos: Swift.UInt64, epochNanos: Swift.UInt64) -> VideoSDKRTC.StableMetricData
  func isEmpty() -> Swift.Bool
}
public protocol WritableMetricStorage {
  mutating func recordLong(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  mutating func recordDouble(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
}
public struct Google_Protobuf_SourceContext {
  public var fileName: Swift.String
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Google_Protobuf_SourceContext : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_SourceContext : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_SourceContext, rhs: VideoSDKRTC.Google_Protobuf_SourceContext) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class MetricStorageRegistry {
  @objc deinit
}
public class MillisClock : VideoSDKRTC.Clock {
  public init()
  public var now: Foundation.Date {
    get
  }
  @objc deinit
}
public class MonotonicClock : VideoSDKRTC.Clock {
  public init(clock: any VideoSDKRTC.Clock)
  public var now: Foundation.Date {
    get
  }
  @objc deinit
}
extension VideoSDKRTC.Google_Protobuf_ListValue : Swift.ExpressibleByArrayLiteral {
  public typealias Element = VideoSDKRTC.Google_Protobuf_Value
  public init(arrayLiteral elements: VideoSDKRTC.Google_Protobuf_ListValue.Element...)
  public typealias ArrayLiteralElement = VideoSDKRTC.Google_Protobuf_ListValue.Element
}
extension VideoSDKRTC.Google_Protobuf_ListValue {
  public init(values: [VideoSDKRTC.Google_Protobuf_Value])
  public subscript(index: Swift.Int) -> VideoSDKRTC.Google_Protobuf_Value {
    get
    set(newValue)
  }
}
public class MultiLogRecordExporter : VideoSDKRTC.LogRecordExporter {
  public init(logRecordExporters: [any VideoSDKRTC.LogRecordExporter])
  public func export(logRecords: [VideoSDKRTC.ReadableLogRecord]) -> VideoSDKRTC.ExportResult
  public func shutdown()
  public func forceFlush() -> VideoSDKRTC.ExportResult
  @objc deinit
}
public class MultiLogRecordProcessor : VideoSDKRTC.LogRecordProcessor {
  public func forceFlush() -> VideoSDKRTC.ExportResult
  public func shutdown() -> VideoSDKRTC.ExportResult
  public init(logRecordProcessors: [any VideoSDKRTC.LogRecordProcessor])
  public func onEmit(logRecord: VideoSDKRTC.ReadableLogRecord)
  @objc deinit
}
public class MultiSpanExporter : VideoSDKRTC.SpanExporter {
  public init(spanExporters: [any VideoSDKRTC.SpanExporter])
  public func export(spans: [VideoSDKRTC.SpanData]) -> VideoSDKRTC.SpanExporterResultCode
  public func flush() -> VideoSDKRTC.SpanExporterResultCode
  public func shutdown()
  @objc deinit
}
extension VideoSDKRTC.Google_Protobuf_DoubleValue : Swift.ExpressibleByFloatLiteral {
  public typealias WrappedType = VideoSDKRTC.ProtobufDouble
  public typealias FloatLiteralType = VideoSDKRTC.Google_Protobuf_DoubleValue.WrappedType.BaseType
  public init(_ value: VideoSDKRTC.Google_Protobuf_DoubleValue.WrappedType.BaseType)
  public init(floatLiteral: VideoSDKRTC.Google_Protobuf_DoubleValue.FloatLiteralType)
}
extension VideoSDKRTC.Google_Protobuf_FloatValue : Swift.ExpressibleByFloatLiteral {
  public typealias WrappedType = VideoSDKRTC.ProtobufFloat
  public typealias FloatLiteralType = Swift.Float
  public init(_ value: VideoSDKRTC.Google_Protobuf_FloatValue.WrappedType.BaseType)
  public init(floatLiteral: VideoSDKRTC.Google_Protobuf_FloatValue.FloatLiteralType)
}
extension VideoSDKRTC.Google_Protobuf_Int64Value : Swift.ExpressibleByIntegerLiteral {
  public typealias WrappedType = VideoSDKRTC.ProtobufInt64
  public typealias IntegerLiteralType = VideoSDKRTC.Google_Protobuf_Int64Value.WrappedType.BaseType
  public init(_ value: VideoSDKRTC.Google_Protobuf_Int64Value.WrappedType.BaseType)
  public init(integerLiteral: VideoSDKRTC.Google_Protobuf_Int64Value.IntegerLiteralType)
}
extension VideoSDKRTC.Google_Protobuf_UInt64Value : Swift.ExpressibleByIntegerLiteral {
  public typealias WrappedType = VideoSDKRTC.ProtobufUInt64
  public typealias IntegerLiteralType = VideoSDKRTC.Google_Protobuf_UInt64Value.WrappedType.BaseType
  public init(_ value: VideoSDKRTC.Google_Protobuf_UInt64Value.WrappedType.BaseType)
  public init(integerLiteral: VideoSDKRTC.Google_Protobuf_UInt64Value.IntegerLiteralType)
}
extension VideoSDKRTC.Google_Protobuf_Int32Value : Swift.ExpressibleByIntegerLiteral {
  public typealias WrappedType = VideoSDKRTC.ProtobufInt32
  public typealias IntegerLiteralType = VideoSDKRTC.Google_Protobuf_Int32Value.WrappedType.BaseType
  public init(_ value: VideoSDKRTC.Google_Protobuf_Int32Value.WrappedType.BaseType)
  public init(integerLiteral: VideoSDKRTC.Google_Protobuf_Int32Value.IntegerLiteralType)
}
extension VideoSDKRTC.Google_Protobuf_UInt32Value : Swift.ExpressibleByIntegerLiteral {
  public typealias WrappedType = VideoSDKRTC.ProtobufUInt32
  public typealias IntegerLiteralType = VideoSDKRTC.Google_Protobuf_UInt32Value.WrappedType.BaseType
  public init(_ value: VideoSDKRTC.Google_Protobuf_UInt32Value.WrappedType.BaseType)
  public init(integerLiteral: VideoSDKRTC.Google_Protobuf_UInt32Value.IntegerLiteralType)
}
extension VideoSDKRTC.Google_Protobuf_BoolValue : Swift.ExpressibleByBooleanLiteral {
  public typealias WrappedType = VideoSDKRTC.ProtobufBool
  public typealias BooleanLiteralType = Swift.Bool
  public init(_ value: VideoSDKRTC.Google_Protobuf_BoolValue.WrappedType.BaseType)
  public init(booleanLiteral: Swift.Bool)
}
extension VideoSDKRTC.Google_Protobuf_StringValue : Swift.ExpressibleByStringLiteral {
  public typealias WrappedType = VideoSDKRTC.ProtobufString
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
  public init(_ value: VideoSDKRTC.Google_Protobuf_StringValue.WrappedType.BaseType)
  public init(stringLiteral: Swift.String)
  public init(extendedGraphemeClusterLiteral: Swift.String)
  public init(unicodeScalarLiteral: Swift.String)
}
extension VideoSDKRTC.Google_Protobuf_BytesValue {
  public typealias WrappedType = VideoSDKRTC.ProtobufBytes
  public init(_ value: VideoSDKRTC.Google_Protobuf_BytesValue.WrappedType.BaseType)
}
public struct MultiSpanProcessor : VideoSDKRTC.SpanProcessor {
  public init(spanProcessors: [any VideoSDKRTC.SpanProcessor])
  public var isStartRequired: Swift.Bool {
    get
  }
  public var isEndRequired: Swift.Bool {
    get
  }
  public func onStart(parentContext: VideoSDKRTC.SpanContext?, span: any VideoSDKRTC.ReadableSpan)
  public func onEnd(span: any VideoSDKRTC.ReadableSpan)
  public func shutdown()
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
}
@_hasMissingDesignatedInitializers public class NoopLogRecordExporter : VideoSDKRTC.LogRecordExporter {
  public static let instance: VideoSDKRTC.NoopLogRecordExporter
  public func export(logRecords: [VideoSDKRTC.ReadableLogRecord]) -> VideoSDKRTC.ExportResult
  public func shutdown()
  public func forceFlush() -> VideoSDKRTC.ExportResult
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NoopLogRecordProcessor : VideoSDKRTC.LogRecordProcessor {
  public static let noopLogRecordProcessor: VideoSDKRTC.NoopLogRecordProcessor
  public func onEmit(logRecord: VideoSDKRTC.ReadableLogRecord)
  public func forceFlush() -> VideoSDKRTC.ExportResult
  public func shutdown() -> VideoSDKRTC.ExportResult
  @objc deinit
}
public protocol ObservableDoubleCounter {
}
public protocol ObservableDoubleGauge {
}
public protocol ObservableDoubleMeasurement {
  func record(value: Swift.Double)
  func record(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
}
public protocol ObservableDoubleUpDownCounter {
}
public protocol AnyExtensionField {
  func hash(into hasher: inout Swift.Hasher)
  var protobufExtension: any VideoSDKRTC.AnyMessageExtension { get }
  func isEqual(other: any VideoSDKRTC.AnyExtensionField) -> Swift.Bool
  mutating func decodeExtensionField<T>(decoder: inout T) throws where T : VideoSDKRTC.SPBDecoder
  func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  var isInitialized: Swift.Bool { get }
}
extension VideoSDKRTC.AnyExtensionField {
  public var isInitialized: Swift.Bool {
    get
  }
}
public protocol ExtensionField : Swift.Hashable, VideoSDKRTC.AnyExtensionField {
  associatedtype ValueType
  var value: Self.ValueType { get set }
  init(protobufExtension: any VideoSDKRTC.AnyMessageExtension, value: Self.ValueType)
  init?<D>(protobufExtension: any VideoSDKRTC.AnyMessageExtension, decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
}
public struct OptionalExtensionField<T> : VideoSDKRTC.ExtensionField where T : VideoSDKRTC.FieldType {
  public typealias BaseType = T.BaseType
  public typealias ValueType = VideoSDKRTC.OptionalExtensionField<T>.BaseType
  public var value: VideoSDKRTC.OptionalExtensionField<T>.ValueType
  public var protobufExtension: any VideoSDKRTC.AnyMessageExtension
  public static func == (lhs: VideoSDKRTC.OptionalExtensionField<T>, rhs: VideoSDKRTC.OptionalExtensionField<T>) -> Swift.Bool
  public init(protobufExtension: any VideoSDKRTC.AnyMessageExtension, value: VideoSDKRTC.OptionalExtensionField<T>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any VideoSDKRTC.AnyExtensionField) -> Swift.Bool
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public init?<D>(protobufExtension: any VideoSDKRTC.AnyMessageExtension, decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public var hashValue: Swift.Int {
    get
  }
}
public struct RepeatedExtensionField<T> : VideoSDKRTC.ExtensionField where T : VideoSDKRTC.FieldType {
  public typealias BaseType = T.BaseType
  public typealias ValueType = [VideoSDKRTC.RepeatedExtensionField<T>.BaseType]
  public var value: VideoSDKRTC.RepeatedExtensionField<T>.ValueType
  public var protobufExtension: any VideoSDKRTC.AnyMessageExtension
  public static func == (lhs: VideoSDKRTC.RepeatedExtensionField<T>, rhs: VideoSDKRTC.RepeatedExtensionField<T>) -> Swift.Bool
  public init(protobufExtension: any VideoSDKRTC.AnyMessageExtension, value: VideoSDKRTC.RepeatedExtensionField<T>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any VideoSDKRTC.AnyExtensionField) -> Swift.Bool
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public init?<D>(protobufExtension: any VideoSDKRTC.AnyMessageExtension, decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public var hashValue: Swift.Int {
    get
  }
}
public struct PackedExtensionField<T> : VideoSDKRTC.ExtensionField where T : VideoSDKRTC.FieldType {
  public typealias BaseType = T.BaseType
  public typealias ValueType = [VideoSDKRTC.PackedExtensionField<T>.BaseType]
  public var value: VideoSDKRTC.PackedExtensionField<T>.ValueType
  public var protobufExtension: any VideoSDKRTC.AnyMessageExtension
  public static func == (lhs: VideoSDKRTC.PackedExtensionField<T>, rhs: VideoSDKRTC.PackedExtensionField<T>) -> Swift.Bool
  public init(protobufExtension: any VideoSDKRTC.AnyMessageExtension, value: VideoSDKRTC.PackedExtensionField<T>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any VideoSDKRTC.AnyExtensionField) -> Swift.Bool
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public init?<D>(protobufExtension: any VideoSDKRTC.AnyMessageExtension, decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public var hashValue: Swift.Int {
    get
  }
}
public struct OptionalEnumExtensionField<E> : VideoSDKRTC.ExtensionField where E : VideoSDKRTC.Enum, E.RawValue == Swift.Int {
  public typealias BaseType = E
  public typealias ValueType = E
  public var value: VideoSDKRTC.OptionalEnumExtensionField<E>.ValueType
  public var protobufExtension: any VideoSDKRTC.AnyMessageExtension
  public static func == (lhs: VideoSDKRTC.OptionalEnumExtensionField<E>, rhs: VideoSDKRTC.OptionalEnumExtensionField<E>) -> Swift.Bool
  public init(protobufExtension: any VideoSDKRTC.AnyMessageExtension, value: VideoSDKRTC.OptionalEnumExtensionField<E>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any VideoSDKRTC.AnyExtensionField) -> Swift.Bool
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public init?<D>(protobufExtension: any VideoSDKRTC.AnyMessageExtension, decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public var hashValue: Swift.Int {
    get
  }
}
public struct RepeatedEnumExtensionField<E> : VideoSDKRTC.ExtensionField where E : VideoSDKRTC.Enum, E.RawValue == Swift.Int {
  public typealias BaseType = E
  public typealias ValueType = [E]
  public var value: VideoSDKRTC.RepeatedEnumExtensionField<E>.ValueType
  public var protobufExtension: any VideoSDKRTC.AnyMessageExtension
  public static func == (lhs: VideoSDKRTC.RepeatedEnumExtensionField<E>, rhs: VideoSDKRTC.RepeatedEnumExtensionField<E>) -> Swift.Bool
  public init(protobufExtension: any VideoSDKRTC.AnyMessageExtension, value: VideoSDKRTC.RepeatedEnumExtensionField<E>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any VideoSDKRTC.AnyExtensionField) -> Swift.Bool
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public init?<D>(protobufExtension: any VideoSDKRTC.AnyMessageExtension, decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public var hashValue: Swift.Int {
    get
  }
}
public struct PackedEnumExtensionField<E> : VideoSDKRTC.ExtensionField where E : VideoSDKRTC.Enum, E.RawValue == Swift.Int {
  public typealias BaseType = E
  public typealias ValueType = [E]
  public var value: VideoSDKRTC.PackedEnumExtensionField<E>.ValueType
  public var protobufExtension: any VideoSDKRTC.AnyMessageExtension
  public static func == (lhs: VideoSDKRTC.PackedEnumExtensionField<E>, rhs: VideoSDKRTC.PackedEnumExtensionField<E>) -> Swift.Bool
  public init(protobufExtension: any VideoSDKRTC.AnyMessageExtension, value: VideoSDKRTC.PackedEnumExtensionField<E>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any VideoSDKRTC.AnyExtensionField) -> Swift.Bool
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public init?<D>(protobufExtension: any VideoSDKRTC.AnyMessageExtension, decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public var hashValue: Swift.Int {
    get
  }
}
public struct OptionalMessageExtensionField<M> : VideoSDKRTC.ExtensionField where M : Swift.Equatable, M : VideoSDKRTC.Message {
  public typealias BaseType = M
  public typealias ValueType = VideoSDKRTC.OptionalMessageExtensionField<M>.BaseType
  public var value: VideoSDKRTC.OptionalMessageExtensionField<M>.ValueType
  public var protobufExtension: any VideoSDKRTC.AnyMessageExtension
  public static func == (lhs: VideoSDKRTC.OptionalMessageExtensionField<M>, rhs: VideoSDKRTC.OptionalMessageExtensionField<M>) -> Swift.Bool
  public init(protobufExtension: any VideoSDKRTC.AnyMessageExtension, value: VideoSDKRTC.OptionalMessageExtensionField<M>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any VideoSDKRTC.AnyExtensionField) -> Swift.Bool
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public init?<D>(protobufExtension: any VideoSDKRTC.AnyMessageExtension, decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public var isInitialized: Swift.Bool {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct RepeatedMessageExtensionField<M> : VideoSDKRTC.ExtensionField where M : Swift.Equatable, M : VideoSDKRTC.Message {
  public typealias BaseType = M
  public typealias ValueType = [VideoSDKRTC.RepeatedMessageExtensionField<M>.BaseType]
  public var value: VideoSDKRTC.RepeatedMessageExtensionField<M>.ValueType
  public var protobufExtension: any VideoSDKRTC.AnyMessageExtension
  public static func == (lhs: VideoSDKRTC.RepeatedMessageExtensionField<M>, rhs: VideoSDKRTC.RepeatedMessageExtensionField<M>) -> Swift.Bool
  public init(protobufExtension: any VideoSDKRTC.AnyMessageExtension, value: VideoSDKRTC.RepeatedMessageExtensionField<M>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any VideoSDKRTC.AnyExtensionField) -> Swift.Bool
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public init?<D>(protobufExtension: any VideoSDKRTC.AnyMessageExtension, decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public var isInitialized: Swift.Bool {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OptionalGroupExtensionField<G> : VideoSDKRTC.ExtensionField where G : Swift.Hashable, G : VideoSDKRTC.Message {
  public typealias BaseType = G
  public typealias ValueType = VideoSDKRTC.OptionalGroupExtensionField<G>.BaseType
  public var value: G
  public var protobufExtension: any VideoSDKRTC.AnyMessageExtension
  public static func == (lhs: VideoSDKRTC.OptionalGroupExtensionField<G>, rhs: VideoSDKRTC.OptionalGroupExtensionField<G>) -> Swift.Bool
  public init(protobufExtension: any VideoSDKRTC.AnyMessageExtension, value: VideoSDKRTC.OptionalGroupExtensionField<G>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any VideoSDKRTC.AnyExtensionField) -> Swift.Bool
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public init?<D>(protobufExtension: any VideoSDKRTC.AnyMessageExtension, decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public var isInitialized: Swift.Bool {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct RepeatedGroupExtensionField<G> : VideoSDKRTC.ExtensionField where G : Swift.Hashable, G : VideoSDKRTC.Message {
  public typealias BaseType = G
  public typealias ValueType = [VideoSDKRTC.RepeatedGroupExtensionField<G>.BaseType]
  public var value: VideoSDKRTC.RepeatedGroupExtensionField<G>.ValueType
  public var protobufExtension: any VideoSDKRTC.AnyMessageExtension
  public static func == (lhs: VideoSDKRTC.RepeatedGroupExtensionField<G>, rhs: VideoSDKRTC.RepeatedGroupExtensionField<G>) -> Swift.Bool
  public init(protobufExtension: any VideoSDKRTC.AnyMessageExtension, value: VideoSDKRTC.RepeatedGroupExtensionField<G>.ValueType)
  public func hash(into hasher: inout Swift.Hasher)
  public func isEqual(other: any VideoSDKRTC.AnyExtensionField) -> Swift.Bool
  public mutating func decodeExtensionField<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public init?<D>(protobufExtension: any VideoSDKRTC.AnyMessageExtension, decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public var isInitialized: Swift.Bool {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ObservableInstrumentSdk : VideoSDKRTC.ObservableDoubleCounter, VideoSDKRTC.ObservableLongCounter, VideoSDKRTC.ObservableLongGauge, VideoSDKRTC.ObservableLongUpDownCounter, VideoSDKRTC.ObservableDoubleGauge, VideoSDKRTC.ObservableDoubleUpDownCounter {
}
public protocol ObservableLongCounter {
}
public protocol ObservableLongGauge {
}
public protocol ObservableLongMeasurement {
  func record(value: Swift.Int)
  func record(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
}
public protocol ObservableLongUpDownCounter {
}
public func defaultOltpHTTPMetricsEndpoint() -> Foundation.URL
@_inheritsConvenienceInitializers public class OtlpHttpMetricExporter : VideoSDKRTC.OtlpHttpExporterBase, VideoSDKRTC.MetricExporter {
  override public init(endpoint: Foundation.URL = defaultOltpHTTPMetricsEndpoint(), useSession: Foundation.URLSession? = nil, authToken: Swift.String)
  public func export(metrics: [VideoSDKRTC.Metric], shouldCancel: (() -> Swift.Bool)?) -> VideoSDKRTC.MetricExporterResultCode
  public func flush() -> VideoSDKRTC.MetricExporterResultCode
  @objc deinit
}
public struct OpenTelemetry {
  public static var version: Swift.String
  public static var instance: VideoSDKRTC.OpenTelemetry
  public var tracerProvider: any VideoSDKRTC.TracerProvider {
    get
  }
  public var meterProvider: any VideoSDKRTC.MeterProvider {
    get
  }
  public var stableMeterProvider: (any VideoSDKRTC.StableMeterProvider)? {
    get
  }
  public var loggerProvider: any VideoSDKRTC.LoggerProvider {
    get
  }
  public var baggageManager: any VideoSDKRTC.BaggageManager {
    get
  }
  public var propagators: any VideoSDKRTC.ContextPropagators {
    get
  }
  public var contextProvider: VideoSDKRTC.OpenTelemetryContextProvider {
    get
  }
  public static func registerStableMeterProvider(meterProvider: any VideoSDKRTC.StableMeterProvider)
  public static func registerTracerProvider(tracerProvider: any VideoSDKRTC.TracerProvider)
  public static func registerMeterProvider(meterProvider: any VideoSDKRTC.MeterProvider)
  public static func registerLoggerProvider(loggerProvider: any VideoSDKRTC.LoggerProvider)
  public static func registerBaggageManager(baggageManager: any VideoSDKRTC.BaggageManager)
  public static func registerPropagators(textPropagators: [any VideoSDKRTC.TextMapPropagator], baggagePropagator: any VideoSDKRTC.TextMapBaggagePropagator)
  public static func registerContextManager(contextManager: any VideoSDKRTC.ContextManager)
}
public enum OpenTelemetryContextKeys : Swift.String {
  case span
  case baggage
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct OpenTelemetryContextProvider {
  public var activeSpan: (any VideoSDKRTC.Span)? {
    get
  }
  public var activeBaggage: (any VideoSDKRTC.Baggage)? {
    get
  }
  public func setActiveSpan(_ span: any VideoSDKRTC.Span)
  public func setActiveBaggage(_ baggage: any VideoSDKRTC.Baggage)
  public func removeContextForSpan(_ span: any VideoSDKRTC.Span)
  public func removeContextForBaggage(_ baggage: any VideoSDKRTC.Baggage)
}
public struct OtlpConfiguration {
  public static let DefaultTimeoutInterval: Foundation.TimeInterval
  public let headers: [(Swift.String, Swift.String)]?
  public let timeout: Foundation.TimeInterval
  public init(timeout: Foundation.TimeInterval = OtlpConfiguration.DefaultTimeoutInterval, headers: [(Swift.String, Swift.String)]? = nil)
}
public class OtlpHttpExporterBase {
  public init(endpoint: Foundation.URL, useSession: Foundation.URLSession? = nil, authToken: Swift.String)
  public func createRequest(body: any VideoSDKRTC.Message, endpoint: Foundation.URL, authToken: Swift.String) -> Foundation.URLRequest
  public func shutdown()
  @objc deinit
}
public func defaultOltpHttpLoggingEndpoint() -> Foundation.URL
@_inheritsConvenienceInitializers public class OtlpHttpLogExporter : VideoSDKRTC.OtlpHttpExporterBase, VideoSDKRTC.LogRecordExporter {
  override public init(endpoint: Foundation.URL = defaultOltpHttpLoggingEndpoint(), useSession: Foundation.URLSession? = nil, authToken: Swift.String)
  public func export(logRecords: [VideoSDKRTC.ReadableLogRecord]) -> VideoSDKRTC.ExportResult
  public func forceFlush() -> VideoSDKRTC.ExportResult
  public func flush() -> VideoSDKRTC.ExportResult
  @objc deinit
}
public func defaultOltpHttpTracesEndpoint() -> Foundation.URL
@_inheritsConvenienceInitializers public class OtlpHttpTraceExporter : VideoSDKRTC.OtlpHttpExporterBase, VideoSDKRTC.SpanExporter {
  override public init(endpoint: Foundation.URL = defaultOltpHttpTracesEndpoint(), useSession: Foundation.URLSession? = nil, authToken: Swift.String)
  public func export(spans: [VideoSDKRTC.SpanData]) -> VideoSDKRTC.SpanExporterResultCode
  public func flush() -> VideoSDKRTC.SpanExporterResultCode
  @objc deinit
}
public struct OtlpSpan : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Attribute : Swift.Codable {
  public struct Value : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum OTPCConstants {
  public enum HTTP {
    public static let userAgent: Swift.String
  }
}
public struct Version {
  public static let major: Swift.Int
  public static let minor: Swift.Int
  public static let revision: Swift.Int
  public static let versionString: Swift.String
}
@_hasMissingDesignatedInitializers public class Participant : Swift.Equatable {
  public var id: Swift.String {
    get
  }
  public var displayName: Swift.String {
    get
  }
  public var videoQuality: VideoSDKRTC.VideoQuality {
    get
  }
  public var isLocal: Swift.Bool {
    get
  }
  public var streams: [Swift.String : VideoSDKRTC.MediaStream] {
    get
  }
  public var pinState: VideoSDKRTC.ParticipantPinState
  public var mode: VideoSDKRTC.Mode
  @objc deinit
}
extension VideoSDKRTC.Participant {
  public func enableMic()
  public func disableMic()
  public func enableWebcam()
  public func disableWebcam()
  public func remove()
  public func participantPinStateChanged(pinState: VideoSDKRTC.ParticipantPinState)
  public func participantModeChanged(mode: VideoSDKRTC.Mode)
  public func getAudioStats() -> [Swift.String : Any]?
  public func getVideoStats() -> [Swift.String : Any]?
}
extension VideoSDKRTC.Participant {
  public func addStream(_ stream: VideoSDKRTC.MediaStream)
  @discardableResult
  public func removeStream(_ streamId: Swift.String) -> VideoSDKRTC.MediaStream?
  public func removeAllStreams()
  public func setQuality(_ quality: VideoSDKRTC.VideoQuality)
  public func pin(_ peerId: Swift.String = "", _ pinType: VideoSDKRTC.PinType = .SHARE_AND_CAM)
  public func unpin(_ pinType: VideoSDKRTC.PinType = .SHARE_AND_CAM)
  public func setPinState(pinState: VideoSDKRTC.ParticipantPinState, peerId: Swift.String = "")
}
extension VideoSDKRTC.Participant {
  public func addEventListener(_ listener: any VideoSDKRTC.ParticipantEventListener)
  public func removeEventListener(_ listener: any VideoSDKRTC.ParticipantEventListener)
}
extension VideoSDKRTC.Participant {
  public static func == (lhs: VideoSDKRTC.Participant, rhs: VideoSDKRTC.Participant) -> Swift.Bool
}
public protocol ParticipantEventListener {
  func onStreamEnabled(_ stream: VideoSDKRTC.MediaStream, forParticipant participant: VideoSDKRTC.Participant)
  func onStreamDisabled(_ stream: VideoSDKRTC.MediaStream, forParticipant participant: VideoSDKRTC.Participant)
}
extension VideoSDKRTC.ParticipantEventListener {
  public func onStreamEnabled(_ stream: VideoSDKRTC.MediaStream, forParticipant participant: VideoSDKRTC.Participant)
  public func onStreamDisabled(_ stream: VideoSDKRTC.MediaStream, forParticipant participant: VideoSDKRTC.Participant)
}
public enum PinType : Swift.String {
  case SHARE_AND_CAM, CAM, SHARE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ParticipantPinState : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class PointData : Swift.Equatable {
  public var startEpochNanos: Swift.UInt64
  public var endEpochNanos: Swift.UInt64
  public var attributes: [Swift.String : VideoSDKRTC.AttributeValue]
  public var exemplars: [VideoSDKRTC.ExemplarData]
  public static func - (left: VideoSDKRTC.PointData, right: VideoSDKRTC.PointData) -> Self
  public static func == (lhs: VideoSDKRTC.PointData, rhs: VideoSDKRTC.PointData) -> Swift.Bool
  @objc deinit
}
public struct ProxyMeter : VideoSDKRTC.Meter {
  public func createRawDoubleCounter(name: Swift.String) -> VideoSDKRTC.AnyRawCounterMetric<Swift.Double>
  public func createRawIntCounter(name: Swift.String) -> VideoSDKRTC.AnyRawCounterMetric<Swift.Int>
  public func createRawDoubleHistogram(name: Swift.String) -> VideoSDKRTC.AnyRawHistogramMetric<Swift.Double>
  public func createRawIntHistogram(name: Swift.String) -> VideoSDKRTC.AnyRawHistogramMetric<Swift.Int>
  public func getLabelSet(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.LabelSet
  public func createIntCounter(name: Swift.String, monotonic: Swift.Bool) -> VideoSDKRTC.AnyCounterMetric<Swift.Int>
  public func createDoubleCounter(name: Swift.String, monotonic: Swift.Bool) -> VideoSDKRTC.AnyCounterMetric<Swift.Double>
  public func createIntMeasure(name: Swift.String, absolute: Swift.Bool) -> VideoSDKRTC.AnyMeasureMetric<Swift.Int>
  public func createDoubleMeasure(name: Swift.String, absolute: Swift.Bool) -> VideoSDKRTC.AnyMeasureMetric<Swift.Double>
  public func createIntHistogram(name: Swift.String, explicitBoundaries: Swift.Array<Swift.Int>? = nil, absolute: Swift.Bool) -> VideoSDKRTC.AnyHistogramMetric<Swift.Int>
  public func createDoubleHistogram(name: Swift.String, explicitBoundaries: Swift.Array<Swift.Double>?, absolute: Swift.Bool) -> VideoSDKRTC.AnyHistogramMetric<Swift.Double>
  public func createIntObservableGauge(name: Swift.String, callback: @escaping (any VideoSDKRTC.IntObserverMetric) -> Swift.Void) -> any VideoSDKRTC.IntObserverMetric
  public func createDoubleObservableGauge(name: Swift.String, callback: @escaping (any VideoSDKRTC.DoubleObserverMetric) -> Swift.Void) -> any VideoSDKRTC.DoubleObserverMetric
  public func createIntObserver(name: Swift.String, absolute: Swift.Bool, callback: @escaping (any VideoSDKRTC.IntObserverMetric) -> Swift.Void) -> any VideoSDKRTC.IntObserverMetric
  public func createDoubleObserver(name: Swift.String, absolute: Swift.Bool, callback: @escaping (any VideoSDKRTC.DoubleObserverMetric) -> Swift.Void) -> any VideoSDKRTC.DoubleObserverMetric
}
@_hasMissingDesignatedInitializers public class PubSub {
  @objc deinit
}
extension VideoSDKRTC.PubSub {
  public func publish(topic: Swift.String, message: Swift.String, options: [Swift.String : Any] = [:])
  public func subscribe(topic: Swift.String, forListener listener: any VideoSDKRTC.PubSubMessageListener)
  public func unsubscribe(topic: Swift.String, forListener listener: any VideoSDKRTC.PubSubMessageListener)
  public func getMessagesForTopic(_ topic: Swift.String) -> [VideoSDKRTC.PubSubMessage]
}
@objc @_hasMissingDesignatedInitializers public class PubSubMessage : ObjectiveC.NSObject {
  public var id: Swift.String
  public var topic: Swift.String
  public var message: Swift.String
  public var senderId: Swift.String
  public var senderName: Swift.String
  public var timestamp: Swift.String
  @objc deinit
}
public protocol PubSubMessageListener {
  func onMessageReceived(_ message: VideoSDKRTC.PubSubMessage)
}
public protocol ExtensibleMessage : VideoSDKRTC.Message {
  var _protobuf_extensionFieldValues: VideoSDKRTC.ExtensionFieldValueSet { get set }
}
extension VideoSDKRTC.ExtensibleMessage {
  public mutating func setExtensionValue<F>(ext: VideoSDKRTC.MessageExtension<F, Self>, value: F.ValueType) where F : VideoSDKRTC.ExtensionField
  public func getExtensionValue<F>(ext: VideoSDKRTC.MessageExtension<F, Self>) -> F.ValueType? where F : VideoSDKRTC.ExtensionField
  public func hasExtensionValue<F>(ext: VideoSDKRTC.MessageExtension<F, Self>) -> Swift.Bool where F : VideoSDKRTC.ExtensionField
  public mutating func clearExtensionValue<F>(ext: VideoSDKRTC.MessageExtension<F, Self>) where F : VideoSDKRTC.ExtensionField
}
extension VideoSDKRTC.ExtensibleMessage {
  public mutating func setExtensionValue<T>(ext: VideoSDKRTC.MessageExtension<VideoSDKRTC.RepeatedExtensionField<T>, Self>, value: [T.BaseType]) where T : VideoSDKRTC.FieldType
  public mutating func setExtensionValue<T>(ext: VideoSDKRTC.MessageExtension<VideoSDKRTC.PackedExtensionField<T>, Self>, value: [T.BaseType]) where T : VideoSDKRTC.FieldType
  public mutating func setExtensionValue<E>(ext: VideoSDKRTC.MessageExtension<VideoSDKRTC.RepeatedEnumExtensionField<E>, Self>, value: [E]) where E : VideoSDKRTC.Enum, E.RawValue == Swift.Int
  public mutating func setExtensionValue<E>(ext: VideoSDKRTC.MessageExtension<VideoSDKRTC.PackedEnumExtensionField<E>, Self>, value: [E]) where E : VideoSDKRTC.Enum, E.RawValue == Swift.Int
  public mutating func setExtensionValue<M>(ext: VideoSDKRTC.MessageExtension<VideoSDKRTC.RepeatedMessageExtensionField<M>, Self>, value: [M]) where M : Swift.Equatable, M : VideoSDKRTC.Message
  public mutating func setExtensionValue<M>(ext: VideoSDKRTC.MessageExtension<VideoSDKRTC.RepeatedGroupExtensionField<M>, Self>, value: [M]) where M : Swift.Hashable, M : VideoSDKRTC.Message
}
public protocol SwiftProtobufContiguousBytes {
  init(repeating: Swift.UInt8, count: Swift.Int)
  init<S>(_ sequence: S) where S : Swift.Sequence, S.Element == Swift.UInt8
  var count: Swift.Int { get }
  func withUnsafeBytes<R>(_ body: (Swift.UnsafeRawBufferPointer) throws -> R) rethrows -> R
  mutating func withUnsafeMutableBytes<R>(_ body: (Swift.UnsafeMutableRawBufferPointer) throws -> R) rethrows -> R
}
extension Swift.Array : VideoSDKRTC.SwiftProtobufContiguousBytes where Element == Swift.UInt8 {
}
extension Foundation.Data : VideoSDKRTC.SwiftProtobufContiguousBytes {
}
public struct RandomIdGenerator : VideoSDKRTC.IdGenerator {
  public init()
  public func generateSpanId() -> VideoSDKRTC.SpanId
  public func generateTraceId() -> VideoSDKRTC.TraceId
}
public protocol RawCounterMetric {
  associatedtype T
  func record(sum: Self.T, startDate: Foundation.Date, endDate: Foundation.Date, labels: [Swift.String : Swift.String])
  func record(sum: Self.T, startDate: Foundation.Date, endDate: Foundation.Date, labelset: VideoSDKRTC.LabelSet)
  func bind(labelset: VideoSDKRTC.LabelSet) -> VideoSDKRTC.BoundRawCounterMetric<Self.T>
  func bind(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.BoundRawCounterMetric<Self.T>
}
public struct AnyRawCounterMetric<T> : VideoSDKRTC.RawCounterMetric {
  public init<U>(_ countable: U) where T == U.T, U : VideoSDKRTC.RawCounterMetric
  public func bind(labelset: VideoSDKRTC.LabelSet) -> VideoSDKRTC.BoundRawCounterMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.BoundRawCounterMetric<T>
  public func record(sum: T, startDate: Foundation.Date, endDate: Foundation.Date, labelset: VideoSDKRTC.LabelSet)
  public func record(sum: T, startDate: Foundation.Date, endDate: Foundation.Date, labels: [Swift.String : Swift.String])
}
public struct NoopRawCounterMetric<T> : VideoSDKRTC.RawCounterMetric {
  public func record(sum: T, startDate: Foundation.Date, endDate: Foundation.Date, labels: [Swift.String : Swift.String])
  public func record(sum: T, startDate: Foundation.Date, endDate: Foundation.Date, labelset: VideoSDKRTC.LabelSet)
  public func bind(labelset: VideoSDKRTC.LabelSet) -> VideoSDKRTC.BoundRawCounterMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.BoundRawCounterMetric<T>
}
public enum BinaryEncodingError : Swift.Error {
  case anyTranscodeFailure
  case missingRequiredFields
  case tooLarge
  public static func == (a: VideoSDKRTC.BinaryEncodingError, b: VideoSDKRTC.BinaryEncodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RawHistogramMetric {
  associatedtype T
  func bind(labelset: VideoSDKRTC.LabelSet) -> VideoSDKRTC.BoundRawHistogramMetric<Self.T>
  func bind(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.BoundRawHistogramMetric<Self.T>
  func record(explicitBoundaries: Swift.Array<Self.T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: Self.T, labelset: VideoSDKRTC.LabelSet)
  func record(explicitBoundaries: Swift.Array<Self.T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: Self.T, labels: [Swift.String : Swift.String])
}
public struct AnyRawHistogramMetric<T> : VideoSDKRTC.RawHistogramMetric {
  public init<U>(_ histogram: U) where T == U.T, U : VideoSDKRTC.RawHistogramMetric
  public func bind(labelset: VideoSDKRTC.LabelSet) -> VideoSDKRTC.BoundRawHistogramMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.BoundRawHistogramMetric<T>
  public func record(explicitBoundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: T, labels: [Swift.String : Swift.String])
  public func record(explicitBoundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: T, labelset: VideoSDKRTC.LabelSet)
}
public struct NoopRawHistogramMetric<T> : VideoSDKRTC.RawHistogramMetric {
  public func record(explicitBoundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: T, labelset: VideoSDKRTC.LabelSet)
  public func record(explicitBoundaries: Swift.Array<T>, counts: Swift.Array<Swift.Int>, startDate: Foundation.Date, endDate: Foundation.Date, count: Swift.Int, sum: T, labels: [Swift.String : Swift.String])
  public init()
  public func bind(labelset: VideoSDKRTC.LabelSet) -> VideoSDKRTC.BoundRawHistogramMetric<T>
  public func bind(labels: [Swift.String : Swift.String]) -> VideoSDKRTC.BoundRawHistogramMetric<T>
}
public struct ReadableLogRecord : Swift.Codable {
  public init(resource: VideoSDKRTC.Resource, instrumentationScopeInfo: VideoSDKRTC.InstrumentationScopeInfo, timestamp: Foundation.Date, observedTimestamp: Foundation.Date? = nil, spanContext: VideoSDKRTC.SpanContext? = nil, severity: VideoSDKRTC.Severity? = nil, body: Swift.String? = nil, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  public var resource: VideoSDKRTC.Resource {
    get
  }
  public var instrumentationScopeInfo: VideoSDKRTC.InstrumentationScopeInfo {
    get
  }
  public var timestamp: Foundation.Date {
    get
  }
  public var observedTimestamp: Foundation.Date? {
    get
  }
  public var spanContext: VideoSDKRTC.SpanContext? {
    get
  }
  public var severity: VideoSDKRTC.Severity? {
    get
  }
  public var body: Swift.String? {
    get
  }
  public var attributes: [Swift.String : VideoSDKRTC.AttributeValue] {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ReadableSpan : VideoSDKRTC.Span {
  var name: Swift.String { get set }
  var instrumentationScopeInfo: VideoSDKRTC.InstrumentationScopeInfo { get }
  func toSpanData() -> VideoSDKRTC.SpanData
  var hasEnded: Swift.Bool { get }
  var latency: Foundation.TimeInterval { get }
}
@_hasMissingDesignatedInitializers public class RecordEventsReadableSpan : VideoSDKRTC.ReadableSpan {
  public var isRecording: Swift.Bool
  public var name: Swift.String {
    get
    set
  }
  public var spanLimits: VideoSDKRTC.SpanLimits {
    get
  }
  public var context: VideoSDKRTC.SpanContext {
    get
  }
  public var parentContext: VideoSDKRTC.SpanContext? {
    get
  }
  public var hasRemoteParent: Swift.Bool {
    get
  }
  public var spanProcessor: any VideoSDKRTC.SpanProcessor {
    get
  }
  public var links: [VideoSDKRTC.SpanData.Link] {
    get
  }
  public var totalRecordedLinks: Swift.Int {
    get
  }
  public var maxNumberOfAttributes: Swift.Int {
    get
  }
  public var maxNumberOfAttributesPerEvent: Swift.Int {
    get
  }
  public var kind: VideoSDKRTC.SpanKind {
    get
  }
  public var clock: any VideoSDKRTC.Clock {
    get
  }
  public var resource: VideoSDKRTC.Resource {
    get
  }
  public var instrumentationScopeInfo: VideoSDKRTC.InstrumentationScopeInfo {
    get
  }
  public var startTime: Foundation.Date {
    get
  }
  public var events: VideoSDKRTC.ArrayWithCapacity<VideoSDKRTC.SpanData.Event> {
    get
  }
  public var totalAttributeCount: Swift.Int {
    get
  }
  public var totalRecordedEvents: Swift.Int {
    get
  }
  public var status: VideoSDKRTC.Status {
    get
    set
  }
  public var latency: Foundation.TimeInterval {
    get
  }
  public var endTime: Foundation.Date? {
    get
  }
  public var hasEnded: Swift.Bool {
    get
  }
  public static func startSpan(context: VideoSDKRTC.SpanContext, name: Swift.String, instrumentationScopeInfo: VideoSDKRTC.InstrumentationScopeInfo, kind: VideoSDKRTC.SpanKind, parentContext: VideoSDKRTC.SpanContext?, hasRemoteParent: Swift.Bool, spanLimits: VideoSDKRTC.SpanLimits, spanProcessor: any VideoSDKRTC.SpanProcessor, clock: any VideoSDKRTC.Clock, resource: VideoSDKRTC.Resource, attributes: VideoSDKRTC.AttributesDictionary, links: [VideoSDKRTC.SpanData.Link], totalRecordedLinks: Swift.Int, startTime: Foundation.Date?) -> VideoSDKRTC.RecordEventsReadableSpan
  public func toSpanData() -> VideoSDKRTC.SpanData
  public func setAttribute(key: Swift.String, value: VideoSDKRTC.AttributeValue?)
  public func addEvent(name: Swift.String)
  public func addEvent(name: Swift.String, timestamp: Foundation.Date)
  public func addEvent(name: Swift.String, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  public func addEvent(name: Swift.String, attributes: [Swift.String : VideoSDKRTC.AttributeValue], timestamp: Foundation.Date)
  public func end()
  public func end(time: Foundation.Date)
  public var description: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RegisteredReader : Swift.Equatable, Swift.Hashable {
  final public let id: Swift.Int32
  final public let reader: any VideoSDKRTC.StableMetricReader
  final public let registry: VideoSDKRTC.StableViewRegistry
  public var lastCollectedEpochNanos: Swift.UInt64
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: VideoSDKRTC.RegisteredReader, rhs: VideoSDKRTC.RegisteredReader) -> Swift.Bool
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RegisteredView {
  public var selector: VideoSDKRTC.InstrumentSelector {
    get
  }
  public var view: VideoSDKRTC.StableView {
    get
  }
  public var attributeProcessor: VideoSDKRTC.AttributeProcessor {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ReservoirCell {
  @objc deinit
}
extension VideoSDKRTC.Google_Protobuf_Duration {
  public init(seconds: Swift.Int64 = 0, nanos: Swift.Int32 = 0)
}
extension VideoSDKRTC.Google_Protobuf_Duration : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
  public init(floatLiteral value: Swift.Double)
}
extension VideoSDKRTC.Google_Protobuf_Duration {
  public init(timeInterval: Foundation.TimeInterval)
  public var timeInterval: Foundation.TimeInterval {
    get
  }
}
prefix public func - (operand: VideoSDKRTC.Google_Protobuf_Duration) -> VideoSDKRTC.Google_Protobuf_Duration
public func + (lhs: VideoSDKRTC.Google_Protobuf_Duration, rhs: VideoSDKRTC.Google_Protobuf_Duration) -> VideoSDKRTC.Google_Protobuf_Duration
public func - (lhs: VideoSDKRTC.Google_Protobuf_Duration, rhs: VideoSDKRTC.Google_Protobuf_Duration) -> VideoSDKRTC.Google_Protobuf_Duration
public func - (lhs: VideoSDKRTC.Google_Protobuf_Timestamp, rhs: VideoSDKRTC.Google_Protobuf_Timestamp) -> VideoSDKRTC.Google_Protobuf_Duration
public struct Google_Protobuf_FileDescriptorSet {
  public var file: [VideoSDKRTC.Google_Protobuf_FileDescriptorProto]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_FileDescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var package: Swift.String {
    get
    set
  }
  public var hasPackage: Swift.Bool {
    get
  }
  public mutating func clearPackage()
  public var dependency: [Swift.String]
  public var publicDependency: [Swift.Int32]
  public var weakDependency: [Swift.Int32]
  public var messageType: [VideoSDKRTC.Google_Protobuf_DescriptorProto]
  public var enumType: [VideoSDKRTC.Google_Protobuf_EnumDescriptorProto]
  public var service: [VideoSDKRTC.Google_Protobuf_ServiceDescriptorProto]
  public var `extension`: [VideoSDKRTC.Google_Protobuf_FieldDescriptorProto]
  public var options: VideoSDKRTC.Google_Protobuf_FileOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var sourceCodeInfo: VideoSDKRTC.Google_Protobuf_SourceCodeInfo {
    get
    set
  }
  public var hasSourceCodeInfo: Swift.Bool {
    get
  }
  public mutating func clearSourceCodeInfo()
  public var syntax: Swift.String {
    get
    set
  }
  public var hasSyntax: Swift.Bool {
    get
  }
  public mutating func clearSyntax()
  public var edition: Swift.String {
    get
    set
  }
  public var hasEdition: Swift.Bool {
    get
  }
  public mutating func clearEdition()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_DescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var field: [VideoSDKRTC.Google_Protobuf_FieldDescriptorProto]
  public var `extension`: [VideoSDKRTC.Google_Protobuf_FieldDescriptorProto]
  public var nestedType: [VideoSDKRTC.Google_Protobuf_DescriptorProto]
  public var enumType: [VideoSDKRTC.Google_Protobuf_EnumDescriptorProto]
  public var extensionRange: [VideoSDKRTC.Google_Protobuf_DescriptorProto.ExtensionRange]
  public var oneofDecl: [VideoSDKRTC.Google_Protobuf_OneofDescriptorProto]
  public var options: VideoSDKRTC.Google_Protobuf_MessageOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var reservedRange: [VideoSDKRTC.Google_Protobuf_DescriptorProto.ReservedRange]
  public var reservedName: [Swift.String]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public struct ExtensionRange {
    public var start: Swift.Int32 {
      get
      set
    }
    public var hasStart: Swift.Bool {
      get
    }
    public mutating func clearStart()
    public var end: Swift.Int32 {
      get
      set
    }
    public var hasEnd: Swift.Bool {
      get
    }
    public mutating func clearEnd()
    public var options: VideoSDKRTC.Google_Protobuf_ExtensionRangeOptions {
      get
      set
    }
    public var hasOptions: Swift.Bool {
      get
    }
    public mutating func clearOptions()
    public var unknownFields: VideoSDKRTC.UnknownStorage
    public init()
  }
  public struct ReservedRange {
    public var start: Swift.Int32 {
      get
      set
    }
    public var hasStart: Swift.Bool {
      get
    }
    public mutating func clearStart()
    public var end: Swift.Int32 {
      get
      set
    }
    public var hasEnd: Swift.Bool {
      get
    }
    public mutating func clearEnd()
    public var unknownFields: VideoSDKRTC.UnknownStorage
    public init()
  }
  public init()
}
public struct Google_Protobuf_ExtensionRangeOptions : VideoSDKRTC.ExtensibleMessage {
  public var uninterpretedOption: [VideoSDKRTC.Google_Protobuf_UninterpretedOption]
  public var declaration: [VideoSDKRTC.Google_Protobuf_ExtensionRangeOptions.Declaration]
  public var features: VideoSDKRTC.Google_Protobuf_FeatureSet {
    get
    set
  }
  public var hasFeatures: Swift.Bool {
    get
  }
  public mutating func clearFeatures()
  public var verification: VideoSDKRTC.Google_Protobuf_ExtensionRangeOptions.VerificationState {
    get
    set
  }
  public var hasVerification: Swift.Bool {
    get
  }
  public mutating func clearVerification()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public enum VerificationState : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case declaration
    case unverified
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_ExtensionRangeOptions.VerificationState]
    public static var allCases: [VideoSDKRTC.Google_Protobuf_ExtensionRangeOptions.VerificationState] {
      get
    }
  }
  public struct Declaration {
    public var number: Swift.Int32 {
      get
      set
    }
    public var hasNumber: Swift.Bool {
      get
    }
    public mutating func clearNumber()
    public var fullName: Swift.String {
      get
      set
    }
    public var hasFullName: Swift.Bool {
      get
    }
    public mutating func clearFullName()
    public var type: Swift.String {
      get
      set
    }
    public var hasType: Swift.Bool {
      get
    }
    public mutating func clearType()
    public var reserved: Swift.Bool {
      get
      set
    }
    public var hasReserved: Swift.Bool {
      get
    }
    public mutating func clearReserved()
    public var repeated: Swift.Bool {
      get
      set
    }
    public var hasRepeated: Swift.Bool {
      get
    }
    public mutating func clearRepeated()
    public var unknownFields: VideoSDKRTC.UnknownStorage
    public init()
  }
  public init()
  public var _protobuf_extensionFieldValues: VideoSDKRTC.ExtensionFieldValueSet
}
public struct Google_Protobuf_FieldDescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var number: Swift.Int32 {
    get
    set
  }
  public var hasNumber: Swift.Bool {
    get
  }
  public mutating func clearNumber()
  public var label: VideoSDKRTC.Google_Protobuf_FieldDescriptorProto.Label {
    get
    set
  }
  public var hasLabel: Swift.Bool {
    get
  }
  public mutating func clearLabel()
  public var type: VideoSDKRTC.Google_Protobuf_FieldDescriptorProto.TypeEnum {
    get
    set
  }
  public var hasType: Swift.Bool {
    get
  }
  public mutating func clearType()
  public var typeName: Swift.String {
    get
    set
  }
  public var hasTypeName: Swift.Bool {
    get
  }
  public mutating func clearTypeName()
  public var extendee: Swift.String {
    get
    set
  }
  public var hasExtendee: Swift.Bool {
    get
  }
  public mutating func clearExtendee()
  public var defaultValue: Swift.String {
    get
    set
  }
  public var hasDefaultValue: Swift.Bool {
    get
  }
  public mutating func clearDefaultValue()
  public var oneofIndex: Swift.Int32 {
    get
    set
  }
  public var hasOneofIndex: Swift.Bool {
    get
  }
  public mutating func clearOneofIndex()
  public var jsonName: Swift.String {
    get
    set
  }
  public var hasJsonName: Swift.Bool {
    get
  }
  public mutating func clearJsonName()
  public var options: VideoSDKRTC.Google_Protobuf_FieldOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var proto3Optional: Swift.Bool {
    get
    set
  }
  public var hasProto3Optional: Swift.Bool {
    get
  }
  public mutating func clearProto3Optional()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public enum TypeEnum : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case double
    case float
    case int64
    case uint64
    case int32
    case fixed64
    case fixed32
    case bool
    case string
    case group
    case message
    case bytes
    case uint32
    case `enum`
    case sfixed32
    case sfixed64
    case sint32
    case sint64
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_FieldDescriptorProto.TypeEnum]
    public static var allCases: [VideoSDKRTC.Google_Protobuf_FieldDescriptorProto.TypeEnum] {
      get
    }
  }
  public enum Label : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case optional
    case required
    case repeated
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_FieldDescriptorProto.Label]
    public static var allCases: [VideoSDKRTC.Google_Protobuf_FieldDescriptorProto.Label] {
      get
    }
  }
  public init()
}
public struct Google_Protobuf_OneofDescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var options: VideoSDKRTC.Google_Protobuf_OneofOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_EnumDescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var value: [VideoSDKRTC.Google_Protobuf_EnumValueDescriptorProto]
  public var options: VideoSDKRTC.Google_Protobuf_EnumOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var reservedRange: [VideoSDKRTC.Google_Protobuf_EnumDescriptorProto.EnumReservedRange]
  public var reservedName: [Swift.String]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public struct EnumReservedRange {
    public var start: Swift.Int32 {
      get
      set
    }
    public var hasStart: Swift.Bool {
      get
    }
    public mutating func clearStart()
    public var end: Swift.Int32 {
      get
      set
    }
    public var hasEnd: Swift.Bool {
      get
    }
    public mutating func clearEnd()
    public var unknownFields: VideoSDKRTC.UnknownStorage
    public init()
  }
  public init()
}
public struct Google_Protobuf_EnumValueDescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var number: Swift.Int32 {
    get
    set
  }
  public var hasNumber: Swift.Bool {
    get
  }
  public mutating func clearNumber()
  public var options: VideoSDKRTC.Google_Protobuf_EnumValueOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_ServiceDescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var method: [VideoSDKRTC.Google_Protobuf_MethodDescriptorProto]
  public var options: VideoSDKRTC.Google_Protobuf_ServiceOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_MethodDescriptorProto {
  public var name: Swift.String {
    get
    set
  }
  public var hasName: Swift.Bool {
    get
  }
  public mutating func clearName()
  public var inputType: Swift.String {
    get
    set
  }
  public var hasInputType: Swift.Bool {
    get
  }
  public mutating func clearInputType()
  public var outputType: Swift.String {
    get
    set
  }
  public var hasOutputType: Swift.Bool {
    get
  }
  public mutating func clearOutputType()
  public var options: VideoSDKRTC.Google_Protobuf_MethodOptions {
    get
    set
  }
  public var hasOptions: Swift.Bool {
    get
  }
  public mutating func clearOptions()
  public var clientStreaming: Swift.Bool {
    get
    set
  }
  public var hasClientStreaming: Swift.Bool {
    get
  }
  public mutating func clearClientStreaming()
  public var serverStreaming: Swift.Bool {
    get
    set
  }
  public var hasServerStreaming: Swift.Bool {
    get
  }
  public mutating func clearServerStreaming()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_FileOptions : VideoSDKRTC.ExtensibleMessage {
  public var javaPackage: Swift.String {
    get
    set
  }
  public var hasJavaPackage: Swift.Bool {
    get
  }
  public mutating func clearJavaPackage()
  public var javaOuterClassname: Swift.String {
    get
    set
  }
  public var hasJavaOuterClassname: Swift.Bool {
    get
  }
  public mutating func clearJavaOuterClassname()
  public var javaMultipleFiles: Swift.Bool {
    get
    set
  }
  public var hasJavaMultipleFiles: Swift.Bool {
    get
  }
  public mutating func clearJavaMultipleFiles()
  public var javaGenerateEqualsAndHash: Swift.Bool {
    get
    set
  }
  public var hasJavaGenerateEqualsAndHash: Swift.Bool {
    get
  }
  public mutating func clearJavaGenerateEqualsAndHash()
  public var javaStringCheckUtf8: Swift.Bool {
    get
    set
  }
  public var hasJavaStringCheckUtf8: Swift.Bool {
    get
  }
  public mutating func clearJavaStringCheckUtf8()
  public var optimizeFor: VideoSDKRTC.Google_Protobuf_FileOptions.OptimizeMode {
    get
    set
  }
  public var hasOptimizeFor: Swift.Bool {
    get
  }
  public mutating func clearOptimizeFor()
  public var goPackage: Swift.String {
    get
    set
  }
  public var hasGoPackage: Swift.Bool {
    get
  }
  public mutating func clearGoPackage()
  public var ccGenericServices: Swift.Bool {
    get
    set
  }
  public var hasCcGenericServices: Swift.Bool {
    get
  }
  public mutating func clearCcGenericServices()
  public var javaGenericServices: Swift.Bool {
    get
    set
  }
  public var hasJavaGenericServices: Swift.Bool {
    get
  }
  public mutating func clearJavaGenericServices()
  public var pyGenericServices: Swift.Bool {
    get
    set
  }
  public var hasPyGenericServices: Swift.Bool {
    get
  }
  public mutating func clearPyGenericServices()
  public var phpGenericServices: Swift.Bool {
    get
    set
  }
  public var hasPhpGenericServices: Swift.Bool {
    get
  }
  public mutating func clearPhpGenericServices()
  public var deprecated: Swift.Bool {
    get
    set
  }
  public var hasDeprecated: Swift.Bool {
    get
  }
  public mutating func clearDeprecated()
  public var ccEnableArenas: Swift.Bool {
    get
    set
  }
  public var hasCcEnableArenas: Swift.Bool {
    get
  }
  public mutating func clearCcEnableArenas()
  public var objcClassPrefix: Swift.String {
    get
    set
  }
  public var hasObjcClassPrefix: Swift.Bool {
    get
  }
  public mutating func clearObjcClassPrefix()
  public var csharpNamespace: Swift.String {
    get
    set
  }
  public var hasCsharpNamespace: Swift.Bool {
    get
  }
  public mutating func clearCsharpNamespace()
  public var swiftPrefix: Swift.String {
    get
    set
  }
  public var hasSwiftPrefix: Swift.Bool {
    get
  }
  public mutating func clearSwiftPrefix()
  public var phpClassPrefix: Swift.String {
    get
    set
  }
  public var hasPhpClassPrefix: Swift.Bool {
    get
  }
  public mutating func clearPhpClassPrefix()
  public var phpNamespace: Swift.String {
    get
    set
  }
  public var hasPhpNamespace: Swift.Bool {
    get
  }
  public mutating func clearPhpNamespace()
  public var phpMetadataNamespace: Swift.String {
    get
    set
  }
  public var hasPhpMetadataNamespace: Swift.Bool {
    get
  }
  public mutating func clearPhpMetadataNamespace()
  public var rubyPackage: Swift.String {
    get
    set
  }
  public var hasRubyPackage: Swift.Bool {
    get
  }
  public mutating func clearRubyPackage()
  public var features: VideoSDKRTC.Google_Protobuf_FeatureSet {
    get
    set
  }
  public var hasFeatures: Swift.Bool {
    get
  }
  public mutating func clearFeatures()
  public var uninterpretedOption: [VideoSDKRTC.Google_Protobuf_UninterpretedOption] {
    get
    set
  }
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public enum OptimizeMode : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case speed
    case codeSize
    case liteRuntime
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_FileOptions.OptimizeMode]
    public static var allCases: [VideoSDKRTC.Google_Protobuf_FileOptions.OptimizeMode] {
      get
    }
  }
  public init()
  public var _protobuf_extensionFieldValues: VideoSDKRTC.ExtensionFieldValueSet
}
public struct Google_Protobuf_MessageOptions : VideoSDKRTC.ExtensibleMessage {
  public var messageSetWireFormat: Swift.Bool {
    get
    set
  }
  public var hasMessageSetWireFormat: Swift.Bool {
    get
  }
  public mutating func clearMessageSetWireFormat()
  public var noStandardDescriptorAccessor: Swift.Bool {
    get
    set
  }
  public var hasNoStandardDescriptorAccessor: Swift.Bool {
    get
  }
  public mutating func clearNoStandardDescriptorAccessor()
  public var deprecated: Swift.Bool {
    get
    set
  }
  public var hasDeprecated: Swift.Bool {
    get
  }
  public mutating func clearDeprecated()
  public var mapEntry: Swift.Bool {
    get
    set
  }
  public var hasMapEntry: Swift.Bool {
    get
  }
  public mutating func clearMapEntry()
  public var deprecatedLegacyJsonFieldConflicts: Swift.Bool {
    get
    set
  }
  public var hasDeprecatedLegacyJsonFieldConflicts: Swift.Bool {
    get
  }
  public mutating func clearDeprecatedLegacyJsonFieldConflicts()
  public var features: VideoSDKRTC.Google_Protobuf_FeatureSet {
    get
    set
  }
  public var hasFeatures: Swift.Bool {
    get
  }
  public mutating func clearFeatures()
  public var uninterpretedOption: [VideoSDKRTC.Google_Protobuf_UninterpretedOption]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
  public var _protobuf_extensionFieldValues: VideoSDKRTC.ExtensionFieldValueSet
}
public struct Google_Protobuf_FieldOptions : VideoSDKRTC.ExtensibleMessage {
  public var ctype: VideoSDKRTC.Google_Protobuf_FieldOptions.CType {
    get
    set
  }
  public var hasCtype: Swift.Bool {
    get
  }
  public mutating func clearCtype()
  public var packed: Swift.Bool {
    get
    set
  }
  public var hasPacked: Swift.Bool {
    get
  }
  public mutating func clearPacked()
  public var jstype: VideoSDKRTC.Google_Protobuf_FieldOptions.JSType {
    get
    set
  }
  public var hasJstype: Swift.Bool {
    get
  }
  public mutating func clearJstype()
  public var lazy: Swift.Bool {
    get
    set
  }
  public var hasLazy: Swift.Bool {
    get
  }
  public mutating func clearLazy()
  public var unverifiedLazy: Swift.Bool {
    get
    set
  }
  public var hasUnverifiedLazy: Swift.Bool {
    get
  }
  public mutating func clearUnverifiedLazy()
  public var deprecated: Swift.Bool {
    get
    set
  }
  public var hasDeprecated: Swift.Bool {
    get
  }
  public mutating func clearDeprecated()
  public var weak: Swift.Bool {
    get
    set
  }
  public var hasWeak: Swift.Bool {
    get
  }
  public mutating func clearWeak()
  public var debugRedact: Swift.Bool {
    get
    set
  }
  public var hasDebugRedact: Swift.Bool {
    get
  }
  public mutating func clearDebugRedact()
  public var retention: VideoSDKRTC.Google_Protobuf_FieldOptions.OptionRetention {
    get
    set
  }
  public var hasRetention: Swift.Bool {
    get
  }
  public mutating func clearRetention()
  public var targets: [VideoSDKRTC.Google_Protobuf_FieldOptions.OptionTargetType]
  public var editionDefaults: [VideoSDKRTC.Google_Protobuf_FieldOptions.EditionDefault]
  public var features: VideoSDKRTC.Google_Protobuf_FeatureSet {
    get
    set
  }
  public var hasFeatures: Swift.Bool {
    get
  }
  public mutating func clearFeatures()
  public var uninterpretedOption: [VideoSDKRTC.Google_Protobuf_UninterpretedOption]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public enum CType : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case string
    case cord
    case stringPiece
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_FieldOptions.CType]
    public static var allCases: [VideoSDKRTC.Google_Protobuf_FieldOptions.CType] {
      get
    }
  }
  public enum JSType : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case jsNormal
    case jsString
    case jsNumber
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_FieldOptions.JSType]
    public static var allCases: [VideoSDKRTC.Google_Protobuf_FieldOptions.JSType] {
      get
    }
  }
  public enum OptionRetention : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case retentionUnknown
    case retentionRuntime
    case retentionSource
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_FieldOptions.OptionRetention]
    public static var allCases: [VideoSDKRTC.Google_Protobuf_FieldOptions.OptionRetention] {
      get
    }
  }
  public enum OptionTargetType : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case targetTypeUnknown
    case targetTypeFile
    case targetTypeExtensionRange
    case targetTypeMessage
    case targetTypeField
    case targetTypeOneof
    case targetTypeEnum
    case targetTypeEnumEntry
    case targetTypeService
    case targetTypeMethod
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_FieldOptions.OptionTargetType]
    public static var allCases: [VideoSDKRTC.Google_Protobuf_FieldOptions.OptionTargetType] {
      get
    }
  }
  public struct EditionDefault {
    public var edition: Swift.String {
      get
      set
    }
    public var hasEdition: Swift.Bool {
      get
    }
    public mutating func clearEdition()
    public var value: Swift.String {
      get
      set
    }
    public var hasValue: Swift.Bool {
      get
    }
    public mutating func clearValue()
    public var unknownFields: VideoSDKRTC.UnknownStorage
    public init()
  }
  public init()
  public var _protobuf_extensionFieldValues: VideoSDKRTC.ExtensionFieldValueSet
}
public struct Google_Protobuf_OneofOptions : VideoSDKRTC.ExtensibleMessage {
  public var features: VideoSDKRTC.Google_Protobuf_FeatureSet {
    get
    set
  }
  public var hasFeatures: Swift.Bool {
    get
  }
  public mutating func clearFeatures()
  public var uninterpretedOption: [VideoSDKRTC.Google_Protobuf_UninterpretedOption]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
  public var _protobuf_extensionFieldValues: VideoSDKRTC.ExtensionFieldValueSet
}
public struct Google_Protobuf_EnumOptions : VideoSDKRTC.ExtensibleMessage {
  public var allowAlias: Swift.Bool {
    get
    set
  }
  public var hasAllowAlias: Swift.Bool {
    get
  }
  public mutating func clearAllowAlias()
  public var deprecated: Swift.Bool {
    get
    set
  }
  public var hasDeprecated: Swift.Bool {
    get
  }
  public mutating func clearDeprecated()
  public var deprecatedLegacyJsonFieldConflicts: Swift.Bool {
    get
    set
  }
  public var hasDeprecatedLegacyJsonFieldConflicts: Swift.Bool {
    get
  }
  public mutating func clearDeprecatedLegacyJsonFieldConflicts()
  public var features: VideoSDKRTC.Google_Protobuf_FeatureSet {
    get
    set
  }
  public var hasFeatures: Swift.Bool {
    get
  }
  public mutating func clearFeatures()
  public var uninterpretedOption: [VideoSDKRTC.Google_Protobuf_UninterpretedOption]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
  public var _protobuf_extensionFieldValues: VideoSDKRTC.ExtensionFieldValueSet
}
public struct Google_Protobuf_EnumValueOptions : VideoSDKRTC.ExtensibleMessage {
  public var deprecated: Swift.Bool {
    get
    set
  }
  public var hasDeprecated: Swift.Bool {
    get
  }
  public mutating func clearDeprecated()
  public var features: VideoSDKRTC.Google_Protobuf_FeatureSet {
    get
    set
  }
  public var hasFeatures: Swift.Bool {
    get
  }
  public mutating func clearFeatures()
  public var debugRedact: Swift.Bool {
    get
    set
  }
  public var hasDebugRedact: Swift.Bool {
    get
  }
  public mutating func clearDebugRedact()
  public var uninterpretedOption: [VideoSDKRTC.Google_Protobuf_UninterpretedOption]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
  public var _protobuf_extensionFieldValues: VideoSDKRTC.ExtensionFieldValueSet
}
public struct Google_Protobuf_ServiceOptions : VideoSDKRTC.ExtensibleMessage {
  public var features: VideoSDKRTC.Google_Protobuf_FeatureSet {
    get
    set
  }
  public var hasFeatures: Swift.Bool {
    get
  }
  public mutating func clearFeatures()
  public var deprecated: Swift.Bool {
    get
    set
  }
  public var hasDeprecated: Swift.Bool {
    get
  }
  public mutating func clearDeprecated()
  public var uninterpretedOption: [VideoSDKRTC.Google_Protobuf_UninterpretedOption]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
  public var _protobuf_extensionFieldValues: VideoSDKRTC.ExtensionFieldValueSet
}
public struct Google_Protobuf_MethodOptions : VideoSDKRTC.ExtensibleMessage {
  public var deprecated: Swift.Bool {
    get
    set
  }
  public var hasDeprecated: Swift.Bool {
    get
  }
  public mutating func clearDeprecated()
  public var idempotencyLevel: VideoSDKRTC.Google_Protobuf_MethodOptions.IdempotencyLevel {
    get
    set
  }
  public var hasIdempotencyLevel: Swift.Bool {
    get
  }
  public mutating func clearIdempotencyLevel()
  public var features: VideoSDKRTC.Google_Protobuf_FeatureSet {
    get
    set
  }
  public var hasFeatures: Swift.Bool {
    get
  }
  public mutating func clearFeatures()
  public var uninterpretedOption: [VideoSDKRTC.Google_Protobuf_UninterpretedOption]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public enum IdempotencyLevel : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case idempotencyUnknown
    case noSideEffects
    case idempotent
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_MethodOptions.IdempotencyLevel]
    public static var allCases: [VideoSDKRTC.Google_Protobuf_MethodOptions.IdempotencyLevel] {
      get
    }
  }
  public init()
  public var _protobuf_extensionFieldValues: VideoSDKRTC.ExtensionFieldValueSet
}
public struct Google_Protobuf_UninterpretedOption {
  public var name: [VideoSDKRTC.Google_Protobuf_UninterpretedOption.NamePart]
  public var identifierValue: Swift.String {
    get
    set
  }
  public var hasIdentifierValue: Swift.Bool {
    get
  }
  public mutating func clearIdentifierValue()
  public var positiveIntValue: Swift.UInt64 {
    get
    set
  }
  public var hasPositiveIntValue: Swift.Bool {
    get
  }
  public mutating func clearPositiveIntValue()
  public var negativeIntValue: Swift.Int64 {
    get
    set
  }
  public var hasNegativeIntValue: Swift.Bool {
    get
  }
  public mutating func clearNegativeIntValue()
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var hasDoubleValue: Swift.Bool {
    get
  }
  public mutating func clearDoubleValue()
  public var stringValue: Foundation.Data {
    get
    set
  }
  public var hasStringValue: Swift.Bool {
    get
  }
  public mutating func clearStringValue()
  public var aggregateValue: Swift.String {
    get
    set
  }
  public var hasAggregateValue: Swift.Bool {
    get
  }
  public mutating func clearAggregateValue()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public struct NamePart {
    public var namePart: Swift.String {
      get
      set
    }
    public var hasNamePart: Swift.Bool {
      get
    }
    public mutating func clearNamePart()
    public var isExtension: Swift.Bool {
      get
      set
    }
    public var hasIsExtension: Swift.Bool {
      get
    }
    public mutating func clearIsExtension()
    public var unknownFields: VideoSDKRTC.UnknownStorage
    public init()
  }
  public init()
}
public struct Google_Protobuf_FeatureSet : VideoSDKRTC.ExtensibleMessage {
  public var fieldPresence: VideoSDKRTC.Google_Protobuf_FeatureSet.FieldPresence {
    get
    set
  }
  public var hasFieldPresence: Swift.Bool {
    get
  }
  public mutating func clearFieldPresence()
  public var enumType: VideoSDKRTC.Google_Protobuf_FeatureSet.EnumType {
    get
    set
  }
  public var hasEnumType: Swift.Bool {
    get
  }
  public mutating func clearEnumType()
  public var repeatedFieldEncoding: VideoSDKRTC.Google_Protobuf_FeatureSet.RepeatedFieldEncoding {
    get
    set
  }
  public var hasRepeatedFieldEncoding: Swift.Bool {
    get
  }
  public mutating func clearRepeatedFieldEncoding()
  public var stringFieldValidation: VideoSDKRTC.Google_Protobuf_FeatureSet.StringFieldValidation {
    get
    set
  }
  public var hasStringFieldValidation: Swift.Bool {
    get
  }
  public mutating func clearStringFieldValidation()
  public var messageEncoding: VideoSDKRTC.Google_Protobuf_FeatureSet.MessageEncoding {
    get
    set
  }
  public var hasMessageEncoding: Swift.Bool {
    get
  }
  public mutating func clearMessageEncoding()
  public var jsonFormat: VideoSDKRTC.Google_Protobuf_FeatureSet.JsonFormat {
    get
    set
  }
  public var hasJsonFormat: Swift.Bool {
    get
  }
  public mutating func clearJsonFormat()
  public var rawFeatures: VideoSDKRTC.Google_Protobuf_FeatureSet {
    get
    set
  }
  public var hasRawFeatures: Swift.Bool {
    get
  }
  public mutating func clearRawFeatures()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public enum FieldPresence : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case unknown
    case explicit
    case implicit
    case legacyRequired
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_FeatureSet.FieldPresence]
    public static var allCases: [VideoSDKRTC.Google_Protobuf_FeatureSet.FieldPresence] {
      get
    }
  }
  public enum EnumType : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case unknown
    case open
    case closed
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_FeatureSet.EnumType]
    public static var allCases: [VideoSDKRTC.Google_Protobuf_FeatureSet.EnumType] {
      get
    }
  }
  public enum RepeatedFieldEncoding : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case unknown
    case packed
    case expanded
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_FeatureSet.RepeatedFieldEncoding]
    public static var allCases: [VideoSDKRTC.Google_Protobuf_FeatureSet.RepeatedFieldEncoding] {
      get
    }
  }
  public enum StringFieldValidation : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case unknown
    case mandatory
    case hint
    case none
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_FeatureSet.StringFieldValidation]
    public static var allCases: [VideoSDKRTC.Google_Protobuf_FeatureSet.StringFieldValidation] {
      get
    }
  }
  public enum MessageEncoding : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case unknown
    case lengthPrefixed
    case delimited
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_FeatureSet.MessageEncoding]
    public static var allCases: [VideoSDKRTC.Google_Protobuf_FeatureSet.MessageEncoding] {
      get
    }
  }
  public enum JsonFormat : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case unknown
    case allow
    case legacyBestEffort
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_FeatureSet.JsonFormat]
    public static var allCases: [VideoSDKRTC.Google_Protobuf_FeatureSet.JsonFormat] {
      get
    }
  }
  public init()
  public var _protobuf_extensionFieldValues: VideoSDKRTC.ExtensionFieldValueSet
}
public struct Google_Protobuf_SourceCodeInfo {
  public var location: [VideoSDKRTC.Google_Protobuf_SourceCodeInfo.Location]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public struct Location {
    public var path: [Swift.Int32]
    public var span: [Swift.Int32]
    public var leadingComments: Swift.String {
      get
      set
    }
    public var hasLeadingComments: Swift.Bool {
      get
    }
    public mutating func clearLeadingComments()
    public var trailingComments: Swift.String {
      get
      set
    }
    public var hasTrailingComments: Swift.Bool {
      get
    }
    public mutating func clearTrailingComments()
    public var leadingDetachedComments: [Swift.String]
    public var unknownFields: VideoSDKRTC.UnknownStorage
    public init()
  }
  public init()
}
public struct Google_Protobuf_GeneratedCodeInfo {
  public var annotation: [VideoSDKRTC.Google_Protobuf_GeneratedCodeInfo.Annotation]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public struct Annotation {
    public var path: [Swift.Int32]
    public var sourceFile: Swift.String {
      get
      set
    }
    public var hasSourceFile: Swift.Bool {
      get
    }
    public mutating func clearSourceFile()
    public var begin: Swift.Int32 {
      get
      set
    }
    public var hasBegin: Swift.Bool {
      get
    }
    public mutating func clearBegin()
    public var end: Swift.Int32 {
      get
      set
    }
    public var hasEnd: Swift.Bool {
      get
    }
    public mutating func clearEnd()
    public var semantic: VideoSDKRTC.Google_Protobuf_GeneratedCodeInfo.Annotation.Semantic {
      get
      set
    }
    public var hasSemantic: Swift.Bool {
      get
    }
    public mutating func clearSemantic()
    public var unknownFields: VideoSDKRTC.UnknownStorage
    public enum Semantic : VideoSDKRTC.Enum {
      public typealias RawValue = Swift.Int
      case none
      case set
      case alias
      public init()
      public init?(rawValue: Swift.Int)
      public var rawValue: Swift.Int {
        get
      }
      public typealias AllCases = [VideoSDKRTC.Google_Protobuf_GeneratedCodeInfo.Annotation.Semantic]
      public static var allCases: [VideoSDKRTC.Google_Protobuf_GeneratedCodeInfo.Annotation.Semantic] {
        get
      }
    }
    public init()
  }
  public init()
}
extension VideoSDKRTC.Google_Protobuf_FileDescriptorSet : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_FileDescriptorProto : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_DescriptorProto : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_DescriptorProto.ExtensionRange : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_DescriptorProto.ReservedRange : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_ExtensionRangeOptions : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_ExtensionRangeOptions.Declaration : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_FieldDescriptorProto : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_OneofDescriptorProto : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_EnumDescriptorProto : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_EnumDescriptorProto.EnumReservedRange : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_EnumValueDescriptorProto : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_ServiceDescriptorProto : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_MethodDescriptorProto : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_FileOptions : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_MessageOptions : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_FieldOptions : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_FieldOptions.EditionDefault : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_OneofOptions : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_EnumOptions : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_EnumValueOptions : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_ServiceOptions : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_MethodOptions : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_UninterpretedOption : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_UninterpretedOption.NamePart : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_FeatureSet : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_SourceCodeInfo : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_SourceCodeInfo.Location : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_GeneratedCodeInfo : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_GeneratedCodeInfo.Annotation : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_FileDescriptorSet : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_FileDescriptorSet, rhs: VideoSDKRTC.Google_Protobuf_FileDescriptorSet) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_FileDescriptorProto : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_FileDescriptorProto, rhs: VideoSDKRTC.Google_Protobuf_FileDescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_DescriptorProto : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_DescriptorProto, rhs: VideoSDKRTC.Google_Protobuf_DescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_DescriptorProto.ExtensionRange : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_DescriptorProto.ExtensionRange, rhs: VideoSDKRTC.Google_Protobuf_DescriptorProto.ExtensionRange) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_DescriptorProto.ReservedRange : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_DescriptorProto.ReservedRange, rhs: VideoSDKRTC.Google_Protobuf_DescriptorProto.ReservedRange) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_ExtensionRangeOptions : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_ExtensionRangeOptions, rhs: VideoSDKRTC.Google_Protobuf_ExtensionRangeOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_ExtensionRangeOptions.VerificationState : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_ExtensionRangeOptions.Declaration : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_ExtensionRangeOptions.Declaration, rhs: VideoSDKRTC.Google_Protobuf_ExtensionRangeOptions.Declaration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_FieldDescriptorProto : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_FieldDescriptorProto, rhs: VideoSDKRTC.Google_Protobuf_FieldDescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_FieldDescriptorProto.TypeEnum : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_FieldDescriptorProto.Label : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_OneofDescriptorProto : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_OneofDescriptorProto, rhs: VideoSDKRTC.Google_Protobuf_OneofDescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_EnumDescriptorProto : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_EnumDescriptorProto, rhs: VideoSDKRTC.Google_Protobuf_EnumDescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_EnumDescriptorProto.EnumReservedRange : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_EnumDescriptorProto.EnumReservedRange, rhs: VideoSDKRTC.Google_Protobuf_EnumDescriptorProto.EnumReservedRange) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_EnumValueDescriptorProto : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_EnumValueDescriptorProto, rhs: VideoSDKRTC.Google_Protobuf_EnumValueDescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_ServiceDescriptorProto : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_ServiceDescriptorProto, rhs: VideoSDKRTC.Google_Protobuf_ServiceDescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_MethodDescriptorProto : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_MethodDescriptorProto, rhs: VideoSDKRTC.Google_Protobuf_MethodDescriptorProto) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_FileOptions : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_FileOptions, rhs: VideoSDKRTC.Google_Protobuf_FileOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_FileOptions.OptimizeMode : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_MessageOptions : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_MessageOptions, rhs: VideoSDKRTC.Google_Protobuf_MessageOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_FieldOptions : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_FieldOptions, rhs: VideoSDKRTC.Google_Protobuf_FieldOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_FieldOptions.CType : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_FieldOptions.JSType : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_FieldOptions.OptionRetention : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_FieldOptions.OptionTargetType : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_FieldOptions.EditionDefault : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_FieldOptions.EditionDefault, rhs: VideoSDKRTC.Google_Protobuf_FieldOptions.EditionDefault) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_OneofOptions : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_OneofOptions, rhs: VideoSDKRTC.Google_Protobuf_OneofOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_EnumOptions : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_EnumOptions, rhs: VideoSDKRTC.Google_Protobuf_EnumOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_EnumValueOptions : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_EnumValueOptions, rhs: VideoSDKRTC.Google_Protobuf_EnumValueOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_ServiceOptions : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_ServiceOptions, rhs: VideoSDKRTC.Google_Protobuf_ServiceOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_MethodOptions : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_MethodOptions, rhs: VideoSDKRTC.Google_Protobuf_MethodOptions) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_MethodOptions.IdempotencyLevel : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_UninterpretedOption : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_UninterpretedOption, rhs: VideoSDKRTC.Google_Protobuf_UninterpretedOption) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_UninterpretedOption.NamePart : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_UninterpretedOption.NamePart, rhs: VideoSDKRTC.Google_Protobuf_UninterpretedOption.NamePart) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_FeatureSet : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public var isInitialized: Swift.Bool {
    get
  }
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_FeatureSet, rhs: VideoSDKRTC.Google_Protobuf_FeatureSet) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_FeatureSet.FieldPresence : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_FeatureSet.EnumType : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_FeatureSet.RepeatedFieldEncoding : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_FeatureSet.StringFieldValidation : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_FeatureSet.MessageEncoding : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_FeatureSet.JsonFormat : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_SourceCodeInfo : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_SourceCodeInfo, rhs: VideoSDKRTC.Google_Protobuf_SourceCodeInfo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_SourceCodeInfo.Location : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_SourceCodeInfo.Location, rhs: VideoSDKRTC.Google_Protobuf_SourceCodeInfo.Location) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_GeneratedCodeInfo : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_GeneratedCodeInfo, rhs: VideoSDKRTC.Google_Protobuf_GeneratedCodeInfo) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_GeneratedCodeInfo.Annotation : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_GeneratedCodeInfo.Annotation, rhs: VideoSDKRTC.Google_Protobuf_GeneratedCodeInfo.Annotation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_GeneratedCodeInfo.Annotation.Semantic : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
public protocol ReservoirCellSelector {
  func reservoirCellIndex(for cells: [VideoSDKRTC.ReservoirCell], value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> Swift.Int
  func reservoirCellIndex(for cells: [VideoSDKRTC.ReservoirCell], value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> Swift.Int
  func reset()
}
public struct _ProtobufMap<KeyType, ValueType> where KeyType : VideoSDKRTC.MapKeyType, ValueType : VideoSDKRTC.FieldType {
  public typealias Key = KeyType.BaseType
  public typealias Value = ValueType.BaseType
  public typealias BaseType = Swift.Dictionary<VideoSDKRTC._ProtobufMap<KeyType, ValueType>.Key, VideoSDKRTC._ProtobufMap<KeyType, ValueType>.Value>
}
public struct _ProtobufMessageMap<KeyType, ValueType> where KeyType : VideoSDKRTC.MapKeyType, ValueType : Swift.Hashable, ValueType : VideoSDKRTC.Message {
  public typealias Key = KeyType.BaseType
  public typealias Value = ValueType
  public typealias BaseType = Swift.Dictionary<VideoSDKRTC._ProtobufMessageMap<KeyType, ValueType>.Key, VideoSDKRTC._ProtobufMessageMap<KeyType, ValueType>.Value>
}
public struct _ProtobufEnumMap<KeyType, ValueType> where KeyType : VideoSDKRTC.MapKeyType, ValueType : VideoSDKRTC.Enum {
  public typealias Key = KeyType.BaseType
  public typealias Value = ValueType
  public typealias BaseType = Swift.Dictionary<VideoSDKRTC._ProtobufEnumMap<KeyType, ValueType>.Key, VideoSDKRTC._ProtobufEnumMap<KeyType, ValueType>.Value>
}
public struct Resource : Swift.Equatable, Swift.Hashable, Swift.Codable {
  public var attributes: [Swift.String : VideoSDKRTC.AttributeValue]
  public init()
  public init(attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  public mutating func merge(other: VideoSDKRTC.Resource)
  public func merging(other: VideoSDKRTC.Resource) -> VideoSDKRTC.Resource
  public static func == (a: VideoSDKRTC.Resource, b: VideoSDKRTC.Resource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct Opentelemetry_Proto_Resource_V1_Resource {
  public var attributes: [VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue]
  public var droppedAttributesCount: Swift.UInt32
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Opentelemetry_Proto_Resource_V1_Resource : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Resource_V1_Resource : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Resource_V1_Resource, rhs: VideoSDKRTC.Opentelemetry_Proto_Resource_V1_Resource) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct ResourceAdapter {
  public static func toProtoResource(resource: VideoSDKRTC.Resource) -> VideoSDKRTC.Opentelemetry_Proto_Resource_V1_Resource
}
public enum ResourceAttributes : Swift.String {
  case browserBrands
  case browserPlatform
  case browserMobile
  case browserLanguage
  case userAgentOriginal
  case cloudProvider
  case cloudAccountId
  case cloudRegion
  case cloudResourceId
  case cloudAvailabilityZone
  case cloudPlatform
  case awsEcsContainerArn
  case awsEcsClusterArn
  case awsEcsLaunchtype
  case awsEcsTaskArn
  case awsEcsTaskFamily
  case awsEcsTaskRevision
  case awsEksClusterArn
  case awsLogGroupNames
  case awsLogGroupArns
  case awsLogStreamNames
  case awsLogStreamArns
  case herokuReleaseCreationTimestamp
  case herokuReleaseCommit
  case herokuAppId
  case containerName
  case containerId
  case containerRuntime
  case containerImageName
  case containerImageTag
  case deploymentEnvironment
  case deviceId
  case deviceModelIdentifier
  case deviceModelName
  case deviceManufacturer
  case faasName
  case faasVersion
  case faasInstance
  case faasMaxMemory
  case hostId
  case hostName
  case hostType
  case hostArch
  case hostImageName
  case hostImageId
  case hostImageVersion
  case k8sClusterName
  case k8sNodeName
  case k8sNodeUid
  case k8sNamespaceName
  case k8sPodUid
  case k8sPodName
  case k8sContainerName
  case k8sContainerRestartCount
  case k8sReplicasetUid
  case k8sReplicasetName
  case k8sDeploymentUid
  case k8sDeploymentName
  case k8sStatefulsetUid
  case k8sStatefulsetName
  case k8sDaemonsetUid
  case k8sDaemonsetName
  case k8sJobUid
  case k8sJobName
  case k8sCronjobUid
  case k8sCronjobName
  case osType
  case osDescription
  case osName
  case osVersion
  case processPid
  case processParentPid
  case processExecutableName
  case processExecutablePath
  case processCommand
  case processCommandLine
  case processCommandArgs
  case processOwner
  case processRuntimeName
  case processRuntimeVersion
  case processRuntimeDescription
  case serviceName
  case serviceNamespace
  case serviceInstanceId
  case serviceVersion
  case telemetrySdkName
  case telemetrySdkLanguage
  case telemetrySdkVersion
  case telemetryAutoVersion
  case webengineName
  case webengineVersion
  case webengineDescription
  case otelScopeName
  case otelScopeVersion
  case otelLibraryName
  case otelLibraryVersion
  public struct CloudProviderValues : Swift.CustomStringConvertible {
    public static let alibabaCloud: VideoSDKRTC.ResourceAttributes.CloudProviderValues
    public static let aws: VideoSDKRTC.ResourceAttributes.CloudProviderValues
    public static let azure: VideoSDKRTC.ResourceAttributes.CloudProviderValues
    public static let gcp: VideoSDKRTC.ResourceAttributes.CloudProviderValues
    public static let heroku: VideoSDKRTC.ResourceAttributes.CloudProviderValues
    public static let ibmCloud: VideoSDKRTC.ResourceAttributes.CloudProviderValues
    public static let tencentCloud: VideoSDKRTC.ResourceAttributes.CloudProviderValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct CloudPlatformValues : Swift.CustomStringConvertible {
    public static let alibabaCloudEcs: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let alibabaCloudFc: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let alibabaCloudOpenshift: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let awsEc2: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let awsEcs: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let awsEks: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let awsLambda: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let awsElasticBeanstalk: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let awsAppRunner: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let awsOpenshift: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let azureVm: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let azureContainerInstances: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let azureAks: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let azureFunctions: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let azureAppService: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let azureOpenshift: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let gcpComputeEngine: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let gcpCloudRun: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let gcpKubernetesEngine: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let gcpCloudFunctions: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let gcpAppEngine: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let gcpOpenshift: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let ibmCloudOpenshift: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let tencentCloudCvm: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let tencentCloudEks: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public static let tencentCloudScf: VideoSDKRTC.ResourceAttributes.CloudPlatformValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public enum AwsEcsLaunchtypeValues : Swift.String {
    case ec2
    case fargate
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct HostArchValues : Swift.CustomStringConvertible {
    public static let amd64: VideoSDKRTC.ResourceAttributes.HostArchValues
    public static let arm32: VideoSDKRTC.ResourceAttributes.HostArchValues
    public static let arm64: VideoSDKRTC.ResourceAttributes.HostArchValues
    public static let ia64: VideoSDKRTC.ResourceAttributes.HostArchValues
    public static let ppc32: VideoSDKRTC.ResourceAttributes.HostArchValues
    public static let ppc64: VideoSDKRTC.ResourceAttributes.HostArchValues
    public static let s390x: VideoSDKRTC.ResourceAttributes.HostArchValues
    public static let x86: VideoSDKRTC.ResourceAttributes.HostArchValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct OsTypeValues : Swift.CustomStringConvertible {
    public static let windows: VideoSDKRTC.ResourceAttributes.OsTypeValues
    public static let linux: VideoSDKRTC.ResourceAttributes.OsTypeValues
    public static let darwin: VideoSDKRTC.ResourceAttributes.OsTypeValues
    public static let freebsd: VideoSDKRTC.ResourceAttributes.OsTypeValues
    public static let netbsd: VideoSDKRTC.ResourceAttributes.OsTypeValues
    public static let openbsd: VideoSDKRTC.ResourceAttributes.OsTypeValues
    public static let dragonflybsd: VideoSDKRTC.ResourceAttributes.OsTypeValues
    public static let hpux: VideoSDKRTC.ResourceAttributes.OsTypeValues
    public static let aix: VideoSDKRTC.ResourceAttributes.OsTypeValues
    public static let solaris: VideoSDKRTC.ResourceAttributes.OsTypeValues
    public static let zOs: VideoSDKRTC.ResourceAttributes.OsTypeValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct TelemetrySdkLanguageValues : Swift.CustomStringConvertible {
    public static let cpp: VideoSDKRTC.ResourceAttributes.TelemetrySdkLanguageValues
    public static let dotnet: VideoSDKRTC.ResourceAttributes.TelemetrySdkLanguageValues
    public static let erlang: VideoSDKRTC.ResourceAttributes.TelemetrySdkLanguageValues
    public static let go: VideoSDKRTC.ResourceAttributes.TelemetrySdkLanguageValues
    public static let java: VideoSDKRTC.ResourceAttributes.TelemetrySdkLanguageValues
    public static let nodejs: VideoSDKRTC.ResourceAttributes.TelemetrySdkLanguageValues
    public static let php: VideoSDKRTC.ResourceAttributes.TelemetrySdkLanguageValues
    public static let python: VideoSDKRTC.ResourceAttributes.TelemetrySdkLanguageValues
    public static let ruby: VideoSDKRTC.ResourceAttributes.TelemetrySdkLanguageValues
    public static let webjs: VideoSDKRTC.ResourceAttributes.TelemetrySdkLanguageValues
    public static let swift: VideoSDKRTC.ResourceAttributes.TelemetrySdkLanguageValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public func == (left: VideoSDKRTC.ResourceAttributes, right: Swift.String) -> Swift.Bool
public func == (left: Swift.String, right: VideoSDKRTC.ResourceAttributes) -> Swift.Bool
extension VideoSDKRTC.Message {
  public static func jsonString<C>(from collection: C, options: VideoSDKRTC.JSONEncodingOptions = JSONEncodingOptions()) throws -> Swift.String where Self == C.Element, C : Swift.Collection
  public static func jsonUTF8Bytes<C, Bytes>(from collection: C, options: VideoSDKRTC.JSONEncodingOptions = JSONEncodingOptions()) throws -> Bytes where Self == C.Element, C : Swift.Collection, Bytes : VideoSDKRTC.SwiftProtobufContiguousBytes
  public static func array(fromJSONString jsonString: Swift.String, options: VideoSDKRTC.JSONDecodingOptions = JSONDecodingOptions()) throws -> [Self]
  public static func array(fromJSONString jsonString: Swift.String, extensions: any VideoSDKRTC.ExtensionMap = SimpleExtensionMap(), options: VideoSDKRTC.JSONDecodingOptions = JSONDecodingOptions()) throws -> [Self]
  public static func array<Bytes>(fromJSONUTF8Bytes jsonUTF8Bytes: Bytes, options: VideoSDKRTC.JSONDecodingOptions = JSONDecodingOptions()) throws -> [Self] where Bytes : VideoSDKRTC.SwiftProtobufContiguousBytes
  public static func array<Bytes>(fromJSONUTF8Bytes jsonUTF8Bytes: Bytes, extensions: any VideoSDKRTC.ExtensionMap = SimpleExtensionMap(), options: VideoSDKRTC.JSONDecodingOptions = JSONDecodingOptions()) throws -> [Self] where Bytes : VideoSDKRTC.SwiftProtobufContiguousBytes
}
public protocol Enum : Swift.CaseIterable, Swift.Hashable, Swift.RawRepresentable, Swift.Sendable {
  init()
  init?(rawValue: Swift.Int)
  var rawValue: Swift.Int { get }
}
extension VideoSDKRTC.Enum {
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol Sampler : AnyObject, Swift.CustomStringConvertible {
  func shouldSample(parentContext: VideoSDKRTC.SpanContext?, traceId: VideoSDKRTC.TraceId, name: Swift.String, kind: VideoSDKRTC.SpanKind, attributes: [Swift.String : VideoSDKRTC.AttributeValue], parentLinks: [VideoSDKRTC.SpanData.Link]) -> any VideoSDKRTC.Decision
}
public protocol Decision {
  var isSampled: Swift.Bool { get }
  var attributes: [Swift.String : VideoSDKRTC.AttributeValue] { get }
}
public enum Samplers {
  public static var alwaysOn: any VideoSDKRTC.Sampler
  public static var alwaysOff: any VideoSDKRTC.Sampler
  public static func traceIdRatio(ratio: Swift.Double) -> any VideoSDKRTC.Sampler
  public static func parentBased(root: any VideoSDKRTC.Sampler, remoteParentSampled: (any VideoSDKRTC.Sampler)? = nil, remoteParentNotSampled: (any VideoSDKRTC.Sampler)? = nil, localParentSampled: (any VideoSDKRTC.Sampler)? = nil, localParentNotSampled: (any VideoSDKRTC.Sampler)? = nil) -> any VideoSDKRTC.Sampler
}
public enum Google_Protobuf_Syntax : VideoSDKRTC.Enum {
  public typealias RawValue = Swift.Int
  case proto2
  case proto3
  case editions
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static let allCases: [VideoSDKRTC.Google_Protobuf_Syntax]
  public typealias AllCases = [VideoSDKRTC.Google_Protobuf_Syntax]
}
public struct Google_Protobuf_Type {
  public var name: Swift.String
  public var fields: [VideoSDKRTC.Google_Protobuf_Field]
  public var oneofs: [Swift.String]
  public var options: [VideoSDKRTC.Google_Protobuf_Option]
  public var sourceContext: VideoSDKRTC.Google_Protobuf_SourceContext {
    get
    set
  }
  public var hasSourceContext: Swift.Bool {
    get
  }
  public mutating func clearSourceContext()
  public var syntax: VideoSDKRTC.Google_Protobuf_Syntax
  public var edition: Swift.String
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_Field {
  public var kind: VideoSDKRTC.Google_Protobuf_Field.Kind
  public var cardinality: VideoSDKRTC.Google_Protobuf_Field.Cardinality
  public var number: Swift.Int32
  public var name: Swift.String
  public var typeURL: Swift.String
  public var oneofIndex: Swift.Int32
  public var packed: Swift.Bool
  public var options: [VideoSDKRTC.Google_Protobuf_Option]
  public var jsonName: Swift.String
  public var defaultValue: Swift.String
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public enum Kind : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case typeUnknown
    case typeDouble
    case typeFloat
    case typeInt64
    case typeUint64
    case typeInt32
    case typeFixed64
    case typeFixed32
    case typeBool
    case typeString
    case typeGroup
    case typeMessage
    case typeBytes
    case typeUint32
    case typeEnum
    case typeSfixed32
    case typeSfixed64
    case typeSint32
    case typeSint64
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public static let allCases: [VideoSDKRTC.Google_Protobuf_Field.Kind]
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_Field.Kind]
  }
  public enum Cardinality : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case unknown
    case optional
    case required
    case repeated
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
    public static let allCases: [VideoSDKRTC.Google_Protobuf_Field.Cardinality]
    public typealias AllCases = [VideoSDKRTC.Google_Protobuf_Field.Cardinality]
  }
  public init()
}
public struct Google_Protobuf_Enum {
  public var name: Swift.String
  public var enumvalue: [VideoSDKRTC.Google_Protobuf_EnumValue]
  public var options: [VideoSDKRTC.Google_Protobuf_Option]
  public var sourceContext: VideoSDKRTC.Google_Protobuf_SourceContext {
    get
    set
  }
  public var hasSourceContext: Swift.Bool {
    get
  }
  public mutating func clearSourceContext()
  public var syntax: VideoSDKRTC.Google_Protobuf_Syntax
  public var edition: Swift.String
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_EnumValue {
  public var name: Swift.String
  public var number: Swift.Int32
  public var options: [VideoSDKRTC.Google_Protobuf_Option]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_Option {
  public var name: Swift.String
  public var value: VideoSDKRTC.Google_Protobuf_Any {
    get
    set
  }
  public var hasValue: Swift.Bool {
    get
  }
  public mutating func clearValue()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Google_Protobuf_Type : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_Field : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_Enum : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_EnumValue : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_Option : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_Syntax : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_Type : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_Type, rhs: VideoSDKRTC.Google_Protobuf_Type) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_Field : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_Field, rhs: VideoSDKRTC.Google_Protobuf_Field) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_Field.Kind : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_Field.Cardinality : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_Enum : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_Enum, rhs: VideoSDKRTC.Google_Protobuf_Enum) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_EnumValue : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_EnumValue, rhs: VideoSDKRTC.Google_Protobuf_EnumValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_Option : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_Option, rhs: VideoSDKRTC.Google_Protobuf_Option) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ProtobufAPIVersion_3 {
}
public protocol ProtobufAPIVersionCheck {
  associatedtype Version : VideoSDKRTC.ProtobufAPIVersion_3
}
public enum SemanticAttributes : Swift.String {
  case exceptionType
  case exceptionMessage
  case exceptionStacktrace
  case httpMethod
  case httpStatusCode
  case netProtocolName
  case netProtocolVersion
  case netPeerName
  case netPeerPort
  case httpScheme
  case httpRoute
  case netHostName
  case netHostPort
  case eventName
  case eventDomain
  case logRecordUid
  case featureFlagKey
  case featureFlagProviderName
  case featureFlagVariant
  case awsLambdaInvokedArn
  case cloudeventsEventId
  case cloudeventsEventSource
  case cloudeventsEventSpecVersion
  case cloudeventsEventType
  case cloudeventsEventSubject
  case opentracingRefType
  case dbSystem
  case dbConnectionString
  case dbUser
  case dbJdbcDriverClassname
  case dbName
  case dbStatement
  case dbOperation
  case netSockPeerAddr
  case netSockPeerPort
  case netSockFamily
  case netSockPeerName
  case netTransport
  case dbMssqlInstanceName
  case dbCassandraPageSize
  case dbCassandraConsistencyLevel
  case dbCassandraTable
  case dbCassandraIdempotence
  case dbCassandraSpeculativeExecutionCount
  case dbCassandraCoordinatorId
  case dbCassandraCoordinatorDc
  case dbRedisDatabaseIndex
  case dbMongodbCollection
  case dbSqlTable
  case dbCosmosdbClientId
  case dbCosmosdbOperationType
  case userAgentOriginal
  case dbCosmosdbConnectionMode
  case dbCosmosdbContainer
  case dbCosmosdbRequestContentLength
  case dbCosmosdbStatusCode
  case dbCosmosdbSubStatusCode
  case dbCosmosdbRequestCharge
  case otelStatusCode
  case otelStatusDescription
  case faasTrigger
  case faasInvocationId
  case cloudResourceId
  case faasDocumentCollection
  case faasDocumentOperation
  case faasDocumentTime
  case faasDocumentName
  case httpTarget
  case httpClientIp
  case netSockHostAddr
  case netSockHostPort
  case messagingSystem
  case messagingOperation
  case messagingBatchMessageCount
  case messagingMessageId
  case messagingMessageConversationId
  case messagingMessagePayloadSizeBytes
  case messagingMessagePayloadCompressedSizeBytes
  case faasTime
  case faasCron
  case faasColdstart
  case faasInvokedName
  case faasInvokedProvider
  case faasInvokedRegion
  case netHostConnectionType
  case netHostConnectionSubtype
  case netHostCarrierName
  case netHostCarrierMcc
  case netHostCarrierMnc
  case netHostCarrierIcc
  case peerService
  case enduserId
  case enduserRole
  case enduserScope
  case threadId
  case threadName
  case codeFunction
  case codeNamespace
  case codeFilepath
  case codeLineno
  case codeColumn
  case httpRequestContentLength
  case httpResponseContentLength
  case httpUrl
  case httpResendCount
  case rpcSystem
  case rpcService
  case rpcMethod
  case awsRequestId
  case awsDynamodbTableNames
  case awsDynamodbConsumedCapacity
  case awsDynamodbItemCollectionMetrics
  case awsDynamodbProvisionedReadCapacity
  case awsDynamodbProvisionedWriteCapacity
  case awsDynamodbConsistentRead
  case awsDynamodbProjection
  case awsDynamodbLimit
  case awsDynamodbAttributesToGet
  case awsDynamodbIndexName
  case awsDynamodbSelect
  case awsDynamodbGlobalSecondaryIndexes
  case awsDynamodbLocalSecondaryIndexes
  case awsDynamodbExclusiveStartTable
  case awsDynamodbTableCount
  case awsDynamodbScanForward
  case awsDynamodbSegment
  case awsDynamodbTotalSegments
  case awsDynamodbCount
  case awsDynamodbScannedCount
  case awsDynamodbAttributeDefinitions
  case awsDynamodbGlobalSecondaryIndexUpdates
  case awsS3Bucket
  case awsS3Key
  case awsS3CopySource
  case awsS3UploadId
  case awsS3Delete
  case awsS3PartNumber
  case graphqlOperationName
  case graphqlOperationType
  case graphqlDocument
  case messagingDestinationName
  case messagingSourceName
  case messagingDestinationTemplate
  case messagingDestinationTemporary
  case messagingDestinationAnonymous
  case messagingSourceTemplate
  case messagingSourceTemporary
  case messagingSourceAnonymous
  case messagingConsumerId
  case messagingRabbitmqDestinationRoutingKey
  case messagingKafkaMessageKey
  case messagingKafkaConsumerGroup
  case messagingKafkaClientId
  case messagingKafkaDestinationPartition
  case messagingKafkaSourcePartition
  case messagingKafkaMessageOffset
  case messagingKafkaMessageTombstone
  case messagingRocketmqNamespace
  case messagingRocketmqClientGroup
  case messagingRocketmqClientId
  case messagingRocketmqMessageDeliveryTimestamp
  case messagingRocketmqMessageDelayTimeLevel
  case messagingRocketmqMessageGroup
  case messagingRocketmqMessageType
  case messagingRocketmqMessageTag
  case messagingRocketmqMessageKeys
  case messagingRocketmqConsumptionModel
  case rpcGrpcStatusCode
  case rpcJsonrpcVersion
  case rpcJsonrpcRequestId
  case rpcJsonrpcErrorCode
  case rpcJsonrpcErrorMessage
  case messageType
  case messageId
  case messageCompressedSize
  case messageUncompressedSize
  case rpcConnectRpcErrorCode
  case exceptionEscaped
  case exception
  public struct EventDomainValues : Swift.CustomStringConvertible {
    public static let browser: VideoSDKRTC.SemanticAttributes.EventDomainValues
    public static let device: VideoSDKRTC.SemanticAttributes.EventDomainValues
    public static let k8s: VideoSDKRTC.SemanticAttributes.EventDomainValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public enum OpentracingRefTypeValues : Swift.String {
    case child_of
    case follows_from
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct DbSystemValues : Swift.CustomStringConvertible {
    public static let otherSql: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let mssql: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let mssqlcompact: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let mysql: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let oracle: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let db2: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let postgresql: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let redshift: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let hive: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let cloudscape: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let hsqldb: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let progress: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let maxdb: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let hanadb: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let ingres: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let firstsql: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let edb: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let cache: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let adabas: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let firebird: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let derby: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let filemaker: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let informix: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let instantdb: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let interbase: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let mariadb: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let netezza: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let pervasive: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let pointbase: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let sqlite: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let sybase: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let teradata: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let vertica: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let h2: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let coldfusion: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let cassandra: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let hbase: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let mongodb: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let redis: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let couchbase: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let couchdb: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let cosmosdb: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let dynamodb: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let neo4j: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let geode: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let elasticsearch: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let memcached: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let cockroachdb: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let opensearch: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let clickhouse: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let spanner: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public static let trino: VideoSDKRTC.SemanticAttributes.DbSystemValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct NetSockFamilyValues : Swift.CustomStringConvertible {
    public static let inet: VideoSDKRTC.SemanticAttributes.NetSockFamilyValues
    public static let inet6: VideoSDKRTC.SemanticAttributes.NetSockFamilyValues
    public static let unix: VideoSDKRTC.SemanticAttributes.NetSockFamilyValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct NetTransportValues : Swift.CustomStringConvertible {
    public static let ipTcp: VideoSDKRTC.SemanticAttributes.NetTransportValues
    public static let ipUdp: VideoSDKRTC.SemanticAttributes.NetTransportValues
    public static let pipe: VideoSDKRTC.SemanticAttributes.NetTransportValues
    public static let inproc: VideoSDKRTC.SemanticAttributes.NetTransportValues
    public static let other: VideoSDKRTC.SemanticAttributes.NetTransportValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public enum DbCassandraConsistencyLevelValues : Swift.String {
    case all
    case each_quorum
    case quorum
    case local_quorum
    case one
    case two
    case three
    case local_one
    case any
    case serial
    case local_serial
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct DbCosmosdbOperationTypeValues : Swift.CustomStringConvertible {
    public static let invalid: VideoSDKRTC.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let create: VideoSDKRTC.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let patch: VideoSDKRTC.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let read: VideoSDKRTC.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let readFeed: VideoSDKRTC.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let delete: VideoSDKRTC.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let replace: VideoSDKRTC.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let execute: VideoSDKRTC.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let query: VideoSDKRTC.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let head: VideoSDKRTC.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let headFeed: VideoSDKRTC.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let upsert: VideoSDKRTC.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let batch: VideoSDKRTC.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let queryPlan: VideoSDKRTC.SemanticAttributes.DbCosmosdbOperationTypeValues
    public static let executeJavascript: VideoSDKRTC.SemanticAttributes.DbCosmosdbOperationTypeValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public enum DbCosmosdbConnectionModeValues : Swift.String {
    case gateway
    case direct
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum OtelStatusCodeValues : Swift.String {
    case ok
    case error
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum FaasTriggerValues : Swift.String {
    case datasource
    case http
    case pubsub
    case timer
    case other
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct FaasDocumentOperationValues : Swift.CustomStringConvertible {
    public static let insert: VideoSDKRTC.SemanticAttributes.FaasDocumentOperationValues
    public static let edit: VideoSDKRTC.SemanticAttributes.FaasDocumentOperationValues
    public static let delete: VideoSDKRTC.SemanticAttributes.FaasDocumentOperationValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct MessagingOperationValues : Swift.CustomStringConvertible {
    public static let publish: VideoSDKRTC.SemanticAttributes.MessagingOperationValues
    public static let receive: VideoSDKRTC.SemanticAttributes.MessagingOperationValues
    public static let process: VideoSDKRTC.SemanticAttributes.MessagingOperationValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct FaasInvokedProviderValues : Swift.CustomStringConvertible {
    public static let alibabaCloud: VideoSDKRTC.SemanticAttributes.FaasInvokedProviderValues
    public static let aws: VideoSDKRTC.SemanticAttributes.FaasInvokedProviderValues
    public static let azure: VideoSDKRTC.SemanticAttributes.FaasInvokedProviderValues
    public static let gcp: VideoSDKRTC.SemanticAttributes.FaasInvokedProviderValues
    public static let tencentCloud: VideoSDKRTC.SemanticAttributes.FaasInvokedProviderValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct NetHostConnectionTypeValues : Swift.CustomStringConvertible {
    public static let wifi: VideoSDKRTC.SemanticAttributes.NetHostConnectionTypeValues
    public static let wired: VideoSDKRTC.SemanticAttributes.NetHostConnectionTypeValues
    public static let cell: VideoSDKRTC.SemanticAttributes.NetHostConnectionTypeValues
    public static let unavailable: VideoSDKRTC.SemanticAttributes.NetHostConnectionTypeValues
    public static let unknown: VideoSDKRTC.SemanticAttributes.NetHostConnectionTypeValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct NetHostConnectionSubtypeValues : Swift.CustomStringConvertible {
    public static let gprs: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let edge: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let umts: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let cdma: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let evdo0: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let evdoA: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let cdma20001xrtt: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let hsdpa: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let hsupa: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let hspa: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let iden: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let evdoB: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let lte: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let ehrpd: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let hspap: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let gsm: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let tdScdma: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let iwlan: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let nr: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let nrnsa: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public static let lteCa: VideoSDKRTC.SemanticAttributes.NetHostConnectionSubtypeValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public struct RpcSystemValues : Swift.CustomStringConvertible {
    public static let grpc: VideoSDKRTC.SemanticAttributes.RpcSystemValues
    public static let javaRmi: VideoSDKRTC.SemanticAttributes.RpcSystemValues
    public static let dotnetWcf: VideoSDKRTC.SemanticAttributes.RpcSystemValues
    public static let apacheDubbo: VideoSDKRTC.SemanticAttributes.RpcSystemValues
    public static let connectRpc: VideoSDKRTC.SemanticAttributes.RpcSystemValues
    public init(_ customValue: Swift.String)
    public var description: Swift.String {
      get
    }
  }
  public enum GraphqlOperationTypeValues : Swift.String {
    case query
    case mutation
    case subscription
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum MessagingRocketmqMessageTypeValues : Swift.String {
    case normal
    case fifo
    case delay
    case transaction
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum MessagingRocketmqConsumptionModelValues : Swift.String {
    case clustering
    case broadcasting
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum RpcGrpcStatusCodeValues : Swift.Int {
    case ok
    case cancelled
    case unknown
    case invalid_argument
    case deadline_exceeded
    case not_found
    case already_exists
    case permission_denied
    case resource_exhausted
    case failed_precondition
    case aborted
    case out_of_range
    case unimplemented
    case `internal`
    case unavailable
    case data_loss
    case unauthenticated
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum MessageTypeValues : Swift.String {
    case sent
    case received
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum RpcConnectRpcErrorCodeValues : Swift.String {
    case cancelled
    case unknown
    case invalid_argument
    case deadline_exceeded
    case not_found
    case already_exists
    case permission_denied
    case resource_exhausted
    case failed_precondition
    case aborted
    case out_of_range
    case unimplemented
    case `internal`
    case unavailable
    case data_loss
    case unauthenticated
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Severity : Swift.Int, Swift.Comparable, Swift.CustomStringConvertible, Swift.Codable {
  case trace, trace2, trace3, trace4, debug, debug2, debug3, debug4, info, info2, info3, info4, warn, warn2, warn3, warn4, error, error2, error3, error4, fatal, fatal2, fatal3, fatal4
  public var description: Swift.String {
    get
  }
  public static func < (lhs: VideoSDKRTC.Severity, rhs: VideoSDKRTC.Severity) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public class SimpleLogRecordProcessor : VideoSDKRTC.LogRecordProcessor {
  public init(logRecordExporter: any VideoSDKRTC.LogRecordExporter)
  public func onEmit(logRecord: VideoSDKRTC.ReadableLogRecord)
  public func forceFlush() -> VideoSDKRTC.ExportResult
  public func shutdown() -> VideoSDKRTC.ExportResult
  @objc deinit
}
public struct SimpleSpanProcessor : VideoSDKRTC.SpanProcessor {
  public let isStartRequired: Swift.Bool
  public let isEndRequired: Swift.Bool
  public func onStart(parentContext: VideoSDKRTC.SpanContext?, span: any VideoSDKRTC.ReadableSpan)
  public mutating func onEnd(span: any VideoSDKRTC.ReadableSpan)
  public func shutdown()
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
  public init(spanExporter: any VideoSDKRTC.SpanExporter)
  public func reportingOnlySampled(sampled: Swift.Bool) -> VideoSDKRTC.SimpleSpanProcessor
}
#if compiler(>=5.3) && $RethrowsProtocol
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension _Concurrency.AsyncSequence where Self.Element == Swift.UInt8 {
  @inlinable public func binaryProtobufDelimitedMessages<M>(of messageType: M.Type = M.self, extensions: (any VideoSDKRTC.ExtensionMap)? = nil, partial: Swift.Bool = false, options: VideoSDKRTC.BinaryDecodingOptions = BinaryDecodingOptions()) -> VideoSDKRTC.AsyncMessageSequence<Self, M> where M : VideoSDKRTC.Message {
    AsyncMessageSequence<Self, M>(
      base: self,
      extensions: extensions,
      partial: partial,
      options: options
    )
  }
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
public struct AsyncMessageSequence<Base, M> : _Concurrency.AsyncSequence where Base : _Concurrency.AsyncSequence, M : VideoSDKRTC.Message, Base.Element == Swift.UInt8 {
  public typealias Element = M
  public init(base: Base, extensions: (any VideoSDKRTC.ExtensionMap)? = nil, partial: Swift.Bool = false, options: VideoSDKRTC.BinaryDecodingOptions = BinaryDecodingOptions())
  public struct AsyncIterator : _Concurrency.AsyncIteratorProtocol {
    @usableFromInline
    internal var iterator: Base.AsyncIterator?
    @usableFromInline
    internal let extensions: (any VideoSDKRTC.ExtensionMap)?
    @usableFromInline
    internal let partial: Swift.Bool
    @usableFromInline
    internal let options: VideoSDKRTC.BinaryDecodingOptions
    #if compiler(>=5.3) && $AsyncAwait
    @inlinable internal mutating func nextVarInt() async throws -> Swift.UInt64? {
      var messageSize: UInt64 = 0
      var shift: UInt64 = 0

      while let byte = try await iterator?.next() {
        messageSize |= UInt64(byte & 0x7f) << shift
        shift += UInt64(7)
        if shift > 35 {
          iterator = nil
          throw BinaryDelimited.Error.malformedLength
        }
        if (byte & 0x80 == 0) {
          return messageSize
        }
      }
      if (shift > 0) {
        // The stream has ended inside a varint.
        iterator = nil
        throw BinaryDelimited.Error.truncated
      }
      return nil // End of stream reached.
    }
    #endif
    #if compiler(>=5.3) && $AsyncAwait
    @usableFromInline
    internal mutating func readBytes(_ size: Swift.Int) async throws -> [Swift.UInt8]
    #endif
    #if compiler(>=5.3) && $AsyncAwait
    @inlinable public mutating func next() async throws -> M? {
      guard let messageSize = try await nextVarInt() else {
        iterator = nil
        return nil
      }
      guard messageSize <= UInt64(0x7fffffff) else {
        iterator = nil
        throw BinaryDecodingError.tooLarge
      }
      if messageSize == 0 {
        return try M(
          serializedBytes: [],
          extensions: extensions,
          partial: partial,
          options: options
        )
      }
      let buffer = try await readBytes(Int(messageSize))
      return try M(
        serializedBytes: buffer,
        extensions: extensions,
        partial: partial,
        options: options
      )
    }
    #endif
    public typealias Element = M
  }
  public func makeAsyncIterator() -> VideoSDKRTC.AsyncMessageSequence<Base, M>.AsyncIterator
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension VideoSDKRTC.AsyncMessageSequence : Swift.Sendable where Base : Swift.Sendable {
}
#endif
#if compiler(>=5.3) && $RethrowsProtocol
@available(*, unavailable)
extension VideoSDKRTC.AsyncMessageSequence.AsyncIterator : Swift.Sendable {
}
#endif
public protocol Span : AnyObject, Swift.CustomStringConvertible {
  var kind: VideoSDKRTC.SpanKind { get }
  var context: VideoSDKRTC.SpanContext { get }
  var isRecording: Swift.Bool { get }
  var status: VideoSDKRTC.Status { get set }
  var name: Swift.String { get set }
  func setAttribute(key: Swift.String, value: VideoSDKRTC.AttributeValue?)
  func addEvent(name: Swift.String)
  func addEvent(name: Swift.String, timestamp: Foundation.Date)
  func addEvent(name: Swift.String, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  func addEvent(name: Swift.String, attributes: [Swift.String : VideoSDKRTC.AttributeValue], timestamp: Foundation.Date)
  func end()
  func end(time: Foundation.Date)
}
extension VideoSDKRTC.Span {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: any VideoSDKRTC.Span, rhs: any VideoSDKRTC.Span) -> Swift.Bool
}
extension VideoSDKRTC.Span {
  public func setAttribute(key: Swift.String, value: Swift.String)
  public func setAttribute(key: Swift.String, value: Swift.Int)
  public func setAttribute(key: Swift.String, value: Swift.Double)
  public func setAttribute(key: Swift.String, value: Swift.Bool)
  public func setAttribute(key: VideoSDKRTC.SemanticAttributes, value: Swift.String)
  public func setAttribute(key: VideoSDKRTC.SemanticAttributes, value: Swift.Int)
  public func setAttribute(key: VideoSDKRTC.SemanticAttributes, value: Swift.Double)
  public func setAttribute(key: VideoSDKRTC.SemanticAttributes, value: Swift.Bool)
}
extension VideoSDKRTC.Span {
  public func putHttpHostAttribute(string hostName: Swift.String, int port: Swift.Int)
  public func putHttpStatusCode(statusCode: Swift.Int, reasonPhrase: Swift.String)
}
public struct SpanAdapter {
  public static func toProtoResourceSpans(spanDataList: [VideoSDKRTC.SpanData]) -> [VideoSDKRTC.Opentelemetry_Proto_Trace_V1_ResourceSpans]
  public static func toProtoSpan(spanData: VideoSDKRTC.SpanData) -> VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span
}
public protocol SpanBuilder : AnyObject {
  @discardableResult
  func setParent(_ parent: any VideoSDKRTC.Span) -> Self
  @discardableResult
  func setParent(_ parent: VideoSDKRTC.SpanContext) -> Self
  @discardableResult
  func setNoParent() -> Self
  @discardableResult
  func addLink(spanContext: VideoSDKRTC.SpanContext) -> Self
  @discardableResult
  func addLink(spanContext: VideoSDKRTC.SpanContext, attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.String) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.Int) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.Double) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: Swift.Bool) -> Self
  @discardableResult
  func setAttribute(key: Swift.String, value: VideoSDKRTC.AttributeValue) -> Self
  @discardableResult
  func setSpanKind(spanKind: VideoSDKRTC.SpanKind) -> Self
  @discardableResult
  func setStartTime(time: Foundation.Date) -> Self
  @discardableResult
  func setActive(_ active: Swift.Bool) -> Self
  func startSpan() -> any VideoSDKRTC.Span
}
extension VideoSDKRTC.SpanBuilder {
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.String) -> Self
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.Int) -> Self
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.Double) -> Self
  @discardableResult
  public func setAttribute(key: Swift.String, value: Swift.Bool) -> Self
}
public struct SpanContext : Swift.Equatable, Swift.CustomStringConvertible, Swift.Hashable, Swift.Codable {
  public var traceId: VideoSDKRTC.TraceId {
    get
  }
  public var spanId: VideoSDKRTC.SpanId {
    get
  }
  public var traceFlags: VideoSDKRTC.TraceFlags {
    get
  }
  public var traceState: VideoSDKRTC.TraceState
  public let isRemote: Swift.Bool
  public static func create(traceId: VideoSDKRTC.TraceId, spanId: VideoSDKRTC.SpanId, traceFlags: VideoSDKRTC.TraceFlags, traceState: VideoSDKRTC.TraceState) -> VideoSDKRTC.SpanContext
  public static func createFromRemoteParent(traceId: VideoSDKRTC.TraceId, spanId: VideoSDKRTC.SpanId, traceFlags: VideoSDKRTC.TraceFlags, traceState: VideoSDKRTC.TraceState) -> VideoSDKRTC.SpanContext
  public var isValid: Swift.Bool {
    get
  }
  public var isSampled: Swift.Bool {
    get
  }
  public static func == (lhs: VideoSDKRTC.SpanContext, rhs: VideoSDKRTC.SpanContext) -> Swift.Bool
  public var description: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SpanData : Swift.Equatable, Swift.Codable {
  public var traceId: VideoSDKRTC.TraceId {
    get
  }
  public var spanId: VideoSDKRTC.SpanId {
    get
  }
  public var traceFlags: VideoSDKRTC.TraceFlags {
    get
  }
  public var traceState: VideoSDKRTC.TraceState {
    get
  }
  public var parentSpanId: VideoSDKRTC.SpanId? {
    get
  }
  public var resource: VideoSDKRTC.Resource {
    get
  }
  public var instrumentationScope: VideoSDKRTC.InstrumentationScopeInfo {
    get
  }
  public var name: Swift.String {
    get
  }
  public var kind: VideoSDKRTC.SpanKind {
    get
  }
  public var startTime: Foundation.Date {
    get
  }
  public var attributes: [Swift.String : VideoSDKRTC.AttributeValue] {
    get
  }
  public var events: [VideoSDKRTC.SpanData.Event] {
    get
  }
  public var links: [VideoSDKRTC.SpanData.Link] {
    get
  }
  public var status: VideoSDKRTC.Status {
    get
  }
  public var endTime: Foundation.Date {
    get
  }
  public var hasRemoteParent: Swift.Bool {
    get
  }
  public var hasEnded: Swift.Bool {
    get
  }
  public var totalRecordedEvents: Swift.Int {
    get
  }
  public var totalRecordedLinks: Swift.Int {
    get
  }
  public var totalAttributeCount: Swift.Int {
    get
  }
  public static func == (lhs: VideoSDKRTC.SpanData, rhs: VideoSDKRTC.SpanData) -> Swift.Bool
  @discardableResult
  public mutating func settingName(_ name: Swift.String) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingTraceId(_ traceId: VideoSDKRTC.TraceId) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingSpanId(_ spanId: VideoSDKRTC.SpanId) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingTraceFlags(_ traceFlags: VideoSDKRTC.TraceFlags) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingTraceState(_ traceState: VideoSDKRTC.TraceState) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingAttributes(_ attributes: [Swift.String : VideoSDKRTC.AttributeValue]) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingStartTime(_ time: Foundation.Date) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingEndTime(_ time: Foundation.Date) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingKind(_ kind: VideoSDKRTC.SpanKind) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingLinks(_ links: [VideoSDKRTC.SpanData.Link]) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingParentSpanId(_ parentSpanId: VideoSDKRTC.SpanId) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingResource(_ resource: VideoSDKRTC.Resource) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingStatus(_ status: VideoSDKRTC.Status) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingEvents(_ events: [VideoSDKRTC.SpanData.Event]) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingHasRemoteParent(_ hasRemoteParent: Swift.Bool) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingHasEnded(_ hasEnded: Swift.Bool) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingTotalRecordedEvents(_ totalRecordedEvents: Swift.Int) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingTotalRecordedLinks(_ totalRecordedLinks: Swift.Int) -> VideoSDKRTC.SpanData
  @discardableResult
  public mutating func settingTotalAttributeCount(_ totalAttributeCount: Swift.Int) -> VideoSDKRTC.SpanData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension VideoSDKRTC.SpanData {
  public struct Event : Swift.Equatable, Swift.Codable {
    public var timestamp: Foundation.Date {
      get
    }
    public var name: Swift.String {
      get
    }
    public var attributes: [Swift.String : VideoSDKRTC.AttributeValue] {
      get
    }
    public init(name: Swift.String, timestamp: Foundation.Date, attributes: [Swift.String : VideoSDKRTC.AttributeValue]? = nil)
    public init(timestamp: Foundation.Date, event: VideoSDKRTC.SpanData.Event)
    public static func == (a: VideoSDKRTC.SpanData.Event, b: VideoSDKRTC.SpanData.Event) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension VideoSDKRTC.SpanData {
  public struct Link : Swift.Codable {
    public let context: VideoSDKRTC.SpanContext
    public let attributes: [Swift.String : VideoSDKRTC.AttributeValue]
    public init(context: VideoSDKRTC.SpanContext, attributes: [Swift.String : VideoSDKRTC.AttributeValue] = [String: AttributeValue]())
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
}
public func == (lhs: VideoSDKRTC.SpanData.Link, rhs: VideoSDKRTC.SpanData.Link) -> Swift.Bool
public func == (lhs: [VideoSDKRTC.SpanData.Link], rhs: [VideoSDKRTC.SpanData.Link]) -> Swift.Bool
public protocol SpanExporter : AnyObject {
  @discardableResult
  func export(spans: [VideoSDKRTC.SpanData]) -> VideoSDKRTC.SpanExporterResultCode
  func flush() -> VideoSDKRTC.SpanExporterResultCode
  func shutdown()
}
public enum SpanExporterResultCode {
  case success
  case failure
  public static func == (a: VideoSDKRTC.SpanExporterResultCode, b: VideoSDKRTC.SpanExporterResultCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SpanId : Swift.Equatable, Swift.Comparable, Swift.Hashable, Swift.CustomStringConvertible, Swift.Codable {
  public static let size: Swift.Int
  public static let invalidId: Swift.UInt64
  public static let invalid: VideoSDKRTC.SpanId
  public static func getSize() -> Swift.Int
  public init(id: Swift.UInt64)
  public init()
  public static func random() -> VideoSDKRTC.SpanId
  public init(fromBytes bytes: Swift.Array<Swift.UInt8>, withOffset offset: Swift.Int = 0)
  public init(fromBytes bytes: Swift.ArraySlice<Swift.UInt8>, withOffset offset: Swift.Int = 0)
  public init(fromBytes bytes: Swift.ArraySlice<Swift.Character>, withOffset offset: Swift.Int = 0)
  public func copyBytesTo(dest: inout Foundation.Data, destOffset: Swift.Int)
  public func copyBytesTo(dest: inout Swift.Array<Swift.UInt8>, destOffset: Swift.Int)
  public func copyBytesTo(dest: inout Swift.ArraySlice<Swift.UInt8>, destOffset: Swift.Int)
  public init(fromHexString hex: Swift.String, withOffset offset: Swift.Int = 0)
  public var hexString: Swift.String {
    get
  }
  public var rawValue: Swift.UInt64 {
    get
  }
  public var isValid: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func < (lhs: VideoSDKRTC.SpanId, rhs: VideoSDKRTC.SpanId) -> Swift.Bool
  public static func == (lhs: VideoSDKRTC.SpanId, rhs: VideoSDKRTC.SpanId) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
extension VideoSDKRTC.Google_Protobuf_Struct : Swift.ExpressibleByDictionaryLiteral {
  public typealias Key = Swift.String
  public typealias Value = VideoSDKRTC.Google_Protobuf_Value
  public init(dictionaryLiteral: (Swift.String, VideoSDKRTC.Google_Protobuf_Value)...)
}
extension VideoSDKRTC.Google_Protobuf_Struct {
  public init(fields: [Swift.String : VideoSDKRTC.Google_Protobuf_Value])
  public subscript(key: Swift.String) -> VideoSDKRTC.Google_Protobuf_Value? {
    get
    set(newValue)
  }
}
public enum SpanKind : Swift.String, Swift.Equatable, Swift.Codable {
  case `internal`
  case server
  case client
  case producer
  case consumer
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SpanLimits : Swift.Equatable {
  public var attributeCountLimit: Swift.Int {
    get
  }
  public var eventCountLimit: Swift.Int {
    get
  }
  public var linkCountLimit: Swift.Int {
    get
  }
  public var attributePerEventCountLimit: Swift.Int {
    get
  }
  public var attributePerLinkCountLimit: Swift.Int {
    get
  }
  public init()
  @discardableResult
  public func settingAttributeCountLimit(_ number: Swift.UInt) -> VideoSDKRTC.SpanLimits
  @discardableResult
  public func settingEventCountLimit(_ number: Swift.UInt) -> VideoSDKRTC.SpanLimits
  @discardableResult
  public func settingLinkCountLimit(_ number: Swift.UInt) -> VideoSDKRTC.SpanLimits
  @discardableResult
  public func settingAttributePerEventCountLimit(_ number: Swift.UInt) -> VideoSDKRTC.SpanLimits
  @discardableResult
  public func settingAttributePerLinkCountLimit(_ number: Swift.UInt) -> VideoSDKRTC.SpanLimits
  public static func == (lhs: VideoSDKRTC.SpanLimits, rhs: VideoSDKRTC.SpanLimits) -> Swift.Bool
}
public protocol SpanProcessor {
  var isStartRequired: Swift.Bool { get }
  var isEndRequired: Swift.Bool { get }
  func onStart(parentContext: VideoSDKRTC.SpanContext?, span: any VideoSDKRTC.ReadableSpan)
  mutating func onEnd(span: any VideoSDKRTC.ReadableSpan)
  mutating func shutdown()
  func forceFlush(timeout: Foundation.TimeInterval?)
}
public protocol StableAggregator {
  func diff(previousCumulative: VideoSDKRTC.PointData, currentCumulative: VideoSDKRTC.PointData) throws -> VideoSDKRTC.PointData
  func toPoint(measurement: VideoSDKRTC.Measurement) throws -> VideoSDKRTC.PointData
  func createHandle() -> VideoSDKRTC.AggregatorHandle
  func toMetricData(resource: VideoSDKRTC.Resource, scope: VideoSDKRTC.InstrumentationScopeInfo, descriptor: VideoSDKRTC.MetricDescriptor, points: [VideoSDKRTC.PointData], temporality: VideoSDKRTC.AggregationTemporality) -> VideoSDKRTC.StableMetricData
}
public enum AnyUnpackError : Swift.Error {
  case typeMismatch
  case malformedWellKnownTypeJSON
  case malformedAnyField
  public static func == (a: VideoSDKRTC.AnyUnpackError, b: VideoSDKRTC.AnyUnpackError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol StableMeter {
  func counterBuilder(name: Swift.String) -> any VideoSDKRTC.LongCounterBuilder
  func upDownCounterBuilder(name: Swift.String) -> any VideoSDKRTC.LongUpDownCounterBuilder
  func histogramBuilder(name: Swift.String) -> any VideoSDKRTC.DoubleHistogramBuilder
  func gaugeBuilder(name: Swift.String) -> any VideoSDKRTC.DoubleGaugeBuilder
}
public protocol StableMeterProvider : AnyObject {
  func get(name: Swift.String) -> any VideoSDKRTC.StableMeter
  func meterBuilder(name: Swift.String) -> any VideoSDKRTC.MeterBuilder
}
public class StableMeterProviderBuilder {
  public var clock: any VideoSDKRTC.Clock {
    get
  }
  public var resource: VideoSDKRTC.Resource {
    get
  }
  public var metricReaders: [any VideoSDKRTC.StableMetricReader] {
    get
  }
  public var registeredViews: [VideoSDKRTC.RegisteredView] {
    get
  }
  public var exemplarFilter: any VideoSDKRTC.ExemplarFilter {
    get
  }
  public init()
  public func setClock(clock: any VideoSDKRTC.Clock) -> Self
  public func setResource(resource: VideoSDKRTC.Resource) -> Self
  public func registerView(selector: VideoSDKRTC.InstrumentSelector, view: VideoSDKRTC.StableView) -> Self
  public func registerMetricReader(reader: any VideoSDKRTC.StableMetricReader) -> Self
  public func build() -> VideoSDKRTC.StableMeterProviderSdk
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MeterProviderError : Swift.Error {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StableMeterProviderSdk : VideoSDKRTC.StableMeterProvider {
  public func get(name: Swift.String) -> any VideoSDKRTC.StableMeter
  public func meterBuilder(name: Swift.String) -> any VideoSDKRTC.MeterBuilder
  public static func builder() -> VideoSDKRTC.StableMeterProviderBuilder
  public func shutdown() -> VideoSDKRTC.ExportResult
  public func forceFlush() -> VideoSDKRTC.ExportResult
  @objc deinit
}
public class MeterProviderSharedState {
  public init(clock: any VideoSDKRTC.Clock, resource: VideoSDKRTC.Resource, startEpochNanos: Swift.UInt64, exemplarFilter: any VideoSDKRTC.ExemplarFilter)
  public var clock: any VideoSDKRTC.Clock {
    get
  }
  public var resource: VideoSDKRTC.Resource {
    get
  }
  public var startEpochNanos: Swift.UInt64 {
    get
  }
  public var exemplarFilter: any VideoSDKRTC.ExemplarFilter {
    get
  }
  @objc deinit
}
public enum MetricDataType {
  case LongGauge
  case DoubleGauge
  case LongSum
  case DoubleSum
  case Summary
  case Histogram
  case ExponentialHistogram
  public static func == (a: VideoSDKRTC.MetricDataType, b: VideoSDKRTC.MetricDataType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct StableMetricData : Swift.Equatable {
  public var resource: VideoSDKRTC.Resource {
    get
  }
  public var instrumentationScopeInfo: VideoSDKRTC.InstrumentationScopeInfo {
    get
  }
  public var name: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public var unit: Swift.String {
    get
  }
  public var type: VideoSDKRTC.MetricDataType {
    get
  }
  public var data: VideoSDKRTC.StableMetricData.Data {
    get
  }
  public static let empty: VideoSDKRTC.StableMetricData
  @_hasMissingDesignatedInitializers public class Data : Swift.Equatable {
    public var points: [VideoSDKRTC.PointData] {
      get
    }
    public static func == (lhs: VideoSDKRTC.StableMetricData.Data, rhs: VideoSDKRTC.StableMetricData.Data) -> Swift.Bool
    @objc deinit
  }
  public static func == (lhs: VideoSDKRTC.StableMetricData, rhs: VideoSDKRTC.StableMetricData) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class StableHistogramData : VideoSDKRTC.StableMetricData.Data {
  public var aggregationTemporality: VideoSDKRTC.AggregationTemporality {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StableExponentialHistogramData : VideoSDKRTC.StableMetricData.Data {
  public var aggregationTemporality: VideoSDKRTC.AggregationTemporality {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StableGaugeData : VideoSDKRTC.StableMetricData.Data {
  public var aggregationTemporality: VideoSDKRTC.AggregationTemporality {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StableSumData : VideoSDKRTC.StableMetricData.Data {
  public var aggregationTemporality: VideoSDKRTC.AggregationTemporality {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StableSummaryData : VideoSDKRTC.StableMetricData.Data {
  public var aggregationTemporality: VideoSDKRTC.AggregationTemporality {
    get
  }
  @objc deinit
}
public protocol StableMetricExporter : VideoSDKRTC.AggregationTemporalitySelectorProtocol, VideoSDKRTC.DefaultAggregationSelector {
  func export(metrics: [VideoSDKRTC.StableMetricData]) -> VideoSDKRTC.ExportResult
  func flush() -> VideoSDKRTC.ExportResult
  func shutdown() -> VideoSDKRTC.ExportResult
}
extension VideoSDKRTC.StableMetricExporter {
  public func getDefaultAggregation(for instrument: VideoSDKRTC.InstrumentType) -> any VideoSDKRTC.Aggregation
}
public protocol StableMetricReader : VideoSDKRTC.AggregationTemporalitySelectorProtocol, VideoSDKRTC.DefaultAggregationSelector {
  func forceFlush() -> VideoSDKRTC.ExportResult
  func shutdown() -> VideoSDKRTC.ExportResult
  func register(registration: any VideoSDKRTC.CollectionRegistration)
}
@_hasMissingDesignatedInitializers public class StableObservableMeasurementSdk : VideoSDKRTC.ObservableLongMeasurement, VideoSDKRTC.ObservableDoubleMeasurement {
  public var descriptor: VideoSDKRTC.InstrumentDescriptor {
    get
  }
  public var storages: [VideoSDKRTC.AsynchronousMetricStorage] {
    get
  }
  public func clearActiveReader()
  public func record(value: Swift.Int)
  public func record(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  public func record(value: Swift.Double)
  public func record(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  @objc deinit
}
public struct Google_Protobuf_Api {
  public var name: Swift.String
  public var methods: [VideoSDKRTC.Google_Protobuf_Method]
  public var options: [VideoSDKRTC.Google_Protobuf_Option]
  public var version: Swift.String
  public var sourceContext: VideoSDKRTC.Google_Protobuf_SourceContext {
    get
    set
  }
  public var hasSourceContext: Swift.Bool {
    get
  }
  public mutating func clearSourceContext()
  public var mixins: [VideoSDKRTC.Google_Protobuf_Mixin]
  public var syntax: VideoSDKRTC.Google_Protobuf_Syntax
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_Method {
  public var name: Swift.String
  public var requestTypeURL: Swift.String
  public var requestStreaming: Swift.Bool
  public var responseTypeURL: Swift.String
  public var responseStreaming: Swift.Bool
  public var options: [VideoSDKRTC.Google_Protobuf_Option]
  public var syntax: VideoSDKRTC.Google_Protobuf_Syntax
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_Mixin {
  public var name: Swift.String
  public var root: Swift.String
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Google_Protobuf_Api : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_Method : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_Mixin : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_Api : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_Api, rhs: VideoSDKRTC.Google_Protobuf_Api) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_Method : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_Method, rhs: VideoSDKRTC.Google_Protobuf_Method) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_Mixin : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_Mixin, rhs: VideoSDKRTC.Google_Protobuf_Mixin) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public class StablePeriodicMetricReaderBuilder {
  public var exporter: any VideoSDKRTC.StableMetricExporter {
    get
  }
  public var exporterInterval: Swift.Double {
    get
  }
  public init(exporter: any VideoSDKRTC.StableMetricExporter)
  public func setInterval(timeInterval: Foundation.TimeInterval) -> Self
  public func build() -> VideoSDKRTC.StablePeriodicMetricReaderSdk
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StablePeriodicMetricReaderSdk : VideoSDKRTC.StableMetricReader {
  @objc deinit
  public func register(registration: any VideoSDKRTC.CollectionRegistration)
  public func forceFlush() -> VideoSDKRTC.ExportResult
  public func shutdown() -> VideoSDKRTC.ExportResult
  public func getAggregationTemporality(for instrument: VideoSDKRTC.InstrumentType) -> VideoSDKRTC.AggregationTemporality
  public func getDefaultAggregation(for instrument: VideoSDKRTC.InstrumentType) -> any VideoSDKRTC.Aggregation
}
@_hasMissingDesignatedInitializers public class StableView {
  public var name: Swift.String? {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var aggregation: any VideoSDKRTC.Aggregation {
    get
  }
  public var attributeProcessor: VideoSDKRTC.AttributeProcessor {
    get
  }
  public static func builder() -> VideoSDKRTC.ViewBuilder
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StableViewRegistry {
  public func findViews(descriptor: VideoSDKRTC.InstrumentDescriptor, meterScope: VideoSDKRTC.InstrumentationScopeInfo) -> [VideoSDKRTC.RegisteredView]
  @objc deinit
}
public enum Status : Swift.Equatable {
  case ok
  case unset
  case error(description: Swift.String)
  public var isOk: Swift.Bool {
    get
  }
  public var isError: Swift.Bool {
    get
  }
  public var name: Swift.String {
    get
  }
  public var code: Swift.Int {
    get
  }
  public static func == (a: VideoSDKRTC.Status, b: VideoSDKRTC.Status) -> Swift.Bool
}
extension VideoSDKRTC.Status : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension VideoSDKRTC.Status : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Google_Protobuf_FieldMask {
  public var paths: [Swift.String]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Google_Protobuf_FieldMask : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_FieldMask : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_FieldMask, rhs: VideoSDKRTC.Google_Protobuf_FieldMask) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct StringUtils {
  public static func isPrintableString(_ string: Swift.String) -> Swift.Bool
  public static func isValidMetricName(_ metricName: Swift.String) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class SumAggregation : VideoSDKRTC.Aggregation {
  public static var instance: VideoSDKRTC.SumAggregation {
    get
  }
  public func isCompatible(with descriptor: VideoSDKRTC.InstrumentDescriptor) -> Swift.Bool
  public func createAggregator(descriptor: VideoSDKRTC.InstrumentDescriptor, exemplarFilter: any VideoSDKRTC.ExemplarFilter) -> any VideoSDKRTC.StableAggregator
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SumAggregator {
  final public let isMonotonic: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SummaryPointData : VideoSDKRTC.PointData {
  public var count: Swift.UInt64
  public var sum: Swift.Double
  public var values: [any VideoSDKRTC.ValueAtQuantile]
  @objc deinit
}
extension Swift.Double {
  public var toMilliseconds: Swift.UInt64 {
    get
  }
  public var toMicroseconds: Swift.UInt64 {
    get
  }
  public var toNanoseconds: Swift.UInt64 {
    get
  }
  public static func fromMilliseconds(_ millis: Swift.Int64) -> Foundation.TimeInterval
  public static func fromMicroseconds(_ micros: Swift.Int64) -> Foundation.TimeInterval
  public static func fromNanoseconds(_ nanos: Swift.Int64) -> Foundation.TimeInterval
}
extension VideoSDKRTC.Google_Protobuf_Any {
  @discardableResult
  public static func register(messageType: any VideoSDKRTC.Message.Type) -> Swift.Bool
  public static func messageType(forTypeURL url: Swift.String) -> (any VideoSDKRTC.Message.Type)?
  public static func messageType(forMessageName name: Swift.String) -> (any VideoSDKRTC.Message.Type)?
}
@_hasMissingDesignatedInitializers public class SynchronousMetricStorage {
  public var metricDescriptor: VideoSDKRTC.MetricDescriptor {
    get
  }
  public func collect(resource: VideoSDKRTC.Resource, scope: VideoSDKRTC.InstrumentationScopeInfo, startEpochNanos: Swift.UInt64, epochNanos: Swift.UInt64) -> VideoSDKRTC.StableMetricData
  public func isEmpty() -> Swift.Bool
  public func recordLong(value: Swift.Int, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  public func recordDouble(value: Swift.Double, attributes: [Swift.String : VideoSDKRTC.AttributeValue])
  @objc deinit
}
public enum BinaryDelimited {
  public enum Error : Swift.Error {
    case unknownStreamError
    case truncated
    case tooLarge
    case malformedLength
    case noBytesAvailable
    public static func == (a: VideoSDKRTC.BinaryDelimited.Error, b: VideoSDKRTC.BinaryDelimited.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func serialize(message: any VideoSDKRTC.Message, to stream: Foundation.OutputStream, partial: Swift.Bool = false) throws
  public static func parse<M>(messageType: M.Type, from stream: Foundation.InputStream, extensions: (any VideoSDKRTC.ExtensionMap)? = nil, partial: Swift.Bool = false, options: VideoSDKRTC.BinaryDecodingOptions = BinaryDecodingOptions()) throws -> M where M : VideoSDKRTC.Message
  public static func merge<M>(into message: inout M, from stream: Foundation.InputStream, extensions: (any VideoSDKRTC.ExtensionMap)? = nil, partial: Swift.Bool = false, options: VideoSDKRTC.BinaryDecodingOptions = BinaryDecodingOptions()) throws where M : VideoSDKRTC.Message
}
public protocol TextMapBaggagePropagator {
  var fields: Swift.Set<Swift.String> { get }
  func inject<S>(baggage: any VideoSDKRTC.Baggage, carrier: inout [Swift.String : Swift.String], setter: S) where S : VideoSDKRTC.Setter
  @discardableResult
  func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> (any VideoSDKRTC.Baggage)? where G : VideoSDKRTC.Getter
}
public enum Internal {
  public static let emptyData: Foundation.Data
  public static func areAllInitialized(_ listOfMessages: [any VideoSDKRTC.Message]) -> Swift.Bool
  public static func areAllInitialized<K>(_ mapToMessages: [K : any VideoSDKRTC.Message]) -> Swift.Bool where K : Swift.Hashable
}
public protocol TextMapPropagator {
  var fields: Swift.Set<Swift.String> { get }
  func inject<S>(spanContext: VideoSDKRTC.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : VideoSDKRTC.Setter
  @discardableResult
  func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> VideoSDKRTC.SpanContext? where G : VideoSDKRTC.Getter
}
public protocol Setter {
  func set(carrier: inout [Swift.String : Swift.String], key: Swift.String, value: Swift.String)
}
public protocol Getter {
  func get(carrier: [Swift.String : Swift.String], key: Swift.String) -> [Swift.String]?
}
public struct Opentelemetry_Proto_Trace_V1_TracesData {
  public var resourceSpans: [VideoSDKRTC.Opentelemetry_Proto_Trace_V1_ResourceSpans]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Trace_V1_ResourceSpans {
  public var resource: VideoSDKRTC.Opentelemetry_Proto_Resource_V1_Resource {
    get
    set
  }
  public var hasResource: Swift.Bool {
    get
  }
  public mutating func clearResource()
  public var scopeSpans: [VideoSDKRTC.Opentelemetry_Proto_Trace_V1_ScopeSpans]
  public var schemaURL: Swift.String
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Trace_V1_ScopeSpans {
  public var scope: VideoSDKRTC.Opentelemetry_Proto_Common_V1_InstrumentationScope {
    get
    set
  }
  public var hasScope: Swift.Bool {
    get
  }
  public mutating func clearScope()
  public var spans: [VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span]
  public var schemaURL: Swift.String
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Trace_V1_Span {
  public var traceID: Foundation.Data
  public var spanID: Foundation.Data
  public var traceState: Swift.String
  public var parentSpanID: Foundation.Data
  public var name: Swift.String
  public var kind: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.SpanKind
  public var startTimeUnixNano: Swift.UInt64
  public var endTimeUnixNano: Swift.UInt64
  public var attributes: [VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue]
  public var droppedAttributesCount: Swift.UInt32
  public var events: [VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.Event]
  public var droppedEventsCount: Swift.UInt32
  public var links: [VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.Link]
  public var droppedLinksCount: Swift.UInt32
  public var status: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Status {
    get
    set
  }
  public var hasStatus: Swift.Bool {
    get
  }
  public mutating func clearStatus()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public enum SpanKind : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case unspecified
    case `internal`
    case server
    case client
    case producer
    case consumer
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public struct Event {
    public var timeUnixNano: Swift.UInt64
    public var name: Swift.String
    public var attributes: [VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue]
    public var droppedAttributesCount: Swift.UInt32
    public var unknownFields: VideoSDKRTC.UnknownStorage
    public init()
  }
  public struct Link {
    public var traceID: Foundation.Data
    public var spanID: Foundation.Data
    public var traceState: Swift.String
    public var attributes: [VideoSDKRTC.Opentelemetry_Proto_Common_V1_KeyValue]
    public var droppedAttributesCount: Swift.UInt32
    public var unknownFields: VideoSDKRTC.UnknownStorage
    public init()
  }
  public init()
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.SpanKind : Swift.CaseIterable {
  public static var allCases: [VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.SpanKind]
  public typealias AllCases = [VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.SpanKind]
}
public struct Opentelemetry_Proto_Trace_V1_Status {
  public var message: Swift.String
  public var code: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Status.StatusCode
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public enum StatusCode : VideoSDKRTC.Enum {
    public typealias RawValue = Swift.Int
    case unset
    case ok
    case error
    case UNRECOGNIZED(Swift.Int)
    public init()
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  public init()
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Status.StatusCode : Swift.CaseIterable {
  public static var allCases: [VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Status.StatusCode]
  public typealias AllCases = [VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Status.StatusCode]
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_TracesData : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_ResourceSpans : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_ScopeSpans : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.SpanKind : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.Event : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.Link : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Status : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Status.StatusCode : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_TracesData : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_TracesData, rhs: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_TracesData) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_ResourceSpans : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_ResourceSpans, rhs: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_ResourceSpans) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_ScopeSpans : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_ScopeSpans, rhs: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_ScopeSpans) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span, rhs: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.SpanKind : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.Event : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.Event, rhs: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.Event) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.Link : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.Link, rhs: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Span.Link) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Status : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Status, rhs: VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Status) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Trace_V1_Status.StatusCode : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Message {
  public func jsonString(options: VideoSDKRTC.JSONEncodingOptions = JSONEncodingOptions()) throws -> Swift.String
  public func jsonUTF8Bytes<Bytes>(options: VideoSDKRTC.JSONEncodingOptions = JSONEncodingOptions()) throws -> Bytes where Bytes : VideoSDKRTC.SwiftProtobufContiguousBytes
  public init(jsonString: Swift.String, options: VideoSDKRTC.JSONDecodingOptions = JSONDecodingOptions()) throws
  public init(jsonString: Swift.String, extensions: (any VideoSDKRTC.ExtensionMap)? = nil, options: VideoSDKRTC.JSONDecodingOptions = JSONDecodingOptions()) throws
  public init<Bytes>(jsonUTF8Bytes: Bytes, options: VideoSDKRTC.JSONDecodingOptions = JSONDecodingOptions()) throws where Bytes : VideoSDKRTC.SwiftProtobufContiguousBytes
  public init<Bytes>(jsonUTF8Bytes: Bytes, extensions: (any VideoSDKRTC.ExtensionMap)? = nil, options: VideoSDKRTC.JSONDecodingOptions = JSONDecodingOptions()) throws where Bytes : VideoSDKRTC.SwiftProtobufContiguousBytes
}
public struct Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest {
  public var resourceSpans: [VideoSDKRTC.Opentelemetry_Proto_Trace_V1_ResourceSpans]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse {
  public var partialSuccess: VideoSDKRTC.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess {
    get
    set
  }
  public var hasPartialSuccess: Swift.Bool {
    get
  }
  public mutating func clearPartialSuccess()
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess {
  public var rejectedSpans: Swift.Int64
  public var errorMessage: Swift.String
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest, rhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceRequest) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse, rhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Trace_V1_ExportTraceServiceResponse) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess, rhs: VideoSDKRTC.Opentelemetry_Proto_Collector_Trace_V1_ExportTracePartialSuccess) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TraceFlags : Swift.Equatable, Swift.CustomStringConvertible, Swift.Codable {
  public var byte: Swift.UInt8 {
    get
  }
  public var hexString: Swift.String {
    get
  }
  public init()
  public init(fromByte src: Swift.UInt8)
  public init(fromHexString hex: Swift.String, withOffset offset: Swift.Int = 0)
  public var sampled: Swift.Bool {
    get
  }
  public mutating func setIsSampled(_ isSampled: Swift.Bool)
  public func settingIsSampled(_ isSampled: Swift.Bool) -> VideoSDKRTC.TraceFlags
  public var description: Swift.String {
    get
  }
  public static func == (a: VideoSDKRTC.TraceFlags, b: VideoSDKRTC.TraceFlags) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TraceId : Swift.Comparable, Swift.Hashable, Swift.CustomStringConvertible, Swift.Equatable, Swift.Codable {
  public static let size: Swift.Int
  public static let invalidId: Swift.UInt64
  public static let invalid: VideoSDKRTC.TraceId
  public var idHi: Swift.UInt64 {
    get
  }
  public var idLo: Swift.UInt64 {
    get
  }
  public init(idHi: Swift.UInt64, idLo: Swift.UInt64)
  public init()
  public static func random() -> VideoSDKRTC.TraceId
  public init(fromData data: Foundation.Data)
  public init(fromBytes bytes: [Swift.UInt8])
  public init(fromBytes bytes: Swift.ArraySlice<Swift.UInt8>)
  public init(fromBytes bytes: Swift.ArraySlice<Swift.Character>)
  public func copyBytesTo(dest: inout Foundation.Data, destOffset: Swift.Int)
  public func copyBytesTo(dest: inout [Swift.UInt8], destOffset: Swift.Int)
  public func copyBytesTo(dest: inout Swift.ArraySlice<Swift.UInt8>, destOffset: Swift.Int)
  public init(fromHexString hex: Swift.String, withOffset offset: Swift.Int = 0)
  public var isValid: Swift.Bool {
    get
  }
  public var hexString: Swift.String {
    get
  }
  public var rawHigherLong: Swift.UInt64 {
    get
  }
  public var rawLowerLong: Swift.UInt64 {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func < (lhs: VideoSDKRTC.TraceId, rhs: VideoSDKRTC.TraceId) -> Swift.Bool
  public static func == (lhs: VideoSDKRTC.TraceId, rhs: VideoSDKRTC.TraceId) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol Tracer : AnyObject {
  func spanBuilder(spanName: Swift.String) -> any VideoSDKRTC.SpanBuilder
}
public protocol TracerProvider {
  func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String?) -> any VideoSDKRTC.Tracer
}
public class TracerProviderBuilder {
  public var clock: any VideoSDKRTC.Clock {
    get
  }
  public var idGenerator: any VideoSDKRTC.IdGenerator {
    get
  }
  public var resource: VideoSDKRTC.Resource {
    get
  }
  public var spanLimits: VideoSDKRTC.SpanLimits {
    get
  }
  public var sampler: any VideoSDKRTC.Sampler {
    get
  }
  public var spanProcessors: [any VideoSDKRTC.SpanProcessor] {
    get
  }
  public init()
  public func with(clock: any VideoSDKRTC.Clock) -> Self
  public func with(idGenerator: any VideoSDKRTC.IdGenerator) -> Self
  public func with(resource: VideoSDKRTC.Resource) -> Self
  public func with(spanLimits: VideoSDKRTC.SpanLimits) -> Self
  public func with(sampler: any VideoSDKRTC.Sampler) -> Self
  public func add(spanProcessor: any VideoSDKRTC.SpanProcessor) -> Self
  public func add(spanProcessors: [any VideoSDKRTC.SpanProcessor]) -> Self
  public func build() -> VideoSDKRTC.TracerProviderSdk
  @objc deinit
}
public class TracerProviderSdk : VideoSDKRTC.TracerProvider {
  public init(clock: any VideoSDKRTC.Clock = MillisClock(), idGenerator: any VideoSDKRTC.IdGenerator = RandomIdGenerator(), resource: VideoSDKRTC.Resource = EnvVarResource.get(), spanLimits: VideoSDKRTC.SpanLimits = SpanLimits(), sampler: any VideoSDKRTC.Sampler = Samplers.parentBased(root: Samplers.alwaysOn), spanProcessors: [any VideoSDKRTC.SpanProcessor] = [])
  @objc deinit
  public func get(instrumentationName: Swift.String, instrumentationVersion: Swift.String? = nil) -> any VideoSDKRTC.Tracer
  public func getActiveClock() -> any VideoSDKRTC.Clock
  public func updateActiveClock(_ newClock: any VideoSDKRTC.Clock)
  public func getActiveIdGenerator() -> any VideoSDKRTC.IdGenerator
  public func updateActiveIdGenerator(_ newGenerator: any VideoSDKRTC.IdGenerator)
  public func getActiveResource() -> VideoSDKRTC.Resource
  public func updateActiveResource(_ newResource: VideoSDKRTC.Resource)
  public func getActiveSpanLimits() -> VideoSDKRTC.SpanLimits
  public func updateActiveSpanLimits(_ spanLimits: VideoSDKRTC.SpanLimits)
  public func getActiveSampler() -> any VideoSDKRTC.Sampler
  public func updateActiveSampler(_ newSampler: any VideoSDKRTC.Sampler)
  public func getActiveSpanProcessors() -> [any VideoSDKRTC.SpanProcessor]
  public func addSpanProcessor(_ spanProcessor: any VideoSDKRTC.SpanProcessor)
  public func resetSpanProcessors()
  public func shutdown()
  public func forceFlush(timeout: Foundation.TimeInterval? = nil)
}
@_hasMissingDesignatedInitializers public class TracerSdk : VideoSDKRTC.Tracer {
  final public let instrumentationScopeInfo: VideoSDKRTC.InstrumentationScopeInfo
  public func spanBuilder(spanName: Swift.String) -> any VideoSDKRTC.SpanBuilder
  @objc deinit
}
public struct TraceState : Swift.Equatable, Swift.Codable {
  public var entries: [VideoSDKRTC.TraceState.Entry] {
    get
  }
  public init()
  public init?(entries: [VideoSDKRTC.TraceState.Entry])
  public func get(key: Swift.String) -> Swift.String?
  public func setting(key: Swift.String, value: Swift.String) -> VideoSDKRTC.TraceState
  public func removing(key: Swift.String) -> VideoSDKRTC.TraceState
  public struct Entry : Swift.Equatable, Swift.Codable {
    public var key: Swift.String {
      get
    }
    public var value: Swift.String {
      get
    }
    public init?(key: Swift.String, value: Swift.String)
    public static func == (a: VideoSDKRTC.TraceState.Entry, b: VideoSDKRTC.TraceState.Entry) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public static func == (a: VideoSDKRTC.TraceState, b: VideoSDKRTC.TraceState) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum Google_Protobuf_NullValue : VideoSDKRTC.Enum {
  public typealias RawValue = Swift.Int
  case nullValue
  case UNRECOGNIZED(Swift.Int)
  public init()
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static let allCases: [VideoSDKRTC.Google_Protobuf_NullValue]
  public typealias AllCases = [VideoSDKRTC.Google_Protobuf_NullValue]
}
public struct Google_Protobuf_Struct {
  public var fields: [Swift.String : VideoSDKRTC.Google_Protobuf_Value]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
public struct Google_Protobuf_Value {
  public var kind: VideoSDKRTC.Google_Protobuf_Value.OneOf_Kind?
  public var nullValue: VideoSDKRTC.Google_Protobuf_NullValue {
    get
    set
  }
  public var numberValue: Swift.Double {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
  public var structValue: VideoSDKRTC.Google_Protobuf_Struct {
    get
    set
  }
  public var listValue: VideoSDKRTC.Google_Protobuf_ListValue {
    get
    set
  }
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public enum OneOf_Kind : Swift.Equatable {
    case nullValue(VideoSDKRTC.Google_Protobuf_NullValue)
    case numberValue(Swift.Double)
    case stringValue(Swift.String)
    case boolValue(Swift.Bool)
    case structValue(VideoSDKRTC.Google_Protobuf_Struct)
    case listValue(VideoSDKRTC.Google_Protobuf_ListValue)
    public static func == (a: VideoSDKRTC.Google_Protobuf_Value.OneOf_Kind, b: VideoSDKRTC.Google_Protobuf_Value.OneOf_Kind) -> Swift.Bool
  }
  public init()
}
public struct Google_Protobuf_ListValue {
  public var values: [VideoSDKRTC.Google_Protobuf_Value]
  public var unknownFields: VideoSDKRTC.UnknownStorage
  public init()
}
extension VideoSDKRTC.Google_Protobuf_Struct : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_Value : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_Value.OneOf_Kind : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_ListValue : @unchecked Swift.Sendable {
}
extension VideoSDKRTC.Google_Protobuf_NullValue : VideoSDKRTC._ProtoNameProviding {
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
}
extension VideoSDKRTC.Google_Protobuf_Struct : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_Struct, rhs: VideoSDKRTC.Google_Protobuf_Struct) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_Value : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_Value, rhs: VideoSDKRTC.Google_Protobuf_Value) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension VideoSDKRTC.Google_Protobuf_ListValue : VideoSDKRTC.Message, VideoSDKRTC._MessageImplementationBase, VideoSDKRTC._ProtoNameProviding {
  public static let protoMessageName: Swift.String
  public static let _protobuf_nameMap: VideoSDKRTC._NameMap
  public mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  public func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  public static func == (lhs: VideoSDKRTC.Google_Protobuf_ListValue, rhs: VideoSDKRTC.Google_Protobuf_ListValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum JSONEncodingError : Swift.Error {
  case anyTranscodeFailure
  case timestampRange
  case durationRange
  case fieldMaskConversion
  case missingFieldNames
  case missingValue
  case valueNumberNotFinite
  public static func == (a: VideoSDKRTC.JSONEncodingError, b: VideoSDKRTC.JSONEncodingError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(*, deprecated, message: "Use MetricProcessorSdk instead")
public class UngroupedBatcher : VideoSDKRTC.MetricProcessor {
  public init()
  public func finishCollectionCycle() -> [VideoSDKRTC.Metric]
  public func process(metric: VideoSDKRTC.Metric)
  @objc deinit
}
public protocol ValueAtQuantile {
  func quantile() -> Swift.Double
  func value() -> Swift.Double
}
public protocol Message : VideoSDKRTC._MessageBase {
  init()
  static var protoMessageName: Swift.String { get }
  var isInitialized: Swift.Bool { get }
  var unknownFields: VideoSDKRTC.UnknownStorage { get set }
  mutating func decodeMessage<D>(decoder: inout D) throws where D : VideoSDKRTC.SPBDecoder
  func traverse<V>(visitor: inout V) throws where V : VideoSDKRTC.Visitor
  func hash(into hasher: inout Swift.Hasher)
  func isEqualTo(message: any VideoSDKRTC.Message) -> Swift.Bool
}
public protocol _MessageBase : Swift.Sendable {
}
extension VideoSDKRTC.Message {
  public var isInitialized: Swift.Bool {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func with(_ populator: (inout Self) throws -> ()) rethrows -> Self
}
public protocol _MessageImplementationBase : Swift.Hashable, VideoSDKRTC.Message {
  func _protobuf_generated_isEqualTo(other: Self) -> Swift.Bool
}
extension VideoSDKRTC._MessageImplementationBase {
  public func isEqualTo(message: any VideoSDKRTC.Message) -> Swift.Bool
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
  public func _protobuf_generated_isEqualTo(other: Self) -> Swift.Bool
}
public enum VideoQuality : Swift.String, Swift.CaseIterable {
  case high, medium, low
  public init?(rawValue: Swift.String)
  public typealias AllCases = [VideoSDKRTC.VideoQuality]
  public typealias RawValue = Swift.String
  public static var allCases: [VideoSDKRTC.VideoQuality] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class VideoSDK {
  public static func config(token: Swift.String)
  public static func initMeeting(meetingId: Swift.String, participantId: Swift.String = "", participantName: Swift.String = "Guest", micEnabled: Swift.Bool = true, webcamEnabled: Swift.Bool = true, customCameraVideoStream: VideoSDKRTC.CustomRTCMediaStream? = nil, mode: VideoSDKRTC.Mode? = .CONFERENCE) -> VideoSDKRTC.Meeting
  public static func createCameraVideoTrack(encoderConfig: VideoSDKRTC.CustomVideoTrackConfig? = .h360p_w640p, facingMode: AVFoundation.AVCaptureDevice.Position? = .front, multiStream: Swift.Bool? = true) throws -> VideoSDKRTC.CustomRTCMediaStream?
  @objc deinit
}
public struct BinaryDecodingOptions : Swift.Sendable {
  public var messageDepthLimit: Swift.Int
  public var discardUnknownFields: Swift.Bool
  public init()
}
extension VideoSDKRTC.Google_Protobuf_Value : Swift.ExpressibleByIntegerLiteral {
  public typealias IntegerLiteralType = Swift.Int64
  public init(integerLiteral value: Swift.Int64)
}
extension VideoSDKRTC.Google_Protobuf_Value : Swift.ExpressibleByFloatLiteral {
  public typealias FloatLiteralType = Swift.Double
  public init(floatLiteral value: Swift.Double)
}
extension VideoSDKRTC.Google_Protobuf_Value : Swift.ExpressibleByBooleanLiteral {
  public typealias BooleanLiteralType = Swift.Bool
  public init(booleanLiteral value: Swift.Bool)
}
extension VideoSDKRTC.Google_Protobuf_Value : Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
  public init(stringLiteral value: Swift.String)
  public init(unicodeScalarLiteral value: Swift.String)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
}
extension VideoSDKRTC.Google_Protobuf_Value : Swift.ExpressibleByNilLiteral {
  public init(nilLiteral: ())
}
extension VideoSDKRTC.Google_Protobuf_Value {
  public init(numberValue: Swift.Double)
  public init(stringValue: Swift.String)
  public init(boolValue: Swift.Bool)
  public init(structValue: VideoSDKRTC.Google_Protobuf_Struct)
  public init(listValue: VideoSDKRTC.Google_Protobuf_ListValue)
}
@_hasMissingDesignatedInitializers public class ViewBuilder {
  public func withName(name: Swift.String) -> Self
  public func withDescription(description: Swift.String) -> Self
  public func withAggregation(aggregation: any VideoSDKRTC.Aggregation) -> Self
  public func addAttributeFilter(keyFilter: @escaping (Swift.String) -> Swift.Bool) -> Self
  public func addAttributeProcessor(processor: VideoSDKRTC.AttributeProcessor) -> Self
  public func build() -> VideoSDKRTC.StableView
  @objc deinit
}
public struct W3CBaggagePropagator : VideoSDKRTC.TextMapBaggagePropagator {
  public init()
  public let fields: Swift.Set<Swift.String>
  public func inject<S>(baggage: any VideoSDKRTC.Baggage, carrier: inout [Swift.String : Swift.String], setter: S) where S : VideoSDKRTC.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> (any VideoSDKRTC.Baggage)? where G : VideoSDKRTC.Getter
}
public struct W3CTraceContextPropagator : VideoSDKRTC.TextMapPropagator {
  public init()
  public let fields: Swift.Set<Swift.String>
  public func inject<S>(spanContext: VideoSDKRTC.SpanContext, carrier: inout [Swift.String : Swift.String], setter: S) where S : VideoSDKRTC.Setter
  public func extract<G>(carrier: [Swift.String : Swift.String], getter: G) -> VideoSDKRTC.SpanContext? where G : VideoSDKRTC.Getter
}
extension VideoSDKRTC.AggregationTemporality : Swift.Equatable {}
extension VideoSDKRTC.AggregationTemporality : Swift.Hashable {}
extension VideoSDKRTC.AggregationType : Swift.Equatable {}
extension VideoSDKRTC.AggregationType : Swift.Hashable {}
extension VideoSDKRTC.AggregationType : Swift.RawRepresentable {}
extension VideoSDKRTC.TextFormatDecodingError : Swift.Equatable {}
extension VideoSDKRTC.TextFormatDecodingError : Swift.Hashable {}
extension VideoSDKRTC.CameraPosition : Swift.Equatable {}
extension VideoSDKRTC.CameraPosition : Swift.Hashable {}
extension VideoSDKRTC.CameraPosition : Swift.RawRepresentable {}
extension VideoSDKRTC.CustomVideoTrackConfig : Swift.Equatable {}
extension VideoSDKRTC.CustomVideoTrackConfig : Swift.Hashable {}
extension VideoSDKRTC.BinaryDecodingError : Swift.Equatable {}
extension VideoSDKRTC.BinaryDecodingError : Swift.Hashable {}
extension VideoSDKRTC.EmptyMetricStorage : VideoSDKRTC.MetricStorage {}
extension VideoSDKRTC.EmptyMetricStorage : VideoSDKRTC.WritableMetricStorage {}
extension VideoSDKRTC.ExportResult : Swift.Equatable {}
extension VideoSDKRTC.ExportResult : Swift.Hashable {}
extension VideoSDKRTC.ConfigLayoutPriority : Swift.Equatable {}
extension VideoSDKRTC.ConfigLayoutPriority : Swift.Hashable {}
extension VideoSDKRTC.ConfigLayoutPriority : Swift.RawRepresentable {}
extension VideoSDKRTC.ConfigLayoutGrid : Swift.Equatable {}
extension VideoSDKRTC.ConfigLayoutGrid : Swift.Hashable {}
extension VideoSDKRTC.ConfigLayoutGrid : Swift.RawRepresentable {}
extension VideoSDKRTC.ConfigTheme : Swift.Equatable {}
extension VideoSDKRTC.ConfigTheme : Swift.Hashable {}
extension VideoSDKRTC.ConfigTheme : Swift.RawRepresentable {}
extension VideoSDKRTC.ConfigMode : Swift.Equatable {}
extension VideoSDKRTC.ConfigMode : Swift.Hashable {}
extension VideoSDKRTC.ConfigMode : Swift.RawRepresentable {}
extension VideoSDKRTC.ConfigQuality : Swift.Equatable {}
extension VideoSDKRTC.ConfigQuality : Swift.Hashable {}
extension VideoSDKRTC.ConfigQuality : Swift.RawRepresentable {}
extension VideoSDKRTC.ConfigOrientation : Swift.Equatable {}
extension VideoSDKRTC.ConfigOrientation : Swift.Hashable {}
extension VideoSDKRTC.ConfigOrientation : Swift.RawRepresentable {}
extension VideoSDKRTC.InstrumentType : Swift.Equatable {}
extension VideoSDKRTC.InstrumentType : Swift.Hashable {}
extension VideoSDKRTC.InstrumentValueType : Swift.Equatable {}
extension VideoSDKRTC.InstrumentValueType : Swift.Hashable {}
extension VideoSDKRTC.MeetingState : Swift.Equatable {}
extension VideoSDKRTC.MeetingState : Swift.Hashable {}
extension VideoSDKRTC.MeetingState : Swift.RawRepresentable {}
extension VideoSDKRTC.Mode : Swift.Equatable {}
extension VideoSDKRTC.Mode : Swift.Hashable {}
extension VideoSDKRTC.Mode : Swift.RawRepresentable {}
extension VideoSDKRTC.VideoSDKError : Swift.Equatable {}
extension VideoSDKRTC.VideoSDKError : Swift.Hashable {}
extension VideoSDKRTC.VideoSDKError : Swift.RawRepresentable {}
extension VideoSDKRTC.HLSState : Swift.Equatable {}
extension VideoSDKRTC.HLSState : Swift.Hashable {}
extension VideoSDKRTC.HLSState : Swift.RawRepresentable {}
extension VideoSDKRTC.RecordingState : Swift.Equatable {}
extension VideoSDKRTC.RecordingState : Swift.Hashable {}
extension VideoSDKRTC.RecordingState : Swift.RawRepresentable {}
extension VideoSDKRTC.LiveStreamState : Swift.Equatable {}
extension VideoSDKRTC.LiveStreamState : Swift.Hashable {}
extension VideoSDKRTC.LiveStreamState : Swift.RawRepresentable {}
extension VideoSDKRTC.MetricExporterResultCode : Swift.Equatable {}
extension VideoSDKRTC.MetricExporterResultCode : Swift.Hashable {}
extension VideoSDKRTC.OpenTelemetryContextKeys : Swift.Equatable {}
extension VideoSDKRTC.OpenTelemetryContextKeys : Swift.Hashable {}
extension VideoSDKRTC.OpenTelemetryContextKeys : Swift.RawRepresentable {}
extension VideoSDKRTC.PinType : Swift.Equatable {}
extension VideoSDKRTC.PinType : Swift.Hashable {}
extension VideoSDKRTC.PinType : Swift.RawRepresentable {}
extension VideoSDKRTC.BinaryEncodingError : Swift.Equatable {}
extension VideoSDKRTC.BinaryEncodingError : Swift.Hashable {}
extension VideoSDKRTC.ResourceAttributes : Swift.Equatable {}
extension VideoSDKRTC.ResourceAttributes : Swift.Hashable {}
extension VideoSDKRTC.ResourceAttributes : Swift.RawRepresentable {}
extension VideoSDKRTC.ResourceAttributes.AwsEcsLaunchtypeValues : Swift.Equatable {}
extension VideoSDKRTC.ResourceAttributes.AwsEcsLaunchtypeValues : Swift.Hashable {}
extension VideoSDKRTC.ResourceAttributes.AwsEcsLaunchtypeValues : Swift.RawRepresentable {}
extension VideoSDKRTC.SemanticAttributes : Swift.Equatable {}
extension VideoSDKRTC.SemanticAttributes : Swift.Hashable {}
extension VideoSDKRTC.SemanticAttributes : Swift.RawRepresentable {}
extension VideoSDKRTC.SemanticAttributes.OpentracingRefTypeValues : Swift.Equatable {}
extension VideoSDKRTC.SemanticAttributes.OpentracingRefTypeValues : Swift.Hashable {}
extension VideoSDKRTC.SemanticAttributes.OpentracingRefTypeValues : Swift.RawRepresentable {}
extension VideoSDKRTC.SemanticAttributes.DbCassandraConsistencyLevelValues : Swift.Equatable {}
extension VideoSDKRTC.SemanticAttributes.DbCassandraConsistencyLevelValues : Swift.Hashable {}
extension VideoSDKRTC.SemanticAttributes.DbCassandraConsistencyLevelValues : Swift.RawRepresentable {}
extension VideoSDKRTC.SemanticAttributes.DbCosmosdbConnectionModeValues : Swift.Equatable {}
extension VideoSDKRTC.SemanticAttributes.DbCosmosdbConnectionModeValues : Swift.Hashable {}
extension VideoSDKRTC.SemanticAttributes.DbCosmosdbConnectionModeValues : Swift.RawRepresentable {}
extension VideoSDKRTC.SemanticAttributes.OtelStatusCodeValues : Swift.Equatable {}
extension VideoSDKRTC.SemanticAttributes.OtelStatusCodeValues : Swift.Hashable {}
extension VideoSDKRTC.SemanticAttributes.OtelStatusCodeValues : Swift.RawRepresentable {}
extension VideoSDKRTC.SemanticAttributes.FaasTriggerValues : Swift.Equatable {}
extension VideoSDKRTC.SemanticAttributes.FaasTriggerValues : Swift.Hashable {}
extension VideoSDKRTC.SemanticAttributes.FaasTriggerValues : Swift.RawRepresentable {}
extension VideoSDKRTC.SemanticAttributes.GraphqlOperationTypeValues : Swift.Equatable {}
extension VideoSDKRTC.SemanticAttributes.GraphqlOperationTypeValues : Swift.Hashable {}
extension VideoSDKRTC.SemanticAttributes.GraphqlOperationTypeValues : Swift.RawRepresentable {}
extension VideoSDKRTC.SemanticAttributes.MessagingRocketmqMessageTypeValues : Swift.Equatable {}
extension VideoSDKRTC.SemanticAttributes.MessagingRocketmqMessageTypeValues : Swift.Hashable {}
extension VideoSDKRTC.SemanticAttributes.MessagingRocketmqMessageTypeValues : Swift.RawRepresentable {}
extension VideoSDKRTC.SemanticAttributes.MessagingRocketmqConsumptionModelValues : Swift.Equatable {}
extension VideoSDKRTC.SemanticAttributes.MessagingRocketmqConsumptionModelValues : Swift.Hashable {}
extension VideoSDKRTC.SemanticAttributes.MessagingRocketmqConsumptionModelValues : Swift.RawRepresentable {}
extension VideoSDKRTC.SemanticAttributes.RpcGrpcStatusCodeValues : Swift.Equatable {}
extension VideoSDKRTC.SemanticAttributes.RpcGrpcStatusCodeValues : Swift.Hashable {}
extension VideoSDKRTC.SemanticAttributes.RpcGrpcStatusCodeValues : Swift.RawRepresentable {}
extension VideoSDKRTC.SemanticAttributes.MessageTypeValues : Swift.Equatable {}
extension VideoSDKRTC.SemanticAttributes.MessageTypeValues : Swift.Hashable {}
extension VideoSDKRTC.SemanticAttributes.MessageTypeValues : Swift.RawRepresentable {}
extension VideoSDKRTC.SemanticAttributes.RpcConnectRpcErrorCodeValues : Swift.Equatable {}
extension VideoSDKRTC.SemanticAttributes.RpcConnectRpcErrorCodeValues : Swift.Hashable {}
extension VideoSDKRTC.SemanticAttributes.RpcConnectRpcErrorCodeValues : Swift.RawRepresentable {}
extension VideoSDKRTC.Severity : Swift.Hashable {}
extension VideoSDKRTC.Severity : Swift.RawRepresentable {}
extension VideoSDKRTC.SpanExporterResultCode : Swift.Equatable {}
extension VideoSDKRTC.SpanExporterResultCode : Swift.Hashable {}
extension VideoSDKRTC.SpanKind : Swift.Hashable {}
extension VideoSDKRTC.SpanKind : Swift.RawRepresentable {}
extension VideoSDKRTC.AnyUnpackError : Swift.Equatable {}
extension VideoSDKRTC.AnyUnpackError : Swift.Hashable {}
extension VideoSDKRTC.MetricDataType : Swift.Equatable {}
extension VideoSDKRTC.MetricDataType : Swift.Hashable {}
extension VideoSDKRTC.SynchronousMetricStorage : VideoSDKRTC.MetricStorage {}
extension VideoSDKRTC.SynchronousMetricStorage : VideoSDKRTC.WritableMetricStorage {}
extension VideoSDKRTC.BinaryDelimited.Error : Swift.Equatable {}
extension VideoSDKRTC.BinaryDelimited.Error : Swift.Hashable {}
extension VideoSDKRTC.JSONEncodingError : Swift.Equatable {}
extension VideoSDKRTC.JSONEncodingError : Swift.Hashable {}
extension VideoSDKRTC.VideoQuality : Swift.Equatable {}
extension VideoSDKRTC.VideoQuality : Swift.Hashable {}
extension VideoSDKRTC.VideoQuality : Swift.RawRepresentable {}
